"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("@pnpm/logger");
const package_bins_1 = require("@pnpm/package-bins");
const cmdShim = require("@zkochan/cmd-shim");
const isWindows = require("is-windows");
const mkdirp = require("mkdirp");
const Module = require("module");
const fs = require("mz/fs");
const normalizePath = require("normalize-path");
const path = require("path");
const R = require("ramda");
const readPackageJson = require("read-package-json");
const getPkgDirs_1 = require("./getPkgDirs");
const IS_WINDOWS = isWindows();
function mkdirPromise(dir, options = {}) {
    return new Promise((resolve, reject) => {
        mkdirp(dir, options, (error, made) => error === null ? resolve(made) : reject(error));
    });
}
exports.default = (modules, binPath, exceptPkgName) => __awaiter(this, void 0, void 0, function* () {
    const pkgDirs = yield getPkgDirs_1.default(modules);
    return Promise.all(pkgDirs
        .map((pkgDir) => normalizePath(pkgDir))
        .filter((pkgDir) => !exceptPkgName || !pkgDir.endsWith(`/${exceptPkgName}`))
        .map((pkgDir) => linkPackageBins(pkgDir, binPath)));
});
/**
 * Links executable into `node_modules/.bin`.
 */
function linkPackageBins(target, binPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const pkg = yield safeReadPkg(path.join(target, 'package.json'));
        if (!pkg) {
            logger_1.default.warn(`There's a directory in node_modules without package.json: ${target}`);
            return;
        }
        const cmds = yield package_bins_1.default(pkg, target);
        if (!cmds.length)
            return;
        yield mkdirPromise(binPath);
        yield Promise.all(cmds.map((cmd) => __awaiter(this, void 0, void 0, function* () {
            const externalBinPath = path.join(binPath, cmd.name);
            const nodePath = (yield getBinNodePaths(target)).join(path.delimiter);
            return cmdShim(cmd.path, externalBinPath, { nodePath });
        })));
    });
}
exports.linkPackageBins = linkPackageBins;
function getBinNodePaths(target) {
    return __awaiter(this, void 0, void 0, function* () {
        const targetRealPath = yield fs.realpath(target);
        return R.union(Module['_nodeModulePaths'](targetRealPath), // tslint:disable-line:no-string-literal
        Module['_nodeModulePaths'](target));
    });
}
function safeReadPkg(pkgPath) {
    return new Promise((resolve, reject) => {
        readPackageJson(pkgPath, (err, pkg) => {
            if (!err) {
                resolve(pkg);
            }
            else if (err.code !== 'ENOENT') {
                reject(err);
            }
            else {
                resolve(null);
            }
        });
    });
}
//# sourceMappingURL=index.js.map