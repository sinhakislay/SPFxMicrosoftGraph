"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tsutils_1 = require("tsutils");
const ts = require("typescript");
const Lint = require("tslint");
class Rule extends Lint.Rules.AbstractRule {
    apply(sourceFile) {
        return this.applyWithFunction(sourceFile, (ctx) => {
            const childCallback = (node) => {
                if (tsutils_1.isCallExpression(node) &&
                    tsutils_1.isPropertyAccessExpression(node.expression) &&
                    tsutils_1.isIdentifier(node.expression.expression) &&
                    node.expression.expression.text === 'require' &&
                    node.expression.getChildCount() === 3) {
                    const lastChild = node.expression.getChildAt(2);
                    if (tsutils_1.isIdentifier(lastChild) && lastChild.text === 'ensure') {
                        ctx.addFailureAtNode(node.expression, 'Calls to \'require.ensure\' are not allowed. Use \'import\' instead.');
                    }
                }
                return ts.forEachChild(node, childCallback);
            };
            return ts.forEachChild(ctx.sourceFile, childCallback);
        });
    }
}
Rule.metadata = {
    ruleName: 'no-require-ensure',
    description: 'Warns about the use of the require.ensure function.',
    rationale: '`require.ensure` is outdated. Use `import(...)` instead.',
    optionsDescription: 'No options available.',
    options: {},
    type: 'functionality',
    typescriptOnly: false
};
exports.Rule = Rule;
//# sourceMappingURL=noRequireEnsureRule.js.map