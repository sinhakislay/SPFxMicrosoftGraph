var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { virtual } from '@microsoft/decorators';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { _TraceLogger, _logSourceServiceKey } from '@microsoft/sp-diagnostics';
import { BaseComponent } from '@microsoft/sp-component-base';
/**
 * The base class for all client-side extensions.
 *
 * @public
 */
var BaseExtension = /** @class */ (function (_super) {
    __extends(BaseExtension, _super);
    /** @internal */
    function BaseExtension() {
        var _this = _super.call(this) || this;
        _this._properties = {};
        return _this;
    }
    /**
     * @internal
     */
    BaseExtension.prototype._init = function (context, propertiesJson) {
        var _this = this;
        this._initializeContext(context);
        this._deserializeProperties(propertiesJson);
        var logSource = this.context.serviceScope.consume(_logSourceServiceKey);
        var perflogKey = logSource + '.Extension.Init';
        _PerformanceLogger.startMarkForComponent(perflogKey);
        this._initializeExtensionType();
        this._initPromise = this.onInit().then(function () {
            _PerformanceLogger.endMarkForComponent(perflogKey);
            _PerformanceLogger.logPerformanceMetricToConsole(perflogKey, 'Extension.Init', _this.context.manifest.id, _this.context.manifest.alias);
        });
        return this._initPromise;
    };
    /**
     * This method can be overriden by different extension types (e.g. app customizers) to do specific initialization.
     *
     * @internal
     */
    BaseExtension.prototype._initializeExtensionType = function () {
        return;
    };
    Object.defineProperty(BaseExtension.prototype, "properties", {
        /**
         * Extension properties is a JavaScript object that are passed in by the application that initializes the extension.
         *
         * @remarks
         * Properties can be used in the extension code to define configurable behaviors. The application has control over
         * what properties to provide to an instance of the extension, however the most common way would be to have it
         * stored on the server as JSON and pass it as is to the extension on initialization.
         *
         * @readonly
         */
        get: function () {
            return this._properties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This event method is called when the client-side extension is first activated on the page.
     */
    BaseExtension.prototype.onInit = function () {
        return Promise.resolve();
    };
    BaseExtension.prototype._deserializeProperties = function (propertiesJson) {
        this._properties = {};
        try {
            if (propertiesJson && propertiesJson.trim() !== '') {
                this._properties = JSON.parse(propertiesJson);
            }
        }
        catch (e) {
            // This exception occurs e.g. when the SPField.clientSideComponentProperties contains a malformed
            // JSON string.  It is an "expected" user error (i.e. bad data), not a bug in our code.
            var logSource = this.context.serviceScope.consume(_logSourceServiceKey);
            _TraceLogger.logError(logSource, new Error("Failed to deserialize properties for extension \"" + this.context.manifest.alias + "\"\n          + \" with id=" + this.context.manifest.id + ": " + e.message));
        }
    };
    __decorate([
        virtual
    ], BaseExtension.prototype, "_initializeExtensionType", null);
    __decorate([
        virtual
    ], BaseExtension.prototype, "onInit", null);
    return BaseExtension;
}(BaseComponent));
export default BaseExtension;
//# sourceMappingURL=BaseExtension.js.map