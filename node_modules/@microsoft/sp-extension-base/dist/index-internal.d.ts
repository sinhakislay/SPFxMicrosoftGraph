/**
 * SharePoint Framework support for building client-side extensions.
 *
 * @packagedocumentation
 */

import { BaseComponent } from '@microsoft/sp-component-base';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { IDisposable } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';

/**
 * The base class for all client-side extensions.
 *
 * @public
 */
export declare abstract class BaseExtension<TProperties> extends BaseComponent {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.context}
     */
    protected readonly context: ExtensionContext;
    private _initPromise;
    private _properties;
    /* Excluded from this release type: __constructor */
    /* Excluded from this release type: _init */
    /* Excluded from this release type: _initializeExtensionType */
    /**
     * Extension properties is a JavaScript object that are passed in by the application that initializes the extension.
     *
     * @remarks
     * Properties can be used in the extension code to define configurable behaviors. The application has control over
     * what properties to provide to an instance of the extension, however the most common way would be to have it
     * stored on the server as JSON and pass it as is to the extension on initialization.
     *
     * @readonly
     */
    protected readonly properties: TProperties;
    /**
     * This event method is called when the client-side extension is first activated on the page.
     */
    protected onInit(): Promise<void>;
    private _deserializeProperties;
}

/**
 * The base class for context objects for client-side extensions.
 *
 * @public
 */
export declare class ExtensionContext extends BaseComponentContext {
    /* Excluded from this release type: __constructor */
}

/* Excluded from this release type: _ExtensionManager */

/* Excluded from this release type: _IComponentContextParameters */

/* Excluded from this release type: _IExtensionContextParameters */

export { }
