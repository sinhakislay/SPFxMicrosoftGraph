{"version":3,"file":"SetPublicPathPlugin.js","sourceRoot":"","sources":["../src/SetPublicPathPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\nimport {\r\n  cloneDeep,\r\n  escapeRegExp\r\n} from 'lodash';\r\nimport * as Webpack from 'webpack';\r\nimport * as Tapable from 'tapable';\r\n\r\nimport {\r\n  IV3Compilation,\r\n  IV3Module,\r\n  IV3Chunk\r\n} from './V3Interfaces';\r\nimport {\r\n  IInternalOptions,\r\n  getSetPublicPathCode\r\n} from './codeGenerator';\r\n\r\n/**\r\n * The base options for setting the webpack public path at runtime.\r\n *\r\n * @public\r\n */\r\nexport interface ISetWebpackPublicPathOptions {\r\n  /**\r\n   * Use the System.baseURL property if it is defined.\r\n   */\r\n  systemJs?: boolean;\r\n\r\n  /**\r\n   * Use the specified string as a URL prefix after the SystemJS path or the publicPath option.\r\n   * If neither systemJs nor publicPath is defined, this option will not apply and an exception will be thrown.\r\n   */\r\n  urlPrefix?: string;\r\n\r\n  /**\r\n   * Use the specified path as the base public path.\r\n   */\r\n  publicPath?: string;\r\n\r\n  /**\r\n   * Check for a variable with this name on the page and use its value as a regular expression against script paths to\r\n   *  the bundle's script. If a value foo is passed into regexVariable, the produced bundle will look for a variable\r\n   *  called foo during initialization, and if a foo variable is found, use its value as a regular expression to detect\r\n   *  the bundle's script.\r\n   *\r\n   * See the README for more information.\r\n   */\r\n  regexVariable?: string;\r\n\r\n  /**\r\n   * A function that returns a snippet of code that manipulates the variable with the name that's specified in the\r\n   *  parameter. If this parameter isn't provided, no post-processing code is included. The variable must be modified\r\n   *  in-place - the processed value should not be returned.\r\n   *\r\n   * See the README for more information.\r\n   */\r\n  getPostProcessScript?: (varName: string) => string;\r\n\r\n  /**\r\n   * If true, find the last script matching the regexVariable (if it is set). If false, find the first matching script.\r\n   * This can be useful if there are multiple scripts loaded in the DOM that match the regexVariable.\r\n   */\r\n  preferLastFoundScript?: boolean;\r\n\r\n  /**\r\n   * If true, always include the public path-setting code. Don't try to detect if any chunks or assets are present.\r\n   */\r\n  skipDetection?: boolean;\r\n}\r\n\r\n/**\r\n * Options for the set-webpack-public-path plugin.\r\n *\r\n * @public\r\n */\r\nexport interface ISetWebpackPublicPathPluginOptions extends ISetWebpackPublicPathOptions {\r\n  /**\r\n   * An object that describes how the public path should be discovered.\r\n   */\r\n  scriptName?: {\r\n    /**\r\n     * A regular expression expressed as a string to be applied to all script paths on the page.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * If true, the name property is tokenized.\r\n     *\r\n     * See the README for more information.\r\n     */\r\n    isTokenized: boolean;\r\n  };\r\n}\r\n\r\ninterface IV4MainTemplate extends Webpack.compilation.MainTemplate {\r\n  hooks: {\r\n    jsonpScript?: Tapable.SyncWaterfallHook<string, Webpack.compilation.Chunk, string>;\r\n    requireExtensions: Tapable.SyncWaterfallHook<string, Webpack.compilation.Chunk, string>;\r\n    startup: Tapable.SyncHook<string, Webpack.compilation.Chunk, string>;\r\n  };\r\n  requireFn: string;\r\n}\r\n\r\ninterface IV4Chunk extends Webpack.compilation.Chunk {\r\n  forEachModule(callback: (module: Webpack.compilation.Module) => void): void;\r\n}\r\n\r\ninterface IStartupCodeOptions {\r\n  source: string;\r\n  chunk: IV3Chunk | Webpack.compilation.Chunk;\r\n  hash: string;\r\n  requireFn: string;\r\n}\r\n\r\n/**\r\n * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,\r\n *  optionally appended to the SystemJs baseURL property.\r\n *\r\n * @public\r\n */\r\nexport class SetPublicPathPlugin implements Webpack.Plugin {\r\n  public options: ISetWebpackPublicPathPluginOptions;\r\n\r\n  constructor(options: ISetWebpackPublicPathPluginOptions) {\r\n    this.options = options;\r\n  }\r\n\r\n  public apply(compiler: Webpack.Compiler): void {\r\n    const isWebpack4: boolean = !!compiler.hooks;\r\n\r\n    if (isWebpack4) {\r\n      compiler.hooks.compilation.tap('set-webpack-public-path', (compilation: Webpack.compilation.Compilation) => {\r\n        const v4MainTemplate: IV4MainTemplate = compilation.mainTemplate as IV4MainTemplate;\r\n        v4MainTemplate.hooks.startup.tap(\r\n          'set-webpack-public-path',\r\n          (source: string, chunk: IV4Chunk, hash: string) => {\r\n            let assetOrChunkFound: boolean = !!this.options.skipDetection;\r\n\r\n            if (!assetOrChunkFound) {\r\n              for (const chunkGroup of chunk.groupsIterable) {\r\n                const children: Webpack.compilation.Chunk[] = chunkGroup.getChildren();\r\n                assetOrChunkFound = assetOrChunkFound || (children.length > 0);\r\n              }\r\n            }\r\n\r\n            if (!assetOrChunkFound) {\r\n              for (const innerModule of chunk.modulesIterable) {\r\n                if (innerModule.buildInfo.assets && Object.keys(innerModule.buildInfo.assets).length > 0) {\r\n                  assetOrChunkFound = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (assetOrChunkFound) {\r\n              return this._getStartupCode({\r\n                source,\r\n                chunk,\r\n                hash,\r\n                requireFn: v4MainTemplate.requireFn\r\n              });\r\n            } else {\r\n              return source;\r\n            }\r\n          }\r\n        );\r\n      });\r\n    } else {\r\n      compiler.plugin('compilation', (compilation: IV3Compilation, params: Object): void => {\r\n        compilation.mainTemplate.plugin('startup', (source: string, chunk: IV3Chunk, hash: string) => {\r\n          let assetOrChunkFound: boolean = this.options.skipDetection || chunk.chunks.length > 0;\r\n          if (!assetOrChunkFound) {\r\n            chunk.forEachModule((innerModule: IV3Module) => {\r\n              if (innerModule.assets && Object.keys(innerModule.assets).length > 0) {\r\n                assetOrChunkFound = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (assetOrChunkFound) {\r\n            return this._getStartupCode({\r\n              source,\r\n              chunk,\r\n              hash,\r\n              requireFn: compilation.mainTemplate.requireFn\r\n            });\r\n          } else {\r\n            return source;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private _getStartupCode(options: IStartupCodeOptions): string {\r\n    const moduleOptions: IInternalOptions = cloneDeep(this.options);\r\n\r\n    // If this module has ownership over any chunks or assets, inject the public path code\r\n    moduleOptions.webpackPublicPathVariable = `${options.requireFn}.p`;\r\n    moduleOptions.linePrefix = '  ';\r\n\r\n    if (this.options.scriptName) {\r\n      moduleOptions.regexName = this.options.scriptName.name;\r\n      if (this.options.scriptName.isTokenized) {\r\n        moduleOptions.regexName = moduleOptions.regexName\r\n          .replace(/\\[name\\]/g, escapeRegExp(options.chunk.name))\r\n          .replace(/\\[hash\\]/g, options.chunk.renderedHash);\r\n      }\r\n    }\r\n\r\n    return [\r\n      '// Set the webpack public path',\r\n      '(function () {',\r\n        getSetPublicPathCode(moduleOptions, console.error),\r\n      '})();',\r\n      '',\r\n      options.source\r\n    ].join(EOL);\r\n  }\r\n}\r\n"]}