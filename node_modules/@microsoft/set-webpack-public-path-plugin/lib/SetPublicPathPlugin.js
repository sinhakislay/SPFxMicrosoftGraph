"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const lodash_1 = require("lodash");
const codeGenerator_1 = require("./codeGenerator");
/**
 * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,
 *  optionally appended to the SystemJs baseURL property.
 *
 * @public
 */
class SetPublicPathPlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        const isWebpack4 = !!compiler.hooks;
        if (isWebpack4) {
            compiler.hooks.compilation.tap('set-webpack-public-path', (compilation) => {
                const v4MainTemplate = compilation.mainTemplate;
                v4MainTemplate.hooks.startup.tap('set-webpack-public-path', (source, chunk, hash) => {
                    let assetOrChunkFound = !!this.options.skipDetection;
                    if (!assetOrChunkFound) {
                        for (const chunkGroup of chunk.groupsIterable) {
                            const children = chunkGroup.getChildren();
                            assetOrChunkFound = assetOrChunkFound || (children.length > 0);
                        }
                    }
                    if (!assetOrChunkFound) {
                        for (const innerModule of chunk.modulesIterable) {
                            if (innerModule.buildInfo.assets && Object.keys(innerModule.buildInfo.assets).length > 0) {
                                assetOrChunkFound = true;
                            }
                        }
                    }
                    if (assetOrChunkFound) {
                        return this._getStartupCode({
                            source,
                            chunk,
                            hash,
                            requireFn: v4MainTemplate.requireFn
                        });
                    }
                    else {
                        return source;
                    }
                });
            });
        }
        else {
            compiler.plugin('compilation', (compilation, params) => {
                compilation.mainTemplate.plugin('startup', (source, chunk, hash) => {
                    let assetOrChunkFound = this.options.skipDetection || chunk.chunks.length > 0;
                    if (!assetOrChunkFound) {
                        chunk.forEachModule((innerModule) => {
                            if (innerModule.assets && Object.keys(innerModule.assets).length > 0) {
                                assetOrChunkFound = true;
                            }
                        });
                    }
                    if (assetOrChunkFound) {
                        return this._getStartupCode({
                            source,
                            chunk,
                            hash,
                            requireFn: compilation.mainTemplate.requireFn
                        });
                    }
                    else {
                        return source;
                    }
                });
            });
        }
    }
    _getStartupCode(options) {
        const moduleOptions = lodash_1.cloneDeep(this.options);
        // If this module has ownership over any chunks or assets, inject the public path code
        moduleOptions.webpackPublicPathVariable = `${options.requireFn}.p`;
        moduleOptions.linePrefix = '  ';
        if (this.options.scriptName) {
            moduleOptions.regexName = this.options.scriptName.name;
            if (this.options.scriptName.isTokenized) {
                moduleOptions.regexName = moduleOptions.regexName
                    .replace(/\[name\]/g, lodash_1.escapeRegExp(options.chunk.name))
                    .replace(/\[hash\]/g, options.chunk.renderedHash);
            }
        }
        return [
            '// Set the webpack public path',
            '(function () {',
            codeGenerator_1.getSetPublicPathCode(moduleOptions, console.error),
            '})();',
            '',
            options.source
        ].join(os_1.EOL);
    }
}
exports.SetPublicPathPlugin = SetPublicPathPlugin;
//# sourceMappingURL=SetPublicPathPlugin.js.map