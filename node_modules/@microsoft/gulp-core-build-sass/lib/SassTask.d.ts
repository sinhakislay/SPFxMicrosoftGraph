import * as Gulp from 'gulp';
import { GulpTask } from '@microsoft/gulp-core-build';
import * as CleanCss from 'clean-css';
export interface ISassTaskConfig {
    /**
     * An optional parameter for text to include in the generated TypeScript file.
     */
    preamble?: string;
    /**
     * An optional parameter for text to include at the end of the generated
     * TypeScript file.
     */
    postamble?: string;
    /**
     * An array of glob patterns for locating files.
     */
    sassMatch?: string[];
    /**
     * If this option is specified, ALL files will be treated as module.sass or
     * module.scss and will automatically generate a corresponding TypeScript
     * file. All classes will be appended with a hash to help ensure uniqueness
     * on a page. This file can be imported directly, and will contain an object
     * describing the mangled class names.
     */
    useCSSModules?: boolean;
    /**
     * If false, we will set the CSS property naming warning to verbose message
     * while the module generates to prevent task exit with exitcode: 1.
     * Default value is true.
     */
    warnOnCssInvalidPropertyName?: boolean;
    /**
     * If true, we will generate CSS in the lib folder. If false, the CSS is
     * directly embedded into the TypeScript file.
     */
    dropCssFiles?: boolean;
    /**
     * If files are matched by sassMatch which do not end in .module.sass or
     * .module.scss, log a warning.
     */
    warnOnNonCSSModules?: boolean;
    /**
     * If this option is specified, module CSS will be exported using the name
     * provided. If an empty value is specified, the styles will be exported
     * using 'export =', rather than a named export. By default, we use the
     * 'default' export name.
     */
    moduleExportName?: string;
    /**
     * Allows the override of the options passed to clean-css. Options such a
     * returnPromise and sourceMap will be ignored.
     */
    cleanCssOptions?: CleanCss.Options;
}
export declare class SassTask extends GulpTask<ISassTaskConfig> {
    cleanMatch: string[];
    private _postCSSPlugins;
    constructor();
    loadSchema(): Object;
    executeTask(gulp: typeof Gulp): Promise<void> | undefined;
    private _processFile;
    private _globAll;
    private _patchSassUrl;
    private _getStylesExportString;
}
//# sourceMappingURL=SassTask.d.ts.map