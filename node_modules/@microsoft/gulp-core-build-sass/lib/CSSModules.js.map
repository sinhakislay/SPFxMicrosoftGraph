{"version":3,"file":"CSSModules.js","sourceRoot":"","sources":["../src/CSSModules.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAG7B,8CAA8C;AAC9C,iCAAiC;AAmBjC,MAAqB,UAAU;IAI7B;;;;;;;OAOG;IACH,YAAY,QAAiB;QAC3B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;SAChC;IACH,CAAC;IAEM,SAAS;QACd,OAAO,UAAU,CAAC;YAChB,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YACjC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;SACvD,CAAC,CAAC;IACL,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAES,QAAQ,CAAC,WAAmB,EAAE,IAAe;QACrD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAES,kBAAkB,CAAC,IAAY,EAAE,QAAgB,EAAE,GAAW;QAEtE,MAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACrE,MAAM,gBAAgB,GAAW,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAClE,MAAM,IAAI,GAAW,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,gBAAgB,CAAC;aACpC,MAAM,CAAC,GAAG,CAAC;aACX,MAAM,CAAC,KAAK,CAAC;aACb,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5C,OAAO,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC;IAC3B,CAAC;CACF;AA9CD,6BA8CC","sourcesContent":["import * as path from 'path';\r\n\r\nimport * as postcss from 'postcss';\r\nimport * as cssModules from 'postcss-modules';\r\nimport * as crypto from 'crypto';\r\n\r\nexport interface IClassMap {\r\n  [className: string]: string;\r\n}\r\n\r\nexport interface ICSSModules {\r\n  /**\r\n   * Return a configured postcss plugin that will map class names to a\r\n   * consistently generated scoped name.\r\n   */\r\n  getPlugin(): postcss.AcceptedPlugin;\r\n\r\n  /**\r\n   * Return the CSS class map that is stored after postcss-modules runs.\r\n   */\r\n  getClassMap(): IClassMap;\r\n}\r\n\r\nexport default class CSSModules implements ICSSModules {\r\n  private _classMap: IClassMap;\r\n  private _rootPath: string;\r\n\r\n  /**\r\n   * CSSModules includes the source file's path relative to the project root\r\n   * as part of the class name hashing algorithm.\r\n   * This should be configured with the setting:\r\n   * {@link @microsoft/gulp-core-build#IBuildConfig.rootPath}\r\n   * That is used in {@link ./SassTask#SassTask}\r\n   * But will default the process' current working dir.\r\n   */\r\n  constructor(rootPath?: string) {\r\n    this._classMap = {};\r\n    if (rootPath) {\r\n      this._rootPath = rootPath;\r\n    } else {\r\n      this._rootPath = process.cwd();\r\n    }\r\n  }\r\n\r\n  public getPlugin(): postcss.AcceptedPlugin {\r\n    return cssModules({\r\n      getJSON: this.saveJson.bind(this),\r\n      generateScopedName: this.generateScopedName.bind(this)\r\n    });\r\n  }\r\n\r\n  public getClassMap(): IClassMap {\r\n    return this._classMap;\r\n  }\r\n\r\n  protected saveJson(cssFileName: string, json: IClassMap): void {\r\n    this._classMap = json;\r\n  }\r\n\r\n  protected generateScopedName(name: string, fileName: string, css: string)\r\n      : string {\r\n    const fileBaseName: string = path.relative(this._rootPath, fileName);\r\n    const safeFileBaseName: string = fileBaseName.replace(/\\\\/g, '/');\r\n    const hash: string = crypto.createHmac('sha1', safeFileBaseName)\r\n                               .update(css)\r\n                               .digest('hex')\r\n                               .substring(0, 8);\r\n    return `${name}_${hash}`;\r\n  }\r\n}\r\n"]}