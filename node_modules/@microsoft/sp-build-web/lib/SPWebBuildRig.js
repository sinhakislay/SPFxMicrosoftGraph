"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gulp_core_build_sass_1 = require("@microsoft/gulp-core-build-sass");
const gulp_core_build_serve_1 = require("@microsoft/gulp-core-build-serve");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
const gulp_core_build_webpack_1 = require("@microsoft/gulp-core-build-webpack");
const spBuildCoreTasks = require("@microsoft/sp-build-core-tasks/lib/index");
const ConfigureWebpackTask_1 = require("@microsoft/sp-build-core-tasks/lib/configureWebpack/ConfigureWebpackTask");
const gulp_core_build_typescript_1 = require("@microsoft/gulp-core-build-typescript");
const index_1 = require("@microsoft/sp-build-common/lib/index");
const WebBuildRigConstants_1 = require("./WebBuildRigConstants");
exports.serveWatchFilter = [
    'src/**/*.{ts,tsx,scss,resx,js,json,html}',
    '!src/**/*.{scss.ts,resx.ts}'
];
class SPWebBuildRig extends index_1.SPBuildRig {
    constructor() {
        super(...arguments);
        this._postBundleTasks = [];
    }
    addPostBundleTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postBundleTasks);
    }
    getYargs() {
        // tslint:disable:max-line-length
        return super.getYargs()
            .option('debug', {
            describe: 'runs tests in unit mode'
        })
            .option('upgrade', {
            describe: 'upgrades outdated files in the project'
        })
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle, 'build, localize, and bundle the project')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.deployAzureStorage, 'upload the assets to a development CDN')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.packageSolution, 'package the project into a SPPKG')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.test, 'build, localize, and bundle the project and run tests, and verify the coverage')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.serve, 'build and bundle the project and run the development server')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.devDeploy, 'deploy the current project to a development Azure CDN for sharing builds with colleagues.')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.trustDevCert, 'generates and trusts a development certificate if one isn\'t already present')
            .command(WebBuildRigConstants_1.WebBuildRigConstants.tasks.untrustDevCert, 'untrusts and deletes the development certificate if it exists')
            .command('default', 'equivalent to bundle and test')
            .option('entry', {
            describe: 'Select which entries should be bundled. This can match the GUID or the alias of the entry.',
            string: true
        });
        // tslint:enable:max-line-length
    }
    setupSharedConfig() {
        super.setupSharedConfig();
        gulp_core_build_webpack_1.webpack.taskConfig.webpack = require('webpack');
        gulp_core_build_sass_1.default.mergeConfig({
            dropCssFiles: true,
            warnOnNonCSSModules: true
        });
        spBuildCoreTasks.configureWebpack.mergeConfig({
            webpack: gulp_core_build_webpack_1.webpack,
            configureExternalBundlingWebpackTask: spBuildCoreTasks.configureExternalBundlingWebpack
        });
        spBuildCoreTasks.configureExternalBundlingWebpack.mergeConfig({
            webpack: gulp_core_build_webpack_1.webpack,
            configureWebpackTask: spBuildCoreTasks.configureWebpack,
            buildSingleLocale: this.args.locale
        });
        spBuildCoreTasks.writeManifests.mergeConfig({
            buildSingleLocale: this.args.locale
        });
        gulp_core_build_1.copyStaticAssets.setConfig({
            includeExtensions: ConfigureWebpackTask_1.fileLoaderExts
        });
        gulp_core_build_typescript_1.tscCmd.mergeConfig({
            allowBuiltinCompiler: true
        });
        gulp_core_build_typescript_1.tslintCmd.mergeConfig({
            allowBuiltinCompiler: true
        });
        gulp_core_build_typescript_1.apiExtractor.mergeConfig({
            allowBuiltinCompiler: true
        });
        if (this.args.production) {
            spBuildCoreTasks.copyAssets.mergeConfig({
                extsToIgnore: ['.map', '.stats.json', '.stats.html']
            });
        }
    }
    finalizeSharedConfig() {
        super.finalizeSharedConfig();
        if (this.args.lite) {
            this._disableTasks(gulp_core_build_1.jest);
        }
        if (!spBuildCoreTasks.writeManifests.taskConfig.deployCdnPath) {
            spBuildCoreTasks.writeManifests.mergeConfig({
                deployCdnPath: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath
            });
        }
        const serve = spBuildCoreTasks.serve;
        spBuildCoreTasks.writeManifests.mergeConfig({
            debugBasePath: `${serve.taskConfig.https ? 'https' : 'http'}://${serve.taskConfig.hostname}:${serve.taskConfig.port}/`
        });
        if (this.args.production) {
            spBuildCoreTasks.packageSolution.mergeConfig({
                paths: {
                    distributionDir: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath
                }
            });
        }
        // pipe the cdnBasePath into package solution, so that it can warn
        spBuildCoreTasks.packageSolution.cdnBasePath =
            spBuildCoreTasks.writeManifests.taskConfig.cdnBasePath;
    }
    getTasks() {
        const result = super.getTasks();
        result.set(index_1.BuildRigConstants.tasks.build, {
            executable: this.getBuildTask()
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle, {
            executable: this.getBundleTask()
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.devDeploy, {
            executable: spBuildCoreTasks.devDeploy,
            arguments: (yargs) => {
                return yargs
                    .option('rush', {
                    describe: 'use all projects specified in the repo\'s rush.json'
                })
                    .option('batchSize', {
                    describe: 'batch size to upload files to azure in'
                })
                    .option('maxRetries', {
                    describe: 'maximum number of retries on failed azure uploads'
                })
                    .option('retryDelayMs', {
                    describe: 'delay between retrying to upload a file to azure'
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.deployAzureStorage, {
            executable: spBuildCoreTasks.deployAzureStorage
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.packageSolution, {
            executable: spBuildCoreTasks.packageSolution
        });
        // @todo VSO #167343
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.test, {
            executable: this.getTestTask(),
            arguments: (yargs) => {
                return yargs
                    .option('debug', {
                    describe: 'run tests in debug mode'
                })
                    .option('match', {
                    describe: 'regular expression. Only run tests that match',
                    string: true
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.serve, {
            executable: index_1.serial(spBuildCoreTasks.serve, index_1.watch(exports.serveWatchFilter, index_1.serial(this._preTelemetryTask, result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle).executable, gulp_core_build_serve_1.reload, this._postTelemetryTask))),
            arguments: (yargs) => {
                return yargs
                    .option('port', {
                    description: 'the port to serve on should be the next argument (e.g. "--port 80")'
                })
                    .option('nobrowser', {
                    description: 'don\'t open a browser after initial bundle'
                })
                    .option('config', {
                    description: 'use this option to specify which configuration to use in the serve.json file'
                });
            }
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.trustDevCert, {
            executable: gulp_core_build_serve_1.trustDevCert
        });
        result.set(WebBuildRigConstants_1.WebBuildRigConstants.tasks.untrustDevCert, {
            executable: gulp_core_build_serve_1.untrustDevCert
        });
        result.forEach((taskDefinition, name) => {
            result.set(name, {
                executable: index_1.serial(index_1.serial(this._preTelemetryTask), taskDefinition.executable, index_1.serial(this._postTelemetryTask)),
                arguments: taskDefinition.arguments
            });
        });
        result.set(index_1.BuildRigConstants.tasks.default, result.get(WebBuildRigConstants_1.WebBuildRigConstants.tasks.bundle));
        return result;
    }
    getConfigureRigTask() {
        return spBuildCoreTasks.configureRig;
    }
    getTestTask() {
        return index_1.serial(this.getBundleTask(), gulp_core_build_1.jest);
    }
    getCoreBuildTask() {
        return index_1.parallel(index_1.serial(gulp_core_build_sass_1.default, super.getCoreBuildTask()), gulp_core_build_1.copyStaticAssets);
    }
    getBundleTask() {
        return index_1.serial(this.getBuildTask(), spBuildCoreTasks.collectLocalizedResources, this.getPreWebpackTasks(), spBuildCoreTasks.configureWebpack, gulp_core_build_webpack_1.webpack, // First webpack instance to create the base bundle
        spBuildCoreTasks.configureExternalBundlingWebpack, 
        // Second webpack instance to optionally expand the base bundle. This task is disabled if
        //  configureExternalBundlingWebpack isn't configured to do anything
        gulp_core_build_webpack_1.webpack, this.getPreCopyAssetsTasks(), spBuildCoreTasks.copyAssets, this.getPreManifestsTasks(), spBuildCoreTasks.writeManifests, index_1.parallel(this._postBundleTasks));
    }
    getPreWebpackTasks() {
        return index_1.serial();
    }
    getPreCopyAssetsTasks() {
        return index_1.serial();
    }
    getPreManifestsTasks() {
        return index_1.serial();
    }
}
exports.SPWebBuildRig = SPWebBuildRig;
//# sourceMappingURL=SPWebBuildRig.js.map