/**
 * @file uploadFilesToAzure.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Uploads a list of files to an Azure Blob Service instance
 */
import RetryablePromise from './../RetryablePromise';
export interface IUploadableFile {
    /**
     * A container-root-relative path to the file's Azure Storage destination
     *
     * For example, if the account name is "example" the container's name is "files",
     * and this property is "foo/bar/baz.json", the fully-qualified URL of the uploaded
     * file will be:
     * https://example.blob.core.windows.net/files/foo/bar/baz.json
     */
    azurePath: string;
    /**
     * A fully-qualified filesystem path to a file.
     */
    localPath: string;
}
export declare const DEFAULT_BATCH_SIZE: number;
export declare function uploadFileToAzure(blobService: IAzureBlobService, containerName: string, localFilename: string, serverFilename?: string, log?: (str: string) => void): RetryablePromise<IAzureBlobService>;
export declare function uploadFilesToAzure(blobService: IAzureBlobService, containerName: string, files: IUploadableFile[], batchSize: number, log?: (str: string) => void): Promise<IAzureBlobService>;
/**
 * Helper function to run promises in batches
 * @param batchSize - the number of promises to run at a single time
 * @param items - the list of items that are inputs to the createPromise function
 * @param log - a helper function for performing logging
 * @param createPromise - a function which takes an item and returns a promise to do something
 */
export declare function batchPromise<T, K>(batchSize: number, items: Array<T>, log: (str: string) => void, createPromise: (item: T) => PromiseLike<K>): Promise<K[]>;
//# sourceMappingURL=uploadFilesToAzure.d.ts.map