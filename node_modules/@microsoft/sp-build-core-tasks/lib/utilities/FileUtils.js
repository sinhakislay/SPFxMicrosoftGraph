"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gulpUtil = require("gulp-util");
const stream = require("stream");
const crypto = require("crypto");
const through2 = require("through2");
const path = require("path");
function writeStringToFile(content, filename = 'tempfile') {
    return getGulpUtilFileStream(writeStringToGulpUtilFile(content, filename));
}
exports.writeStringToFile = writeStringToFile;
function writeStringToGulpUtilFile(content, filename = 'tempfile') {
    return new gulpUtil.File({
        contents: Buffer.from(content),
        path: filename
    });
}
exports.writeStringToGulpUtilFile = writeStringToGulpUtilFile;
function getGulpUtilFileStream(file) {
    const fileStream = new stream.Readable({ objectMode: true });
    // tslint:disable-next-line:no-any
    fileStream._read = function () {
        this.push(file);
        /* tslint:disable:no-null-keyword */
        this.push(null);
        /* tslint:enable:no-null-keyword */
    };
    return fileStream;
}
exports.getGulpUtilFileStream = getGulpUtilFileStream;
function getShortHash(content) {
    return crypto.createHash('md5').update(content).digest('base64').replace('==', '');
}
exports.getShortHash = getShortHash;
function getFullHash(data) {
    return crypto.createHash('md5').update(data).digest('hex');
}
exports.getFullHash = getFullHash;
/**
 * Function for renaming a stream of file(s).
 * @param gulpStream - Stream of files to be renamed.
 * @param getFilename - Callback for setting the resulting file(s) name.
 * @param filenameCallback - Callback for performing operations with the original and final file name.
 */
function rename(gulpStream, getFilename, filenameCallback) {
    return gulpStream.pipe(through2.obj(_getRenameTransformFunction(getFilename, filenameCallback)));
}
exports.rename = rename;
/**
 * Function for renaming a stream of file(s) with a hash of the file contents.
 * @param gulpStream - Stream of files to be renamed.
 * @param getFilename - Callback for setting the resulting file(s) name.
 * @param filenameCallback - Callback for performing operations with the original and final file name.
 */
function renameWithHash(gulpStream, getFilename, filenameCallback, modifyFileContents) {
    return gulpStream.pipe(through2.obj(_getRenameHashTransformFunction(getFilename, filenameCallback, modifyFileContents)));
}
exports.renameWithHash = renameWithHash;
function _getRenameTransformFunction(getFilename, filenameCallback) {
    return function (file, enc, callback) {
        const originalFilename = file.path;
        const filename = getFilename(file.path);
        file.path = path.join(path.dirname(file.path), filename);
        filenameCallback(filename, originalFilename);
        this.push(file);
        callback();
    };
}
function _getRenameHashTransformFunction(getFilename, filenameCallback, modifyFileContents) {
    return function (file, enc, callback) {
        const checksum = getFullHash(file.contents.toString(enc));
        const originalFilename = file.path;
        const filename = getFilename(checksum, originalFilename);
        file.path = path.join(path.dirname(file.path), filename);
        filenameCallback(filename, originalFilename);
        if (modifyFileContents) {
            this.push(modifyFileContents(checksum, file, enc));
        }
        else {
            this.push(file);
        }
        callback();
    };
}
//# sourceMappingURL=FileUtils.js.map