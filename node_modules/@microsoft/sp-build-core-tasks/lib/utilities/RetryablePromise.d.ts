export default class RetryablePromise<TResult> implements PromiseLike<TResult> {
    private _promiseFn;
    private static _setTimeout;
    private _innerPromise;
    static setTimeoutMock(setTimeout: (cb: () => void, timeout: number) => void): void;
    static allWithRetries<T>(promises: RetryablePromise<T>[], maxRetries: number, retryDelayInMs?: number): Promise<T[]>;
    constructor(_promiseFn: Promise<TResult> | ((resolve: (value?: TResult) => void, reject: (error: Error) => void) => void));
    retry(): RetryablePromise<TResult>;
    then<TResult1, TResult2 = never>(onFulfilled?: (value: TResult) => TResult1 | PromiseLike<TResult1>, onRejected?: (error: Error) => TResult2 | Promise<TResult2>): Promise<TResult1 | TResult2>;
    catch<TReturn = never>(onRejected?: (error: Error) => TReturn | PromiseLike<TReturn>): Promise<TResult | TReturn>;
}
//# sourceMappingURL=RetryablePromise.d.ts.map