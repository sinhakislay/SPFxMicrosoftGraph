"use strict";
/**
 * @file createPackage.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates a client-side app package and writes it to disk
 */
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const normalizeSolutionDefinition_1 = require("./utils/normalizeSolutionDefinition");
const createSolutionXml_1 = require("./xmlGenerators/createSolutionXml");
const readCustomFeatures_1 = require("./utils/readCustomFeatures");
const validateSolutionDefinition_1 = require("./utils/validateSolutionDefinition");
const readResources_1 = require("./utils/readResources");
const writePackage_1 = require("./writePackage");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
/**
 * Creates and writes a package to disk using a package definition and manifest mapping
 */
function createPackage(config, manifests) {
    // @todo instead of using try/catch we should move config validation to a separate function
    try {
        gulp_core_build_1.log(colors.yellow('Verifying configuration...'));
        if (!manifests || !manifests.size) {
            throw new Error('The webparts manifests list is empty. ' +
                'Please ensure you have done a build and that your config file is pointed at the correct folder.');
        }
        if (!config.paths.zippedPackage || config.paths.zippedPackage === '') {
            throw new Error('The package-solution.json config is missing a package name.');
        }
        gulp_core_build_1.log(colors.green('Done!'));
        gulp_core_build_1.log();
        gulp_core_build_1.log(colors.yellow('Normalizing solution information...'));
        normalizeSolutionDefinition_1.default(config, manifests);
        gulp_core_build_1.log(colors.green('Done!'));
        gulp_core_build_1.log();
        gulp_core_build_1.log(colors.yellow('Reading custom Feature XML...'));
        return readCustomFeatures_1.default(config).then((customFeatures) => {
            gulp_core_build_1.log(colors.green('Done!'));
            gulp_core_build_1.log();
            gulp_core_build_1.log(colors.yellow('Validating App Package...'));
            validateSolutionDefinition_1.validateSolutionDefinition(config, customFeatures);
            gulp_core_build_1.log(colors.green('Done!'));
            gulp_core_build_1.log();
            gulp_core_build_1.log(colors.yellow('Reading resources...'));
            return readResources_1.default(config).then((resources) => {
                gulp_core_build_1.log(colors.green('Done!'));
                gulp_core_build_1.log();
                gulp_core_build_1.log(colors.yellow('Reading Sharepoint Assets & Creating XML...'));
                const solutionXml = createSolutionXml_1.default(config.solution, customFeatures.customFeatureFilepath, resources, config.contentTypes);
                gulp_core_build_1.log(colors.green('Done!'));
                gulp_core_build_1.log();
                solutionXml.customFiles = customFeatures.files;
                gulp_core_build_1.log(colors.yellow(`Writing solution XML to ${config.paths.debugDir}...`));
                return writePackage_1.default(solutionXml, config).then(() => {
                    gulp_core_build_1.log(colors.green('Done!'));
                    gulp_core_build_1.log();
                    gulp_core_build_1.log(colors.bold.green('ALL DONE!'));
                    gulp_core_build_1.log();
                }, (error) => {
                    gulp_core_build_1.error(colors.red(error));
                });
            }, (error) => {
                gulp_core_build_1.error(colors.red(error));
            });
        }, (error) => {
            gulp_core_build_1.error(colors.red(error));
        });
    }
    catch (error) {
        gulp_core_build_1.error(colors.red(error));
        if (error.stack) {
            gulp_core_build_1.error(error.stack);
        }
        return Promise.reject(error);
    }
}
exports.default = createPackage;
//# sourceMappingURL=createPackage.js.map