"use strict";
/**
 * @file readSharepointAssets.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Using the configuration, reads a list of Sharepoint assets of one of 3 types
 * (element manifests, element files, and upgrade actions). Returns an object with a list
 * of IFile files to include in the package.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const colors = require("colors");
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
/**
 * Reads a special folder containing SharePoint assets which should automatically be integrated into a feature.
 * You can think of this as a slightly more useful version of readCustomFeatures, which allows for custom features
 * to be created, but is more cumbersome when you want to do something simple like include an upgrade action into
 * the SPPKG.
 */
// tslint:disable-next-line:max-line-length
function readSharepointAssets(assets, featureId) {
    return {
        elementManifests: readAssetFiles(assets.elementManifests, 'Element Manifest', featureId),
        elementFiles: readAssetFiles(assets.elementFiles, 'Element File'),
        upgradeActions: readAssetFiles(assets.upgradeActions, 'Upgrade Action', featureId)
    };
}
exports.readSharepointAssets = readSharepointAssets;
function readAssetFiles(assetFilePaths, assetFileDescription, subdir) {
    return assetFilePaths.map((filepath) => {
        let contents;
        const filename = path.basename(filepath);
        try {
            contents = fs.readFileSync(filepath);
        }
        catch (err) {
            throw new Error(`Could not find ${assetFileDescription}: ${filepath}`);
        }
        gulp_core_build_1.log(colors.cyan(`Found ${assetFileDescription}: ${path.basename(filename)}`));
        return {
            filename: subdir ? path.posix.join(subdir, filename) : filename,
            contents
        };
    });
}
//# sourceMappingURL=readSharepointAssets.js.map