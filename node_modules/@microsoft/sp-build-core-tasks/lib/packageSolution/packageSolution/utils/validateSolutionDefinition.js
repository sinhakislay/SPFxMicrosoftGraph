"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const gulp_core_build_1 = require("@microsoft/gulp-core-build");
/**
 * Checks that a solution definition is valid
 */
function validateSolutionDefinition(options, customFeatures, logWarning = gulp_core_build_1.warn) {
    if (options.solution.skipFeatureDeployment) {
        let hasWarning = false;
        // iterate each feature, counting the customAssets. If there is an Extension, log a warning
        const customAssetFiles = options.solution.features.map((feature) => {
            feature.components.forEach((component) => {
                // HACK: The description is a extensionType - title, but really extensionType should be a first
                // class property
                if (component.manifest.componentType === 'Extension' &&
                    component.description.substring(0, 15) === 'FieldCustomizer') {
                    logWarning(`${component.manifest.alias}: Admins can make this solution available to all sites in the`
                        + ` organization, but field customizers wonâ€™t automatically appear. SharePoint Framework field `
                        + `customizers must be specifically associated to fields programmatically to be visible to site users.`);
                    hasWarning = true;
                }
            });
            return feature.assets.elementFiles.length
                + feature.assets.elementManifests.length
                + feature.assets.upgradeActions.length;
        }).reduce((prev, cur) => { return cur + prev; });
        const hasFeatureXml = !!(customAssetFiles + customFeatures.files.length);
        // if there is feature XML or Custom Assets, we have encountered a serious error
        if (hasFeatureXml) {
            logWarning(`Admins can make this solution available to all sites immediately, but the solution also contains`
                + ` feature.xml elements for provisioning. Feature.xml elements are not automatically applied unless the`
                + ` solution is explicitly installed on a site.`);
            hasWarning = true;
        }
        return !hasWarning;
    }
    return true;
}
exports.validateSolutionDefinition = validateSolutionDefinition;
//# sourceMappingURL=validateSolutionDefinition.js.map