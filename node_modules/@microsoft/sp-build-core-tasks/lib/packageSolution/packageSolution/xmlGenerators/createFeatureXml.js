"use strict";
/**
 * @file createFeatureXml.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates an package's Feature.Xml
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const uuid = require("uuid");
const fsx = require("fs-extra");
const XmlGenerator = require("xml");
const lodash_1 = require("lodash");
const createRelationshipsXml_1 = require("./createRelationshipsXml");
const createComponentXml_1 = require("./createComponentXml");
const readSharepointAssets_1 = require("../utils/readSharepointAssets");
const serializationOptions_1 = require("./serializationOptions");
function createFeatureXml(feature, resources, clientSideAssets, featureXmlFile = `feature_${feature.id}.xml`) {
    feature = lodash_1.merge({
        version: '1.0.0.0'
    }, feature);
    const featureXml = {
        filename: featureXmlFile,
        /* tslint:disable:no-null-keyword */
        relationships: null,
        /* tslint:enable:no-null-keyword */
        contents: Buffer.from(XmlGenerator({
            Feature: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/',
                        Title: feature.title,
                        Description: feature.description,
                        Id: feature.id,
                        Version: feature.version,
                        Scope: 'Web',
                        Hidden: 'FALSE'
                    }
                }
            ]
        }, serializationOptions_1.default))
    };
    const configXml = {
        filename: `${featureXmlFile}.config.xml`,
        contents: Buffer.from(XmlGenerator({
            AppPartConfig: [
                {
                    _attr: {
                        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/partconfiguration'
                    }
                },
                {
                    Id: uuid.v4()
                }
            ]
        }, serializationOptions_1.default))
    };
    const componentsXml = feature.components.map((component) => {
        return createComponentXml_1.default(component, feature.id);
    });
    const clientSideResources = [];
    if (clientSideAssets && clientSideAssets.length) {
        // read each hosted asset
        // iterate through every file that was found and add a relationship
        clientSideAssets.forEach(({ originalFilename, packageFilename }) => {
            // read the file into memory
            const contents = fsx.readFileSync(originalFilename);
            const relativeFilename = path.posix.join('ClientSideAssets', packageFilename);
            const file = {
                contents,
                filename: relativeFilename
            };
            clientSideResources.push(file);
        });
    }
    // tslint:disable-next-line:max-line-length
    const assets = readSharepointAssets_1.readSharepointAssets(feature.assets, feature.id);
    const relationshipsXml = createRelationshipsXml_1.default(featureXmlFile, [
        {
            type: 'partconfiguration',
            target: configXml.filename
        }
    ].concat(componentsXml.map((component) => {
        return {
            type: 'feature-elementmanifest',
            target: component.filename
        };
    })).concat((resources.localizedResourcePaths.length > 0) ?
        resources.localizedResourcePaths.map((filename) => {
            return {
                type: 'content-resource',
                target: filename
            };
        })
        : []).concat((resources.defaultResourcePath)
        ? {
            type: 'content-defaultresource',
            target: resources.defaultResourcePath
        }
        : []).concat(createAssetRelationships(assets))
        .concat(clientSideResources.map((clientSideResource) => {
        return {
            target: clientSideResource.filename,
            type: 'clientsideasset'
        };
    })));
    return {
        filename: featureXml.filename,
        contents: featureXml.contents,
        relationships: relationshipsXml,
        config: configXml,
        components: componentsXml,
        assets,
        clientSideResources
    };
}
exports.default = createFeatureXml;
function createAssetRelationships(assets) {
    let relationships = [];
    if (assets) {
        relationships = relationships.concat(createAssetRelationship('feature-elementfile', assets.elementFiles), createAssetRelationship('feature-elementmanifest', assets.elementManifests), createAssetRelationship('feature-upgradeactions', assets.upgradeActions));
    }
    return relationships;
}
function createAssetRelationship(type, files) {
    return files.map((file) => {
        return {
            type,
            target: file.filename
        };
    });
}
//# sourceMappingURL=createFeatureXml.js.map