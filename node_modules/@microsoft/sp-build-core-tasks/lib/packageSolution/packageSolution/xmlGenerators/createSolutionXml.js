"use strict";
/**
 * @file createSolutionXml.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates an package's Solution.Xml for a ClientSideSolution
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const uuid = require("uuid");
const XmlGenerator = require("xml");
const lodash_1 = require("lodash");
const createRelationshipsXml_1 = require("./createRelationshipsXml");
const createFeatureXml_1 = require("./createFeatureXml");
const createIcon_1 = require("./createIcon");
const constants_1 = require("../config/constants");
const serializationOptions_1 = require("./serializationOptions");
// tslint:disable-next-line:no-any
function createContentTypeXml(extension, mimeType) {
    return {
        Default: [
            {
                _attr: {
                    Extension: extension,
                    ContentType: mimeType
                }
            }
        ]
    };
}
function createSolutionXml(solution, customFeatureFilenames, resources, contentTypes) {
    solution = lodash_1.merge({
        version: '1.0.0.0'
    }, solution);
    // Create the top-level .rels file which points at the AppManifest
    const relationshipsXml = createRelationshipsXml_1.default('', [
        {
            type: 'package-manifest',
            target: constants_1.default.appManifestFileName
        }
    ]);
    // Create the top-level content types, defining content types in this package
    const contentTypesMap = new Map();
    if (contentTypes) {
        Object.keys(contentTypes).forEach((extension) => {
            contentTypesMap.set(extension, contentTypes[extension]);
        });
    }
    const includeClientAssets = solution.includeClientSideAssets ||
        (solution.clientSideAssets !== undefined && solution.clientSideAssets.length > 0);
    if (includeClientAssets) {
        solution.clientSideAssets.forEach((file) => {
            const extension = path.extname(file.originalFilename).substr(1);
            if (!contentTypesMap.has(extension)) {
                contentTypesMap.set(extension, 'application/octet-stream');
            }
        });
    }
    // tslint:disable-next-line:no-any
    const contentTypeInformation = [
        {
            _attr: {
                xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'
            }
        }
    ];
    contentTypesMap.forEach((mimeType, extension) => {
        contentTypeInformation.push(createContentTypeXml(extension, mimeType));
    });
    const contentTypesXml = {
        filename: constants_1.default.contentTypesXmlFilename,
        contents: Buffer.from(XmlGenerator({
            Types: contentTypeInformation
        }, serializationOptions_1.default))
    };
    // Create the top-level AppManifest's XML, note that it is missing relationships
    const manifestXml = {
        filename: constants_1.default.appManifestFileName,
        /* tslint:disable:no-null-keyword */
        relationships: null,
        /* tslint:enable:no-null-keyword */
        contents: Buffer.from(XmlGenerator({
            App: buildAppManifestJson(solution)
        }, serializationOptions_1.default))
    };
    // Collect the XML for the individual features
    const featuresXml = solution.features.map((feature) => createFeatureXml_1.default(feature, resources));
    const clientSideAssetsFeatureFileName = 'ClientSideAssets.xml';
    if (includeClientAssets) {
        // generate a guid
        const guid = uuid.v4();
        const clientSideAssetsFeature = {
            title: 'Client Side Assets',
            description: 'A feature that help deploy client side component assets to SharePoint Online.',
            id: guid,
            version: '1.0.0.0',
            components: [],
            assets: {
                elementFiles: [],
                elementManifests: [],
                upgradeActions: []
            }
        };
        // create a new feature for Assets:
        //    => ClientSideAssets.xml
        //    => ClientSideAssets.xml.config.xml
        const clientSideFeatureXml = createFeatureXml_1.default(clientSideAssetsFeature, {
            localizedResourcePaths: [],
            defaultResourcePath: undefined
        }, solution.clientSideAssets, clientSideAssetsFeatureFileName);
        featuresXml.push(clientSideFeatureXml);
    }
    // Create icon data if a path to an icon is provided
    const icon = solution.iconPath ? createIcon_1.default(solution.iconPath) : undefined;
    // Ensure the Manifest's relationships to features are stored
    let relsList = featuresXml.map((feature) => {
        return {
            type: (feature.filename === clientSideAssetsFeatureFileName)
                ? 'manifest-clientsideasset'
                : 'manifest-feature',
            target: feature.filename
        };
    });
    relsList = relsList.concat(customFeatureFilenames.map((filename) => {
        return {
            type: 'manifest-feature',
            target: filename
        };
    }));
    relsList = relsList.concat(resources.localizedResourcePaths.map((filename) => {
        return {
            type: 'content-resource',
            target: filename
        };
    }));
    if (resources.defaultResourcePath) {
        relsList = relsList.concat({
            type: 'content-defaultresource',
            target: resources.defaultResourcePath
        });
    }
    if (icon) {
        relsList = relsList.concat({
            type: 'manifest-icon',
            target: icon.path
        });
    }
    manifestXml.relationships = createRelationshipsXml_1.default(constants_1.default.appManifestFileName, relsList);
    return {
        manifest: manifestXml,
        features: featuresXml,
        relationships: relationshipsXml,
        contentTypesXml: contentTypesXml,
        icon: icon,
        customFiles: undefined
    };
}
exports.default = createSolutionXml;
function buildAppManifestJson(solution) {
    const appXmlContents = [];
    appXmlContents.push({ _attr: buildAttributesJson(solution) });
    appXmlContents.push({ Properties: buildPropertiesJson(solution) });
    /* tslint:disable-next-line:typedef */
    const webApiPermissionRequests = buildWebApiPermissionRequestsJson(solution);
    if (webApiPermissionRequests) {
        appXmlContents.push({ WebApiPermissionRequests: webApiPermissionRequests });
    }
    return appXmlContents;
}
function buildAttributesJson(solution) {
    const attributes = {
        xmlns: 'http://schemas.microsoft.com/sharepoint/2012/app/manifest',
        Name: solution.name,
        ProductID: solution.id,
        Version: solution.version,
        SharePointMinVersion: '16.0.0.0',
        IsClientSideSolution: 'true'
    };
    if (solution.skipFeatureDeployment) {
        // SkipFeatureDeployment should not be present in the Solution XML unless it is set to true
        // tslint:disable-next-line:no-string-literal
        attributes['SkipFeatureDeployment'] = solution.skipFeatureDeployment;
    }
    if (solution.isDomainIsolated !== undefined) {
        // tslint:disable-next-line:no-string-literal
        attributes['IsDomainIsolated'] = solution.isDomainIsolated;
    }
    return attributes;
}
function buildPropertiesJson(solution) {
    const properties = [];
    // Add title to properties
    properties.push({
        Title: solution.title ? solution.title : solution.name
    });
    properties.push({
        DeveloperProperties: buildDeveloperPropertiesJson(solution.developer)
    });
    // Add supported locales to properties, if needed
    /* tslint:disable:typedef */
    const supportedLocales = solution.supportedLocales && solution.supportedLocales.length > 0
        /* tslint:enable:typedef */
        ? solution.supportedLocales.map((locale) => {
            return {
                SupportedLocale: [
                    {
                        _attr: {
                            CultureName: locale
                        }
                    }
                ]
            };
        })
        : undefined;
    if (supportedLocales) {
        properties.push({
            SupportedLocales: supportedLocales
        });
    }
    return properties;
}
function buildDeveloperPropertiesJson(solutionDevProperties) {
    const devProperties = {
        name: solutionDevProperties.name,
        websiteUrl: solutionDevProperties.websiteUrl,
        privacyUrl: solutionDevProperties.privacyUrl,
        termsOfUseUrl: solutionDevProperties.termsOfUseUrl,
        mpnId: solutionDevProperties.mpnId
    };
    return [JSON.stringify(devProperties)];
}
function buildWebApiPermissionRequestsJson(solution) {
    /* tslint:disable-next-line:typedef */
    const webApiPermissionRequests = solution.webApiPermissionRequests && solution.webApiPermissionRequests.length > 0
        ? solution.webApiPermissionRequests.map((webApiPermissionRequest) => {
            return {
                WebApiPermissionRequest: [
                    {
                        _attr: {
                            ResourceId: webApiPermissionRequest.resource,
                            Scope: webApiPermissionRequest.scope
                        }
                    }
                ]
            };
        }) : undefined;
    return webApiPermissionRequests;
}
//# sourceMappingURL=createSolutionXml.js.map