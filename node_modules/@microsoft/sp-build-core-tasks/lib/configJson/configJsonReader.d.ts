import { IConfigJson as IV1ConfigJson } from './interfaces/config-v1';
import { IConfigJson as ILatestConfigJson } from './interfaces/config-v2';
export declare const defaultConfigPath: string;
export interface IBaseConfigJsonResult {
    /**
     * True if the file is missing.
     */
    missingFile: boolean;
    /**
     * Parse error data.
     */
    readError?: {};
    /**
     * The version of the original config file.
     */
    version?: string;
    /**
     * True if the config file is the latest version.
     */
    isLatestVersion?: boolean;
}
export interface IConfigJsonResult extends IBaseConfigJsonResult {
    /**
     * The data in the config file.
     */
    configData?: ILatestConfigJson;
}
export interface IV1ConfigJsonResult extends IBaseConfigJsonResult {
    /**
     * The data in the config file.
     */
    configData?: IV1ConfigJson;
}
export declare function readConfigFile(// tslint:disable-line:export-name
logVerbose: (message: string) => void, filename?: string): IConfigJsonResult;
export declare function readV1ConfigFile(// tslint:disable-line:export-name
logVerbose: (message: string) => void, filename?: string): IV1ConfigJsonResult;
//# sourceMappingURL=configJsonReader.d.ts.map