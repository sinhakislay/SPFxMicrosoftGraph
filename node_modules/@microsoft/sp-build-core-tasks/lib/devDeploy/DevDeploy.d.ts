import { Terminal } from '@microsoft/node-core-library';
import { ForceSearch } from './../cumulativeManifestProcessor';
export interface IDevDeployMetadata {
    loaderPath: string;
    debugManifestPath: string;
}
export interface IDeployFile {
    localPath: string;
    deployPath: string;
}
export interface IDevDeployOptions {
    /**
     * If false, the current project directory and its dependencies are deployed. If true, we attempt to find a
     *  rush.json file and deploy everything in the repo. Defaults to false.
     */
    useRush?: boolean;
    /**
     * If true, projects will be uploaded into individual directories. This is useful if projects have files that may
     *  have conflicting names. If this is false and a collision is detected, a warning will be printed. Defaults to true.
     */
    isolateProjects?: boolean;
    /**
     * The project root path
     */
    rootPath: string;
    terminal: Terminal;
    ignoreCollisions?: boolean;
    deployPathsFunction: (pathsToUpload: IDeployFile[]) => Promise<void>;
    /**
     * Include these directories alongside the "dist" directory. This is useful for deploying integration tests.
     *
     * @internal
     */
    _additionalDirectoriesToInclude?: string[];
    /**
     * @internal
     */
    _projectDiscoveryMode?: ForceSearch;
}
export declare class DevDeploy {
    private _rushConfig;
    private _options;
    constructor(options: IDevDeployOptions);
    execute(): Promise<IDevDeployMetadata>;
    private _getRushConfig;
    private _processAllPathsInManifest;
    private _disambiguatePath;
    private _getFilesInDirectory;
    /**
     * This function returns a directory name to be used in a directory in the destination, ensuring that the name does
     * not collide with another directory's name. It also ensures that if the specified filesystem path has already
     * been mapped to a destination directory, the same name is used in the destination.
     */
    private _getDestinationDirName;
    private _getManifests;
    private _mergeReferencedProjectLists;
    private _doComponentTypeSpecificFixup;
    private _fixupIconPath;
    private _doesFilenameAppearToContainHash;
}
//# sourceMappingURL=DevDeploy.d.ts.map