import * as Gulp from 'gulp';
import OdspGulpTask from './../OdspGulpTask';
import { IDeployAzureTaskConfigBase } from './../deployAzureStorage/DeployAzureStorageTask';
export interface IDevDeployMetadata {
    loaderUrl: string;
    debugManifestUrl: string;
    deployUrl: string;
}
export interface IDevDeployTaskConfig extends IDeployAzureTaskConfigBase {
    /**
     * If set to true, fail if the containerDirectoryName is unset or empty.
     */
    requireContainerDirectoryName?: boolean;
    /**
     * The directory in the Azure container to use. Recommended to be set to something that includes your user name
     *  to ensure you don't clobber others' work.
     */
    containerDirectoryName?: string;
    /**
     * If false, the current project directory and its dependencies are deployed. If true, we attempt to find a
     *  rush.json file and deploy everything in the repo. Defaults to false.
     */
    useRush?: boolean;
    /**
     * Batch size to use when uploading files. Defaults to DEFAULT_BATCH_SZIE.
     */
    batchSize?: number;
    /**
     * Max retries when uploading a file to Azure. Defaults to MAX_UPLOAD_RETRIES.
     */
    maxRetries?: number;
    /**
     * Delay between retries when uploading files to Azure. Defaults to RETRY_DELAY_MS.
     */
    retryDelayMs?: number;
    /**
     * If true, projects will be uploaded into individual directories. This is useful if projects have files that may
     *  have conflicting names. If this is false and a collision is detected, a warning will be printed. Defaults to true.
     */
    isolateProjects?: boolean;
    /**
     * Include these directories alongside the "dist" directory. This is useful for deploying integration tests.
     *
     * @internal
     */
    _additionalDirectoriesToInclude?: string[];
}
export declare class DevDeployTask extends OdspGulpTask<IDevDeployTaskConfig> {
    private _rushConfig;
    private _devDeployMetadata;
    constructor();
    executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): Promise<{}>;
    getDeployBaseUrl(): string;
    getExistingDeployMetadata(): IDevDeployMetadata | undefined;
    private _getMetadataDropPath;
    private _getContainerUrl;
    private _getContainerSubfolderName;
    private _getRushConfig;
}
//# sourceMappingURL=DevDeployTask.d.ts.map