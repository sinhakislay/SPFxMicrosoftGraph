"use strict";
/**
 * @file deployToAzure.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Uploads source files to an Azure Blob Storage instance
 */
Object.defineProperty(exports, "__esModule", { value: true });
const glob = require("glob");
const colors = require("colors");
const ensureBlobService_1 = require("./../../utilities/azureStorage/ensureBlobService");
const ensureContainer_1 = require("./../../utilities/azureStorage/ensureContainer");
const uploadFilesToAzure_1 = require("./../../utilities/azureStorage/uploadFilesToAzure");
const url_1 = require("./../../utilities/url");
/**
 * Uses glob to expand the file path glob into a list of resolved file paths
 */
function loadSourceFiles(globs, cwd) {
    return new Promise((resolve, reject) => {
        const options = cwd ? { cwd: cwd } : {};
        glob(globs, options, (err, matches) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(matches || []);
            }
        });
    });
}
/**
 * Deploys all the files in a certain directory to a specific Azure Blob Storage instance
 */
function deployToAzure(config, log = console.log, 
/* tslint:disable-next-line:no-any */
logError = console.error) {
    if (!config.container) {
        return new Promise((complete, reject) => {
            reject(new Error('Config file missing container name!'));
        });
    }
    if (!config.account) {
        return new Promise((complete, reject) => {
            reject(new Error('Config file missing Azure account name!'));
        });
    }
    if (!config.accessKey) {
        return new Promise((complete, reject) => {
            reject(new Error('Config file missing Azure access key!'));
        });
    }
    log(`Uploading files '${config.uploadPath}' from directory '${config.workingDir}' to Azure`);
    return loadSourceFiles(config.uploadPath, config.workingDir)
        .then((files) => {
        return ensureBlobService_1.default(config.account, config.accessKey)
            .then((blobService) => ensureContainer_1.default(blobService, config.container, undefined, log))
            .then((blobService) => {
            const filesToUpload = files.map((filename) => {
                return {
                    azurePath: filename,
                    localPath: config.workingDir + filename
                };
            });
            return uploadFilesToAzure_1.uploadFilesToAzure(blobService, config.container, filesToUpload, uploadFilesToAzure_1.DEFAULT_BATCH_SIZE, log);
        })
            .then(() => {
            log(colors.green('Upload complete!\n'));
            log(`Access your files at: ${getAzureStorageUrl(config.account, config.container)}\n`);
        }, (error) => {
            logError(error);
            if (error.stack) {
                logError(error.stack);
            }
        });
    });
}
exports.default = deployToAzure;
function getAzureStorageUrl(accountName, containerName) {
    return url_1.joinUrlSegments(`https://${accountName}.blob.core.windows.net`, containerName || '');
}
exports.getAzureStorageUrl = getAzureStorageUrl;
//# sourceMappingURL=deployToAzure.js.map