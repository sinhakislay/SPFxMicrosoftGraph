{"version":3,"file":"TslintRunner.js","sourceRoot":"","sources":["../../src/shared/TslintRunner.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAI7B,2CAAwC;AACxC,2CAAwC;AACxC,mEAIiC;AAYjC;;GAEG;AACH,MAAa,YAAa,SAAQ,6CAA0C;IAG1E,YAAY,WAAgC,EAAE,QAAgB,EAAE,gBAAmC;QACjG,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,CAC7B,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,SAAS,EACd;YACE,WAAW,EAAE,qBAAS,CAAC,iBAAiB;YACxC,WAAW,EAAE,qBAAS,CAAC,iBAAiB;YACxC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC;SAC3C,CACF,CAAC;IACJ,CAAC;IAEM,MAAM;QACX,MAAM,IAAI,GAAa;YACrB,UAAU,EAAE,MAAM;YAClB,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,iBAAiB;SAC1D,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YAC5B,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;gBACvB,MAAM,OAAO,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC/C,MAAM,gBAAgB,GAA2B,IAAI,CAAC,YAAY,CAAC,cAAc;oBAC/E,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS;oBAC7B,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;gBAElC,qCAAqC;gBACrC,IAAI;oBACF,MAAM,MAAM,GAA8B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBAC9D,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;wBAC1B,MAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;wBACrG,gBAAgB,CACd,YAAY,EACZ,KAAK,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,EAC5B,KAAK,CAAC,aAAa,CAAC,SAAS,GAAG,CAAC,EACjC,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,OAAO,CACd,CAAC;qBACH;iBACF;gBAAC,OAAO,CAAC,EAAE;oBACV,iGAAiG;oBACjG,+FAA+F;oBAC/F,uBAAuB;oBACvB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBACxC;YACH,CAAC;YACD,OAAO,EAAE,CAAC,IAAY,EAAE,SAAkB,EAAE,OAAmB,EAAE,MAA8B,EAAE,EAAE;gBACjG,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,SAAS,CAAC,EAAE;oBACjE,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC/C;qBAAM;oBACL,OAAO,EAAE,CAAC;iBACX;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AA3DD,oCA2DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { ITerminalProvider } from '@microsoft/node-core-library';\r\nimport * as TSLint from 'tslint';\r\n\r\nimport { CmdRunner } from './CmdRunner';\r\nimport { ToolPaths } from './ToolPaths';\r\nimport {\r\n  RushStackCompilerBase,\r\n  IRushStackCompilerBaseOptions,\r\n  WriteFileIssueFunction\r\n} from './RushStackCompilerBase';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITslintRunnerConfig extends IRushStackCompilerBaseOptions {\r\n  /**\r\n   * If true, displays warnings as errors. Defaults to false.\r\n   */\r\n  displayAsError?: boolean;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class TslintRunner extends RushStackCompilerBase<ITslintRunnerConfig> {\r\n  private _cmdRunner: CmdRunner;\r\n\r\n  constructor(taskOptions: ITslintRunnerConfig, rootPath: string, terminalProvider: ITerminalProvider) {\r\n    super(taskOptions, rootPath, terminalProvider);\r\n    this._cmdRunner = new CmdRunner(\r\n      this._standardBuildFolders,\r\n      this._terminal,\r\n      {\r\n        packagePath: ToolPaths.tslintPackagePath,\r\n        packageJson: ToolPaths.tslintPackageJson,\r\n        packageBinPath: path.join('bin', 'tslint')\r\n      }\r\n    );\r\n  }\r\n\r\n  public invoke(): Promise<void> {\r\n    const args: string[] = [\r\n      '--format', 'json',\r\n      '--project', this._standardBuildFolders.projectFolderPath\r\n    ];\r\n\r\n    return this._cmdRunner.runCmd({\r\n      args: args,\r\n      onData: (data: Buffer) => {\r\n        const dataStr: string = data.toString().trim();\r\n        const tslintErrorLogFn: WriteFileIssueFunction = this._taskOptions.displayAsError\r\n          ? this._taskOptions.fileError\r\n          : this._taskOptions.fileWarning;\r\n\r\n        // TSLint errors are logged to stdout\r\n        try {\r\n          const errors: TSLint.IRuleFailureJson[] = JSON.parse(dataStr);\r\n          for (const error of errors) {\r\n            const pathFromRoot: string = path.relative(this._standardBuildFolders.projectFolderPath, error.name);\r\n            tslintErrorLogFn(\r\n              pathFromRoot,\r\n              error.startPosition.line + 1,\r\n              error.startPosition.character + 1,\r\n              error.ruleName,\r\n              error.failure\r\n            );\r\n          }\r\n        } catch (e) {\r\n          // If we fail to parse the JSON, it's likely TSLint encountered an error parsing the config file,\r\n          // or it experienced an inner error. In this case, log the output as an error regardless of the\r\n          // displayAsError value\r\n          this._terminal.writeErrorLine(dataStr);\r\n        }\r\n      },\r\n      onClose: (code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void) => {\r\n        if (this._taskOptions.displayAsError && (code !== 0 || hasErrors)) {\r\n          reject(new Error(`exited with code ${code}`));\r\n        } else {\r\n          resolve();\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}