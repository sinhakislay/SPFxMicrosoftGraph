{"version":3,"file":"CmdRunner.js","sourceRoot":"","sources":["../../src/shared/CmdRunner.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as childProcess from 'child_process';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  IPackageJson,\r\n  FileSystem,\r\n  Terminal\r\n} from '@microsoft/node-core-library';\r\nimport { StandardBuildFolders } from './StandardBuildFolders';\r\n\r\n/**\r\n * Options for a CmdTask.\r\n * @beta\r\n */\r\nexport interface IBaseTaskOptions {\r\n  /**\r\n   * The name of the package to resolve.\r\n   */\r\n  packagePath: string;\r\n\r\n  /**\r\n   *\r\n   */\r\n  packageJson: IPackageJson;\r\n\r\n  /**\r\n   * The path to the binary to invoke inside the package.\r\n   */\r\n  packageBinPath: string;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IRunCmdOptions {\r\n  args: string[];\r\n  onData?: (data: Buffer) => void;\r\n  onError?: (data: Buffer) => void;\r\n  onClose?: (code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void) => void;\r\n}\r\n\r\n/**\r\n * This base task provides support for finding and then executing a binary in a node package.\r\n *\r\n * @beta\r\n */\r\nexport class CmdRunner {\r\n  private static readonly _nodePath: string = process.execPath;\r\n\r\n  private _standardBuildFolders: StandardBuildFolders;\r\n  private _terminal: Terminal;\r\n  private _options: IBaseTaskOptions;\r\n  private _errorHasBeenLogged: boolean;\r\n\r\n  constructor(\r\n    constants: StandardBuildFolders,\r\n    terminal: Terminal,\r\n    options: IBaseTaskOptions\r\n  ) {\r\n    this._standardBuildFolders = constants;\r\n    this._terminal = terminal;\r\n    this._options = options;\r\n  }\r\n\r\n  public runCmd(options: IRunCmdOptions): Promise<void> {\r\n    const {\r\n      args,\r\n      onData = this._onData.bind(this),\r\n      onError = this._onError.bind(this),\r\n      onClose = this._onClose.bind(this)\r\n    }: IRunCmdOptions = options;\r\n\r\n    const packageJson: IPackageJson | undefined = this._options.packageJson;\r\n\r\n    if (!packageJson) {\r\n      return Promise.reject(new Error(`Unable to find the package.json file for ${this._options}.`));\r\n    }\r\n\r\n    // Print the version\r\n    this._terminal.writeLine(`${packageJson.name} version: ${packageJson.version}`);\r\n\r\n    const binaryPath: string = path.resolve(this._options.packagePath, this._options.packageBinPath);\r\n    if (!FileSystem.exists(binaryPath)) {\r\n      return Promise.reject(new Error(\r\n        `The binary is missing. This indicates that ${this._options} is not ` +\r\n        'installed correctly.'\r\n      ));\r\n    }\r\n\r\n    return new Promise((resolve: () => void, reject: (error: Error) => void) => {\r\n      const nodePath: string | undefined = CmdRunner._nodePath;\r\n      if (!nodePath) {\r\n        reject(new Error('Unable to find node executable'));\r\n        return;\r\n      }\r\n\r\n      // Invoke the tool and watch for log messages\r\n      const spawnResult: childProcess.ChildProcess = childProcess.spawn(\r\n        nodePath,\r\n        [binaryPath, ...args],\r\n        {\r\n          cwd: this._standardBuildFolders.projectFolderPath,\r\n          env: process.env,\r\n          stdio: 'pipe'\r\n        }\r\n      );\r\n\r\n      if (spawnResult.stdout !== null) {\r\n        spawnResult.stdout.on('data', onData);\r\n      }\r\n      if (spawnResult.stderr !== null) {\r\n        spawnResult.stderr.on('data', (data: Buffer) => {\r\n          this._errorHasBeenLogged = true;\r\n          onError(data);\r\n        });\r\n      }\r\n      spawnResult.on('close', (code) => onClose(code, this._errorHasBeenLogged, resolve, reject));\r\n    });\r\n  }\r\n\r\n  protected _onData(data: Buffer): void {\r\n    this._terminal.writeLine(data.toString().trim());\r\n  }\r\n\r\n  protected _onError(data: Buffer): void {\r\n    this._terminal.writeError(data.toString().trim());\r\n  }\r\n\r\n  protected _onClose(code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void): void {\r\n    if (code !== 0 || hasErrors) {\r\n      reject(new Error(`exited with code ${code}`));\r\n    } else {\r\n      resolve();\r\n    }\r\n  }\r\n}\r\n"]}