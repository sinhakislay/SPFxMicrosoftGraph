{"version":3,"file":"TypescriptCompiler.js","sourceRoot":"","sources":["../../src/shared/TypescriptCompiler.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAG7B,2CAAwC;AACxC,2CAAwC;AACxC,mEAGiC;AACjC,yDAAsD;AAYtD;;GAEG;AACH,MAAa,kBAAmB,SAAQ,6CAAiD;IAIvF,YACE,IAAyC,EACzC,IAAgC,EAChC,IAAwB;QAExB,IAAI,WAAW,GAA2C,SAAS,CAAC;QACpE,IAAI,QAAgB,CAAC;QACrB,IAAI,gBAAmC,CAAC;QACxC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,QAAQ,GAAG,IAAI,CAAC;YAChB,gBAAgB,GAAG,IAAyB,CAAC;SAC9C;aAAM;YACL,WAAW,GAAG,IAAkC,CAAC;YACjD,QAAQ,GAAG,IAAc,CAAC;YAC1B,gBAAgB,GAAG,IAAyB,CAAC;SAC9C;QAED,MAAM,gBAAgB,GAAqB,IAAI,mCAAgB,CAAC,gBAAgB,CAAC,CAAC;QAClF,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE;gBAC1B,WAAW,CAAC,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC;aACpD;YAED,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;gBAC5B,WAAW,CAAC,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC;aACxD;SACF;aAAM;YACL,WAAW,GAAG,gBAAgB,CAAC,sCAAsC,EAAE,CAAC;SACzE;QAED,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,CAC7B,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,SAAS,EACd;YACE,WAAW,EAAE,qBAAS,CAAC,qBAAqB;YAC5C,WAAW,EAAE,qBAAS,CAAC,qBAAqB;YAC5C,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;SACxC,CACF,CAAC;IACJ,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YAC5B,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI,EAAE;YACxC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;gBACvB,uBAAuB;gBACvB,MAAM,SAAS,GAA2B,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACtE,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAChC,MAAM,WAAW,GAAW,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;oBACpD,IAAI,CAAC,CAAC,WAAW,EAAE;wBACjB,IAAI,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;4BACnC,sDAAsD;4BACtD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;yBAC5C;6BAAM;4BACL,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;yBACvC;qBACF;iBACF;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAlED,gDAkEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { ITerminalProvider } from '@microsoft/node-core-library';\r\n\r\nimport { CmdRunner } from './CmdRunner';\r\nimport { ToolPaths } from './ToolPaths';\r\nimport {\r\n  RushStackCompilerBase,\r\n  IRushStackCompilerBaseOptions\r\n} from './RushStackCompilerBase';\r\nimport { LoggingUtilities } from './LoggingUtilities';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface ITypescriptCompilerOptions extends IRushStackCompilerBaseOptions {\r\n  /**\r\n   * Option to pass custom arguments to the tsc command.\r\n   */\r\n  customArgs?: string[];\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class TypescriptCompiler extends RushStackCompilerBase<ITypescriptCompilerOptions> {\r\n  private _cmdRunner: CmdRunner;\r\n  constructor(rootPath: string, terminalProvider: ITerminalProvider) // Remove in the next major version\r\n  constructor(taskOptions: ITypescriptCompilerOptions, rootPath: string, terminalProvider: ITerminalProvider)\r\n  constructor(\r\n    arg1: ITypescriptCompilerOptions | string,\r\n    arg2: string | ITerminalProvider,\r\n    arg3?: ITerminalProvider\r\n  ) {\r\n    let taskOptions: ITypescriptCompilerOptions | undefined = undefined;\r\n    let rootPath: string;\r\n    let terminalProvider: ITerminalProvider;\r\n    if (typeof arg1 === 'string') {\r\n      rootPath = arg1;\r\n      terminalProvider = arg2 as ITerminalProvider;\r\n    } else {\r\n      taskOptions = arg1 as ITypescriptCompilerOptions;\r\n      rootPath = arg2 as string;\r\n      terminalProvider = arg3 as ITerminalProvider;\r\n    }\r\n\r\n    const loggingUtilities: LoggingUtilities = new LoggingUtilities(terminalProvider);\r\n    if (taskOptions) {\r\n      if (!taskOptions.fileError) {\r\n        taskOptions.fileError = loggingUtilities.fileError;\r\n      }\r\n\r\n      if (!taskOptions.fileWarning) {\r\n        taskOptions.fileWarning = loggingUtilities.fileWarning;\r\n      }\r\n    } else {\r\n      taskOptions = loggingUtilities.getDefaultRushStackCompilerBaseOptions();\r\n    }\r\n\r\n    super(taskOptions, rootPath, terminalProvider);\r\n    this._cmdRunner = new CmdRunner(\r\n      this._standardBuildFolders,\r\n      this._terminal,\r\n      {\r\n        packagePath: ToolPaths.typescriptPackagePath,\r\n        packageJson: ToolPaths.typescriptPackageJson,\r\n        packageBinPath: path.join('bin', 'tsc')\r\n      }\r\n    );\r\n  }\r\n\r\n  public invoke(): Promise<void> {\r\n    return this._cmdRunner.runCmd({\r\n      args: this._taskOptions.customArgs || [],\r\n      onData: (data: Buffer) => {\r\n        // Log lines separately\r\n        const dataLines: (string | undefined)[] = data.toString().split('\\n');\r\n        for (const dataLine of dataLines) {\r\n          const trimmedLine: string = (dataLine || '').trim();\r\n          if (!!trimmedLine) {\r\n            if (trimmedLine.match(/\\serror\\s/i)) {\r\n              // If the line looks like an error, log it as an error\r\n              this._terminal.writeErrorLine(trimmedLine);\r\n            } else {\r\n              this._terminal.writeLine(trimmedLine);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}