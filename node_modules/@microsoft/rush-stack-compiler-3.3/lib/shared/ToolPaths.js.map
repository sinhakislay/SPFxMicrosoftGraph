{"version":3,"file":"ToolPaths.js","sourceRoot":"","sources":["../../src/shared/ToolPaths.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,oEAAyF;AACzF,6BAA6B;AAE7B;;GAEG;AACH,MAAa,SAAS;IAIb,MAAM,KAAK,qBAAqB;QACrC,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE;YACrC,SAAS,CAAC,sBAAsB,GAAG,SAAS,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAE3E,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE;gBACrC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;aACzD;SACF;QAED,OAAO,SAAS,CAAC,sBAAsB,CAAC;IAC1C,CAAC;IAEM,MAAM,KAAK,qBAAqB;QACrC,OAAO,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE,cAAc,CAAC,CAAC,CAAC;IACnF,CAAC;IAEM,MAAM,KAAK,iBAAiB;QACjC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;YACjC,SAAS,CAAC,kBAAkB,GAAG,SAAS,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEnE,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;SACF;QAED,OAAO,SAAS,CAAC,kBAAkB,CAAC;IACtC,CAAC;IAEM,MAAM,KAAK,iBAAiB;QACjC,OAAO,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEO,MAAM,CAAC,eAAe,CAAC,WAAmB;QAChD,MAAM,eAAe,GAAuB,SAAS,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACvF,OAAO,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACrE,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,WAAmB;QACpD,MAAM,MAAM,GAAsB,IAAI,qCAAiB,EAAE,CAAC;QAC1D,MAAM,aAAa,GAAW,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC,4BAA4B,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAC;CACF;AA9CD,8BA8CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { PackageJsonLookup, IPackageJson, JsonFile } from '@microsoft/node-core-library';\r\nimport * as path from 'path';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class ToolPaths {\r\n  private static _typescriptPackagePath: string | undefined;\r\n  private static _tslintPackagePath: string | undefined;\r\n\r\n  public static get typescriptPackagePath(): string {\r\n    if (!ToolPaths._typescriptPackagePath) {\r\n      ToolPaths._typescriptPackagePath = ToolPaths._getPackagePath('typescript');\r\n\r\n      if (!ToolPaths._typescriptPackagePath) {\r\n        throw new Error('Unable to find \"typescript\" package.');\r\n      }\r\n    }\r\n\r\n    return ToolPaths._typescriptPackagePath;\r\n  }\r\n\r\n  public static get typescriptPackageJson(): IPackageJson {\r\n    return JsonFile.load(path.join(ToolPaths.typescriptPackagePath, 'package.json'));\r\n  }\r\n\r\n  public static get tslintPackagePath(): string {\r\n    if (!ToolPaths._tslintPackagePath) {\r\n      ToolPaths._tslintPackagePath = ToolPaths._getPackagePath('tslint');\r\n\r\n      if (!ToolPaths._tslintPackagePath) {\r\n        throw new Error('Unable to find \"tslint\" package.');\r\n      }\r\n    }\r\n\r\n    return ToolPaths._tslintPackagePath;\r\n  }\r\n\r\n  public static get tslintPackageJson(): IPackageJson {\r\n    return JsonFile.load(path.join(ToolPaths.tslintPackagePath, 'package.json'));\r\n  }\r\n\r\n  private static _getPackagePath(packageName: string): string | undefined {\r\n    const packageJsonPath: string | undefined = ToolPaths._getPackageJsonPath(packageName);\r\n    return packageJsonPath ? path.dirname(packageJsonPath) : undefined;\r\n  }\r\n\r\n  private static _getPackageJsonPath(packageName: string): string | undefined {\r\n    const lookup: PackageJsonLookup = new PackageJsonLookup();\r\n    const mainEntryPath: string = require.resolve(packageName);\r\n    return lookup.tryGetPackageJsonFilePathFor(mainEntryPath);\r\n  }\r\n}\r\n"]}