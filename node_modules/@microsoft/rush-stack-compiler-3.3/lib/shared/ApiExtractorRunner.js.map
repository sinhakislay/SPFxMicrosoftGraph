{"version":3,"file":"ApiExtractorRunner.js","sourceRoot":"","sources":["../../src/shared/ApiExtractorRunner.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider } from '@microsoft/node-core-library';\r\nimport {\r\n  Extractor,\r\n  ExtractorConfig,\r\n  IExtractorInvokeOptions\r\n} from '@microsoft/api-extractor';\r\nimport * as ApiExtractor from '@microsoft/api-extractor';\r\n\r\nimport {\r\n  RushStackCompilerBase,\r\n  IRushStackCompilerBaseOptions\r\n} from './RushStackCompilerBase';\r\nimport { ToolPaths } from './ToolPaths';\r\nimport { LoggingUtilities } from './LoggingUtilities';\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @beta\r\n */\r\nexport class ApiExtractorRunner extends RushStackCompilerBase {\r\n  public static apiExtractor: typeof ApiExtractor = ApiExtractor;\r\n  private _extractorConfig: ExtractorConfig;\r\n  private _extractorOptions: IExtractorInvokeOptions;\r\n\r\n  constructor(\r\n    extractorConfig: ExtractorConfig,\r\n    extractorOptions: IExtractorInvokeOptions,\r\n    rootPath: string,\r\n    terminalProvider: ITerminalProvider\r\n  ) // Remove in the next major version\r\n  constructor(\r\n    options: IRushStackCompilerBaseOptions,\r\n    extractorConfig: ExtractorConfig,\r\n    extractorOptions: IExtractorInvokeOptions,\r\n    rootPath: string,\r\n    terminalProvider: ITerminalProvider\r\n  )\r\n  constructor(\r\n    arg1: IRushStackCompilerBaseOptions| ExtractorConfig,\r\n    arg2: ExtractorConfig| IExtractorInvokeOptions,\r\n    arg3: IExtractorInvokeOptions| string,\r\n    arg4: string | ITerminalProvider,\r\n    arg5?: ITerminalProvider\r\n  ) {\r\n    let options: IRushStackCompilerBaseOptions;\r\n    let extractorConfig: ExtractorConfig;\r\n    let extractorOptions: IExtractorInvokeOptions;\r\n    let rootPath: string;\r\n    let terminalProvider: ITerminalProvider;\r\n    if (arg1 instanceof ExtractorConfig) {\r\n      extractorConfig = arg1;\r\n      extractorOptions = arg2 as IExtractorInvokeOptions;\r\n      rootPath = arg3 as string;\r\n      terminalProvider = arg4 as ITerminalProvider;\r\n      const loggingUtilities: LoggingUtilities = new LoggingUtilities(terminalProvider);\r\n      options = loggingUtilities.getDefaultRushStackCompilerBaseOptions();\r\n    } else {\r\n      options = arg1;\r\n      extractorConfig = arg2 as ExtractorConfig;\r\n      extractorOptions = arg3 as IExtractorInvokeOptions;\r\n      rootPath = arg4 as string;\r\n      terminalProvider = arg5 as ITerminalProvider;\r\n    }\r\n\r\n    super(options, rootPath, terminalProvider);\r\n\r\n    this._extractorConfig = extractorConfig;\r\n    this._extractorOptions = extractorOptions;\r\n  }\r\n\r\n  public invoke(): Promise<void> {\r\n    try {\r\n      const extractorOptions: IExtractorInvokeOptions = {\r\n        ...this._extractorOptions,\r\n        messageCallback: (message: ApiExtractor.ExtractorMessage) => {\r\n          switch (message.logLevel) {\r\n            case ApiExtractor.ExtractorLogLevel.Error: {\r\n              if (message.sourceFilePath) {\r\n                this._fileError(\r\n                  message.sourceFilePath,\r\n                  message.sourceFileLine!,\r\n                  message.sourceFileColumn!,\r\n                  message.category,\r\n                  message.text\r\n                );\r\n              } else {\r\n                this._terminal.writeErrorLine(message.text);\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n            case ApiExtractor.ExtractorLogLevel.Warning: {\r\n              if (message.sourceFilePath) {\r\n                this._fileWarning(\r\n                  message.sourceFilePath,\r\n                  message.sourceFileLine!,\r\n                  message.sourceFileColumn!,\r\n                  message.category,\r\n                  message.text\r\n                );\r\n              } else {\r\n                this._terminal.writeWarningLine(message.text);\r\n              }\r\n              break;\r\n            }\r\n\r\n            case ApiExtractor.ExtractorLogLevel.Info: {\r\n              this._terminal.writeLine(message.text);\r\n              break;\r\n            }\r\n\r\n            case ApiExtractor.ExtractorLogLevel.Verbose: {\r\n              this._terminal.writeVerboseLine(message.text);\r\n              break;\r\n            }\r\n\r\n            default: {\r\n              return;\r\n            }\r\n          }\r\n          message.handled = true;\r\n        },\r\n        typescriptCompilerFolder: ToolPaths.typescriptPackagePath\r\n      };\r\n\r\n      // NOTE: ExtractorResult.succeeded indicates whether errors or warnings occurred, however we\r\n      // already handle this above via our customLogger\r\n      Extractor.invoke(this._extractorConfig, extractorOptions);\r\n\r\n      return Promise.resolve();\r\n    } catch (e) {\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n}\r\n"]}