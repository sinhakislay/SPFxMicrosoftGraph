import * as tslib_1 from "tslib";
import HttpClient from '../httpClient/HttpClient';
import HttpClientConfiguration from '../httpClient/HttpClientConfiguration';
/**
 * Configuration for HttpClient.
 *
 * @remarks
 * The HttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the HttpClient class.  Normally these switches are set
 * (e.g. when calling HttpClient.fetch()) by providing one of the predefined defaults
 * from HttpClientConfigurations, however switches can also be changed via the
 * HttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
var AadHttpClientConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(AadHttpClientConfiguration, _super);
    /**
     * Constructs a new instance of HttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    function AadHttpClientConfiguration(flags, overrideFlags) {
        return _super.call(this, flags, overrideFlags) || this;
    }
    /**
     * @override
     */
    AadHttpClientConfiguration.prototype.overrideWith = function (sourceFlags) {
        return new AadHttpClientConfiguration(this.flags, sourceFlags);
    };
    return AadHttpClientConfiguration;
}(HttpClientConfiguration));
export default AadHttpClientConfiguration;
export var predefinedConfigurations = {
    v1: new AadHttpClientConfiguration(HttpClient.configurations.v1)
};
//# sourceMappingURL=AadHttpClientConfiguration.js.map