import { ICacheDataProvider } from './ICacheDataProvider';
import { IClientCachableResponse } from './IClientCachableResponse';
import { IRequestCacheOptions } from './IRequestCacheOptions';
/**
 * Cache Manager for http Requests
 *
 * @internal
 */
export declare class CacheManager {
    /**
     * Fetches latest data from server or cache. Updates the cache from server if needed.
     * @param cacheKey - The cache Key
     * @param cacheProvider - The cache Provider
     * @param cacheStrategy - The Cache Strategy
     * @param serverFetch - The server fetch call
     * @param serverFetchArgs - The arguments to be used on the server fetch call
     */
    static fetchAndCache<T, P extends Response>(cacheKey: any, /* tslint:disable-line:no-any */ cacheProvider: ICacheDataProvider<T>, cacheConfiguration: IRequestCacheOptions, serverFetch: () => Promise<P>): Promise<T | P | IClientCachableResponse<T, P>>;
    private static _applyCacheStrategy;
    private static _updateCache;
}
//# sourceMappingURL=CacheManager.d.ts.map