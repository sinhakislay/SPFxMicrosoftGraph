import * as tslib_1 from "tslib";
import HttpClientConfiguration from '../httpClient/HttpClientConfiguration';
/**
 * Common base class for SPHttpClientConfiguration and SPHttpClientBatchConfiguration.
 *
 * @public
 */
var SPHttpClientCommonConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(SPHttpClientCommonConfiguration, _super);
    /**
     * Constructs a new instance of SPHttpClientCommonConfiguration with the specified flags.
     *
     * @remarks
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    function SPHttpClientCommonConfiguration(flags, overrideFlags) {
        return _super.call(this, flags, overrideFlags) || this;
    }
    /**
     * @override
     */
    SPHttpClientCommonConfiguration.prototype.overrideWith = function (sourceFlags) {
        return new SPHttpClientCommonConfiguration(this.flags, sourceFlags);
    };
    Object.defineProperty(SPHttpClientCommonConfiguration.prototype, "jsonRequest", {
        /**
         * {@inheritDoc ISPHttpClientCommonConfiguration.jsonRequest}
         */
        get: function () {
            return this.flags.jsonRequest;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPHttpClientCommonConfiguration.prototype, "jsonResponse", {
        /**
         * {@inheritDoc ISPHttpClientCommonConfiguration.jsonResponse}
         */
        get: function () {
            return this.flags.jsonResponse;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @override
     */
    SPHttpClientCommonConfiguration.prototype.initializeFlags = function () {
        _super.prototype.initializeFlags.call(this);
        this.flags.jsonRequest = false;
        this.flags.jsonResponse = false;
    };
    return SPHttpClientCommonConfiguration;
}(HttpClientConfiguration));
export default SPHttpClientCommonConfiguration;
//# sourceMappingURL=SPHttpClientCommonConfiguration.js.map