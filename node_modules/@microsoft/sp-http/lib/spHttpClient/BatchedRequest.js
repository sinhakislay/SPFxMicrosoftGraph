/**
 * This is a private helper class used by SPHttpClientBatch to track the state of each
 * queued REST request.
 */
var BatchedRequest = /** @class */ (function () {
    function BatchedRequest(request) {
        var _this = this;
        /**
         * The response.  This is tracked for diagnostic purposes only.
         */
        this.response = undefined;
        this.request = request;
        // Create the promise for this request.
        this.promise = new Promise(
        // tslint:disable-next-line:no-any
        function (resolve, reject) {
            _this._resolveCallback = resolve;
            _this._rejectCallback = reject;
        });
    }
    /**
     * This resolves the BatchedRequest.promise with the provided response.
     */
    BatchedRequest.prototype.resolvePromise = function (response) {
        if (!this._resolveCallback) {
            // This should never happen
            throw new Error('The promise was already settled');
        }
        this.response = response;
        this._resolveCallback(response);
        this._resolveCallback = undefined;
        this._rejectCallback = undefined;
    };
    /**
     * This rejects the BatchedRequest.promise with the provided error.
     */
    BatchedRequest.prototype.rejectPromiseIfNotResolved = function (error) {
        if (this.response) {
            // This handles an edge case where an exception occurred after we
            // called resolvePromise() for some but not all of the BatchedRequest
            // objects.
            return;
        }
        if (!this._rejectCallback) {
            // This should never happen
            throw new Error('The promise was already settled');
        }
        this._rejectCallback(error);
        this._resolveCallback = undefined;
        this._rejectCallback = undefined;
    };
    return BatchedRequest;
}());
export default BatchedRequest;
//# sourceMappingURL=BatchedRequest.js.map