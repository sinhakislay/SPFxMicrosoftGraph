import * as tslib_1 from "tslib";
import SPHttpClientCommonConfiguration from './SPHttpClientCommonConfiguration';
import HttpClient from '../httpClient/HttpClient';
/**
 * Configuration for SPHttpClientBatch.
 *
 * @remarks
 * The SPHttpClientBatchConfiguration object provides a set of switches for enabling/disabling
 * various features of the SPHttpClientBatch class.  Normally these switches are set
 * (e.g. when calling SPHttpClientBatch.fetch()) by providing one of the predefined defaults
 * from SPHttpClientBatchConfigurations, however switches can also be changed via the
 * SPHttpClientBatchConfiguration.overrideWith() method.
 *
 * @beta
 */
var SPHttpClientBatchConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(SPHttpClientBatchConfiguration, _super);
    /**
     * Constructs a new instance of SPHttpClientBatchConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    function SPHttpClientBatchConfiguration(flags, overrideFlags) {
        return _super.call(this, flags, overrideFlags) || this;
    }
    /**
     * @override
     */
    SPHttpClientBatchConfiguration.prototype.overrideWith = function (sourceFlags) {
        return new SPHttpClientBatchConfiguration(this.flags, sourceFlags);
    };
    /**
     * @override
     */
    SPHttpClientBatchConfiguration.prototype.initializeFlags = function () {
        _super.prototype.initializeFlags.call(this);
    };
    return SPHttpClientBatchConfiguration;
}(SPHttpClientCommonConfiguration));
export default SPHttpClientBatchConfiguration;
export var predefinedConfigurations = {
    v1: new SPHttpClientBatchConfiguration(HttpClient.configurations.v1, {
        // ISPHttpClientCommonConfiguration:
        jsonRequest: true,
        jsonResponse: true
        // ISPHttpClientBatchConfiguration:
        // (none)
    })
};
//# sourceMappingURL=SPHttpClientBatchConfiguration.js.map