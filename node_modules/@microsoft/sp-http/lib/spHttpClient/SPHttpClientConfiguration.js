import * as tslib_1 from "tslib";
import SPHttpClientCommonConfiguration from './SPHttpClientCommonConfiguration';
import ODataVersion from './ODataVersion';
import HttpClient from '../httpClient/HttpClient';
/**
 * Configuration for {@link SPHttpClient}.
 *
 * @remarks
 * The SPHttpClientConfiguration object provides a set of switches for enabling/disabling
 * various features of the SPHttpClient class.  Normally these switches are set
 * (e.g. when calling SPHttpClient.fetch()) by providing one of the predefined defaults
 * from SPHttpClientConfigurations, however switches can also be changed via the
 * SPHttpClientConfiguration.overrideWith() method.
 *
 * @public
 */
var SPHttpClientConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(SPHttpClientConfiguration, _super);
    /**
     * Constructs a new instance of SPHttpClientConfiguration with the specified flags.
     * The default values will be used for any flags that are missing or undefined.
     * If overrideFlags is specified, it takes precedence over flags.
     */
    function SPHttpClientConfiguration(flags, overrideFlags) {
        return _super.call(this, flags, overrideFlags) || this;
    }
    /**
     * @override
     */
    SPHttpClientConfiguration.prototype.overrideWith = function (sourceFlags) {
        return new SPHttpClientConfiguration(this.flags, sourceFlags);
    };
    Object.defineProperty(SPHttpClientConfiguration.prototype, "defaultSameOriginCredentials", {
        /**
         * {@inheritDoc ISPHttpClientConfiguration.defaultSameOriginCredentials}
         */
        get: function () {
            return this.flags.defaultSameOriginCredentials;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPHttpClientConfiguration.prototype, "defaultODataVersion", {
        /**
         * {@inheritDoc ISPHttpClientConfiguration.defaultODataVersion}
         */
        get: function () {
            return this.flags.defaultODataVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPHttpClientConfiguration.prototype, "requestDigest", {
        /**
         * {@inheritDoc ISPHttpClientConfiguration.requestDigest}
         */
        get: function () {
            return this.flags.requestDigest;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @override
     */
    SPHttpClientConfiguration.prototype.initializeFlags = function () {
        _super.prototype.initializeFlags.call(this);
        this.flags.defaultSameOriginCredentials = false;
        this.flags.defaultODataVersion = ODataVersion.v3;
        this.flags.requestDigest = false;
    };
    return SPHttpClientConfiguration;
}(SPHttpClientCommonConfiguration));
export default SPHttpClientConfiguration;
export var predefinedConfigurations = {
    v1: new SPHttpClientConfiguration(HttpClient.configurations.v1, {
        // ISPHttpClientCommonConfiguration:
        jsonRequest: true,
        jsonResponse: true,
        // ISPHttpClientConfiguration:
        defaultSameOriginCredentials: true,
        defaultODataVersion: ODataVersion.v4,
        requestDigest: true
    })
};
//# sourceMappingURL=SPHttpClientConfiguration.js.map