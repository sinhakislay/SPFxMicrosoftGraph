/**
 * Represents supported version of the "OData-Version" header, which is part
 * of the Open Data Protocol standard.
 *
 * @public
 */
var ODataVersion = /** @class */ (function () {
    function ODataVersion(versionString) {
        this._versionString = versionString;
    }
    /**
     * Attempt to parse the "OData-Version" header.
     *
     * @remarks
     * If the "OData-Version" header is present, this returns the
     * corresponding ODataVersion constant.  An error is thrown if
     * the version number is not supported.  If the header is missing,
     * then undefined is returned.
     */
    ODataVersion.tryParseFromHeaders = function (headers) {
        var oDataVersion;
        headers.forEach(function (value, name) {
            if (name.toUpperCase() === 'ODATA-VERSION') {
                oDataVersion = value.trim();
            }
        });
        if (oDataVersion === '3.0') {
            return ODataVersion.v3;
        }
        else if (oDataVersion === '4.0') {
            return ODataVersion.v4;
        }
        else if (oDataVersion) {
            throw new Error('Unsupported OData-Version header: ' + oDataVersion);
        }
        return undefined;
    };
    /**
     * Returns the "OData-Version" value, for example "4.0".
     */
    ODataVersion.prototype.toString = function () {
        return this._versionString;
    };
    /**
     * Represents version 3.0 for the "OData-Version" header
     */
    ODataVersion.v3 = new ODataVersion('3.0');
    /**
     * Represents version 4.0 for the "OData-Version" header
     */
    ODataVersion.v4 = new ODataVersion('4.0');
    return ODataVersion;
}());
export default ODataVersion;
//# sourceMappingURL=ODataVersion.js.map