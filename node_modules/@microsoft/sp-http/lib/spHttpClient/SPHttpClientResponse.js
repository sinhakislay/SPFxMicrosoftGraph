import * as tslib_1 from "tslib";
import { Guid } from '@microsoft/sp-core-library';
import HttpClientResponse from '../httpClient/HttpClientResponse';
/**
 * The Response subclass returned by methods such as SPHttpClient.fetch().
 *
 * @remarks
 * This is a placeholder.  In the future, additional SPHttpClient-specific functionality
 * may be added to this class.
 *
 * @public
 * @sealed
 */
var SPHttpClientResponse = /** @class */ (function (_super) {
    tslib_1.__extends(SPHttpClientResponse, _super);
    function SPHttpClientResponse(response) {
        return _super.call(this, response) || this;
    }
    /**
     * @override
     */
    SPHttpClientResponse.prototype.clone = function () {
        return new SPHttpClientResponse(this.nativeResponse.clone());
    };
    Object.defineProperty(SPHttpClientResponse.prototype, "correlationId", {
        /**
         * Returns the SharePoint correlation ID.
         *
         * @remarks
         *
         * The correlation ID is a Guid that can be used to associate log events that
         * are part of the same overall operation, but may originate from different services
         * or components.  SharePoint REST operations return the server's correlation ID
         * as the "sprequestguid" header.
         *
         * @returns the correlation ID, or undefined if the "sprequestguid" header was not found
         *
         * @beta
         */
        get: function () {
            if (!this._correlationId) {
                this._correlationId = Guid.tryParse(this.headers.get("SPRequestGuid" /* SPRequestGuid */));
            }
            return this._correlationId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPHttpClientResponse.prototype, "statusMessage", {
        /**
         * User-friendly status message that includes the HTTP status, with the correlation id and version of the server.
         * @alpha
         */
        get: function () {
            var correlationId = this.headers.get('sprequestguid') || '';
            var spVersion = this.headers.get('microsoftsharepointteamservices') || '';
            return "[HTTP]:" + this.status + " - " + this.statusText + " [CorrelationId]:" + correlationId + " [Version]:" + spVersion;
        },
        enumerable: true,
        configurable: true
    });
    return SPHttpClientResponse;
}(HttpClientResponse));
export default SPHttpClientResponse;
//# sourceMappingURL=SPHttpClientResponse.js.map