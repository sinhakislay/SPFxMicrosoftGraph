import { SPEvent } from '@microsoft/sp-core-library';
import strings from '../SPHttpStrings.resx';
/**
 * This class is an implementation of the AadTokenProvider in environments that AAD cannot be reached.
 *
 * @internal
 * @sealed
 */
var MockAadTokenProvider = /** @class */ (function () {
    function MockAadTokenProvider() {
        this._tokenAcquisitionEvent = new SPEvent(MockAadTokenProvider._tokenAcquisitionEventId);
    }
    /**
     * Returns a rejected promise for retrieving an AAD OAuth2 token.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    MockAadTokenProvider.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        return Promise.reject(new Error(strings.servicePrincipalNotAvaliableError));
    };
    Object.defineProperty(MockAadTokenProvider.prototype, "tokenAcquisitionEvent", {
        /**
         * Notifies the developer when Token Acquistion requires user action.
         * @eventproperty
         * @beta
         */
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Token Acquisition Event String
     */
    MockAadTokenProvider._tokenAcquisitionEventId = 'tokenAcquisitionFailure';
    return MockAadTokenProvider;
}());
export default MockAadTokenProvider;
//# sourceMappingURL=MockAadTokenProvider.js.map