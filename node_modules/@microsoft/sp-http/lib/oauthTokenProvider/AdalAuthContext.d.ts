import * as AuthenticationContext from 'adal-angular';
/**
 * Class that wraps the ADAL's authentication class
 * @internal
 */
export default class AdalAuthContext {
    private static changePromptingForRedirectionKillSwitchGuid;
    private static unexpectedErrorsKillSwitchGuid;
    readonly clientId: string;
    private readonly _aadUserId;
    private _authContext;
    constructor(authContext: IAuthenticationContextInternal, aadUserId?: string);
    getToken(resourceEndpoint: string, useCachedToken: boolean): Promise<string>;
    private _getAccessToken;
    /**
     * Returns an access token if a valid cached token exists
     */
    private _tryGetCachedAccessToken;
    /**
     * See the following link for details about handling conditional access policies.
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-conditional-access-developer
     */
    private _fetchAccessTokenOld;
    private _fetchAccessToken;
    /**
     * Throws an exception if an expected error has occurred. List of expected errors are listed in AadConstants.ts
     */
    private _monitorAndThrowForAccessTokenExpectedFailures;
    /**
     * Wraps the ADAL.js callback code with a promise.
     */
    private _fetchAccessTokenSilent;
    /**
     * Patching ADAL context to address design issues.
     */
    private _patchAdalAuthContext;
    /**
     * Adds the hidden iframe for silent token renewal. This code is a security fix to ADAL.js's iframe
     * rendering code. IE11 doesn't support dynamically setting attributes on an iFrame element, so
     * we must patch the original implementation. Original code is in ADAL.js addAdalFrame.
     * https://github.com/AzureAD/azure-activedirectory-library-for-js/ for source code
     */
    private _addAdalFrame;
    /**
     * Opens a hidden iframe for silent token renewal. The original code performed this action in a really weird
     * and inefficent way, so we're fixing it.
     * Original code is in ADAL.js loadFrame.
     * https://github.com/AzureAD/azure-activedirectory-library-for-js/ for source code
     */
    private _loadFrame;
}
/**
 * Represents the exported module from the adal-angular npm package.
 * @internal
 */
export interface IAdalJsModule {
    inject: (configuration: AuthenticationContext.Options) => AuthenticationContext;
}
/**
 * Interface for interacting with internals of ADAL.js
 * @internal
 */
export interface IAuthenticationContextInternal extends AuthenticationContext {
    _loginInProgress: boolean;
    CONSTANTS: any | {
        ID_TOKEN: string;
        STORAGE: {
            ERROR: string;
            LOGIN_REQUEST: string;
            LOGIN_ERROR: string;
            NONCE_IDTOKEN: string;
            STATE_LOGIN: string;
        };
    };
    RESPONSE_TYPE: any | {
        TOKEN: string;
        ID_TOKEN_TOKEN: string;
    };
    _singletonInstance: AuthenticationContext | undefined;
    _user: AuthenticationContext.UserInfo;
    _addAdalFrame(iframeId: string): HTMLIFrameElement | undefined;
    _createUser(hash: string): AuthenticationContext.UserInfo;
    handleWindowCallback(hash?: string): void;
    _extractIdToken(token: string): IDecodedJWTAccessToken;
    _getItem(storageConstant: string): string;
    _getNavigateUrl(responseType: string, resourceEndpoint: string | undefined): string;
    _loadFrame(urlNavigate: string, frameName: string): void;
    _saveItem(storageConstant: string, object: string, preserve?: boolean): boolean;
    _renewToken(resource: string, callback: (message: string, token: string) => void, responseType: string): void;
    _renewIdToken(callback: (message: string, token: string) => void, responseType?: string): void;
}
interface IDecodedJWTAccessToken {
    /**
     * ID of the Application that requested the access token
     */
    appid: string;
    /**
     * ID of the AAD user that requested the access token
     */
    oid: string;
}
export {};
//# sourceMappingURL=AdalAuthContext.d.ts.map