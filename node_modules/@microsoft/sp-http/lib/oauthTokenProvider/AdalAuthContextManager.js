import AdalAuthContext from './AdalAuthContext';
import { Guid, UrlUtilities, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import { OBOTokenProvider } from './OBOTokenProvider';
/**
 * Class for managing multiple instances of the authentication context.
 * @internal
 */
var AdalAuthContextManager = /** @class */ (function () {
    function AdalAuthContextManager() {
        /**
         * Handles the loading of Adal.js. It is set to protected so that it can
         * be mocked in a unit test.
         * @internal
         */
        this._loadAdalJsModulePromise = undefined;
        this._authContextDictionary = new Map();
    }
    AdalAuthContextManager.convertTokenParametersToConfig = function (tokenProviderParameters) {
        var extraQueryParameter;
        if (tokenProviderParameters.userPrincipalName &&
            !_SPKillSwitch.isActivated(AdalAuthContextManager.usePromptQueryParamKillSwitchGuid, '03/19/19', 'Use login hint to resolve ambiguous users failure')) {
            extraQueryParameter = "login_hint=" + encodeURIComponent(tokenProviderParameters.userPrincipalName);
        }
        return {
            clientId: tokenProviderParameters.servicePrincipalId,
            redirectUri: tokenProviderParameters.redirectUri,
            instance: UrlUtilities.removeEndSlash(tokenProviderParameters.aadInstanceUrl) + '/',
            loadFrameTimeout: 10000,
            tenant: tokenProviderParameters.aadTenantId,
            navigateToLoginRequestUrl: false,
            extraQueryParameter: extraQueryParameter
        };
    };
    // Adal-angular exports include an inject function that takes a AuthenticationContext
    // configuration object and returns a instance of the AuthenticationContext.
    // https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/dev/lib/adal.js
    AdalAuthContextManager.prototype.getAuthContext = function (tokenProviderConfiguration, sharePointOBOProviderConfiguration) {
        var _this = this;
        if (!this._loadAdalJsModulePromise) {
            this._loadAdalJsModulePromise = this._loadAdalJs();
        }
        return this._loadAdalJsModulePromise.then(function (adalModule) {
            if (sharePointOBOProviderConfiguration) {
                return new OBOTokenProvider(adalModule.inject(AdalAuthContextManager.convertTokenParametersToConfig(tokenProviderConfiguration)), sharePointOBOProviderConfiguration);
            }
            // Using the servicePrincipalId as a unique identiifier for Authentication Context objects
            if (!_this._authContextDictionary.has(tokenProviderConfiguration.servicePrincipalId)) {
                var authContext = new AdalAuthContext(adalModule.inject(AdalAuthContextManager.convertTokenParametersToConfig(tokenProviderConfiguration)), tokenProviderConfiguration.aadUserId);
                _this._authContextDictionary.set(tokenProviderConfiguration.servicePrincipalId, authContext);
            }
            return _this._authContextDictionary.get(tokenProviderConfiguration.servicePrincipalId);
        });
    };
    AdalAuthContextManager.prototype._loadAdalJs = function () {
        if (!_SPKillSwitch.isActivated(AdalAuthContextManager.addAdditionalTelemetryKillSwitchGuid, '09/12/19', 'Instrument the time it takes to load ADAL.js')) {
            var loadAdalQosMonitor_1 = new _QosMonitor('AadTokenProvider.LoadAdal');
            return import(/* webpackChunkName: 'sp-http-adal' */ 'adal-angular')
                .then(function (adalModule) {
                loadAdalQosMonitor_1.writeSuccess();
                return adalModule;
            })
                .catch(function (e) {
                loadAdalQosMonitor_1.writeUnexpectedFailure(e);
                throw e;
            });
        }
        else {
            return import(/* webpackChunkName: 'sp-http-adal' */ 'adal-angular');
        }
    };
    AdalAuthContextManager.usePromptQueryParamKillSwitchGuid = Guid.parse('44a40d56-a9b7-4059-9569-78abe3f7f360');
    AdalAuthContextManager.addAdditionalTelemetryKillSwitchGuid = Guid.parse('9f4cb7b8-8489-4d53-bf27-6d26c848f23f');
    return AdalAuthContextManager;
}());
export default AdalAuthContextManager;
//# sourceMappingURL=AdalAuthContextManager.js.map