import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
import { IAadTokenProvider, IAadTokenProviderConfiguration } from './IAadTokenProvider';
import AdalAuthContextManager from './AdalAuthContextManager';
import { ISPOBOFlowParameters } from './OBOTokenProvider';
/**
 * Arguments for a token acquisition failure event.
 * @public
 */
export declare class TokenAcquisitionEventArgs extends SPEventArgs {
    /**
     * The message returned from ADAL fails to retrieve a token from Azure AD.
     */
    message: string;
    /**
   * The url of the page for the end user to perform Multi Factor Authentication
   */
    redirectUrl?: string;
    constructor(message: string, redirectUrl?: string);
}
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @privateRemarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 * @sealed
 */
export default class AadTokenProvider implements IAadTokenProvider {
    /**
     * Token Acquisition Event String
     * @internal
     */
    static _tokenAcquisitionEventId: string;
    private static msalTrialRunKillSwitchGuid;
    /**
     * Manager for loading AuthenticationContext instances
     * @internal
     */
    protected _authContextManager: AdalAuthContextManager;
    private _msalTokenProvider;
    private _tokenAcquisitionEvent;
    private _oboConfiguration;
    private readonly _defaultConfiguration;
    /**
     * @internal
     */
    constructor(configuration: IAadTokenProviderConfiguration, oboConfiguration?: ISPOBOFlowParameters);
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    getToken(resourceEndpoint: string, useCachedToken?: boolean): Promise<string>;
    /**
   * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
   * access to that resource.
   *
   * The OAuth2 token should not be cached by the caller since it is already cached by the method
   * itself.
   *
   * @param resourceEndpoint - the resource for which the token should be obtained
   * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
   * An example of a resourceEndpoint would be https://graph.microsoft.com
   * @returns A promise that will be fullfiled with the token or that will reject
   *          with an error message
   *
   * @internal
   */
    _getTokenInternal(resourceEndpoint: string, configuration: IAadTokenProviderConfiguration, useCachedToken?: boolean): Promise<string>;
    /**
     * Notifies the developer when Token Acquisition requires user action.
     * @eventproperty
     */
    readonly tokenAcquisitionEvent: SPEvent<TokenAcquisitionEventArgs>;
}
//# sourceMappingURL=AadTokenProvider.d.ts.map