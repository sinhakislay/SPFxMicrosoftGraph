import { IAuthenticationContextInternal } from './AdalAuthContext';
import SPHttpClient from '../spHttpClient/SPHttpClient';
/**
 * Parameters neccesary for performing the OBO flow with SharePoint.
 * @internal
 */
export interface ISPOBOFlowParameters {
    spHttpClient: SPHttpClient;
    serverRelativeUrl: string;
}
/**
 * Class that wraps the ADAL's authentication class
 * @internal
 */
export declare class OBOTokenProvider {
    private static _logSource;
    readonly servicePrincipalId: string;
    private readonly _authContext;
    private readonly _serverRelativeUrl;
    private readonly _spHttpClient;
    constructor(authContext: IAuthenticationContextInternal, tokenParameters: ISPOBOFlowParameters);
    getToken(resourceEndpoint: string, useCachedToken?: boolean): Promise<string>;
    private _getAccessToken;
    /**
     * Returns an access token if a valid cached token exists
     */
    private _tryGetCachedAccessToken;
    /**
     * See the following link for details about handling conditional access policies.
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-conditional-access-developer
     */
    private _fetchAccessToken;
    /**
     * Wraps the ADAL.js callback code with a promise.
     */
    private _fetchAccessTokenSilent;
    /**
     * Adal creates an iframe without the sandbox attribute.
     *  Adal assumes it's being used as a singleton but this will not work for our scenario.
     */
    private _patchAdalAuthContext;
}
//# sourceMappingURL=OBOTokenProvider.d.ts.map