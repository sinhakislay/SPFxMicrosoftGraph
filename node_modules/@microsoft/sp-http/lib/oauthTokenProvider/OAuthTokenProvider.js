import { OAuthUtility } from '@ms/sp-client-shared';
import OAuthUtilityContext from './OAuthUtilityContext';
import { ServiceKey, Validate } from '@microsoft/sp-core-library';
/**
 * This class allows one to obtain OAuth tokens
 *
 * OAuth tokens are used to authenticate the user from the sharepoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @alpha
 */
var OAuthTokenProvider = /** @class */ (function () {
    function OAuthTokenProvider(serviceScope) {
        this._tokenUtility = new OAuthUtility(new OAuthUtilityContext(serviceScope));
    }
    /**
     * Fetches the oauth token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth token SHOULD NOT be cached by the caller since it is already cached by the method
     * itself.
     *
     * If the promise returned by this method rejects, there is no point in retrying the same call.
     * If the response from the server signals that the request should be retried this function will do this by itself.
     *
     * An example of a resource would be https://sdfpilot.outlook.com
     *
     * @param resource - the resource for which the token should be obtained
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an instance of TokenUtilityError
     */
    // @todo VSO:237921 - use the correct typings
    OAuthTokenProvider.prototype.getOAuthToken = function (resource, webUrl) {
        Validate.isNotNullOrUndefined(resource, 'resource');
        Validate.isNonemptyString(resource, 'resource');
        return this._tokenUtility.getOAuthToken(resource, webUrl);
    };
    /**
     * Clears the token from a given resource from the internal cache. If there is no token
     * cached for the resource the method does nothing.
     *
     * @param resource - resource for which the token should be cleared from the cache
     */
    OAuthTokenProvider.prototype.clearCachedToken = function (resource) {
        Validate.isNotNullOrUndefined(resource, 'resource');
        Validate.isNonemptyString(resource, 'resource');
        this._tokenUtility.clearCachedToken(resource);
    };
    /**
     * The service key for OAuthTokenProvider.
     */
    OAuthTokenProvider.serviceKey = ServiceKey.create('sp-client-shared:OAuthTokenProvider', OAuthTokenProvider);
    return OAuthTokenProvider;
}());
export default OAuthTokenProvider;
//# sourceMappingURL=OAuthTokenProvider.js.map