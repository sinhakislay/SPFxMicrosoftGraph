import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
import { ITokenAcquisitionEventArgs } from './IAadTokenProvider';
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @remarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 */
export interface IAadTokenProvider {
    /**
     * Notifies the developer when Token Acquistion requires user action.
     * @eventproperty
     */
    readonly tokenAcquisitionEvent: SPEvent<ITokenAcquisitionEventArgs>;
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token SHOULD NOT be cached by the caller since it is already cached by the method
     * itself.
     *
     * An example of a resourceEndpoint would be https://sdfpilot.outlook.com
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    getToken(resourceEndpoint: string, useCachedToken?: boolean): Promise<string>;
}
/**
 * Required strings for constructing an AadTokenProvider.
 *
 * @public
 */
export interface IAadTokenProviderConfiguration {
    /**
     * The sign in page used to authenticate with Azure Active Directory. Trailing slashes are forbidden.
     */
    aadInstanceUrl: string;
    /**
     * The Azure Active Directory's tenant id.
     */
    aadTenantId: string;
    /**
     * The page used to retrieve tokens from Azure Active Directory. This url must be listed in
     * the developer's application redirect uris.
     */
    redirectUri: string;
    /**
     * The client ID of the developer's Azure Active Directory application.
     */
    servicePrincipalId: string;
    /**
     * The user's Azure Active Directory id. This will be used to ensure that a valid cached token is for
     * the current user.
     */
    aadUserId?: string;
    /**
     * The user's email address. This will be used to ensure that the current user's identity is used for
     * fetching auth tokens.
     * @deprecated This parameter will be ignored. Use userPrincipalName instead
     */
    userEmail?: string;
    /**
     * The user's principal name. This will be used to ensure that the current user's identity is used for
     * fetching auth tokens. This parameter will avoid the "Request is ambiguous: multiple user identities
     * are avaliable for the current request" error.
     */
    userPrincipalName?: string;
}
/**
 * Represents arguments used for raising a token acquisiton failure event.
 * @public
 */
export interface ITokenAcquisitionEventArgs extends SPEventArgs {
    /**
     * The message returned from ADAL fails to retrieve a token from Azure AD.
     */
    message: string;
    /**
     * The url of the page for the end user to interact with Azure AD.
     */
    redirectUrl?: string;
}
/**
 * Represents the set of data we send to our QosMonitors for token requests
 */
export interface IAadTokenProviderExtraData {
    CorrelationId: string;
    isInternal: boolean;
}
//# sourceMappingURL=IAadTokenProvider.d.ts.map