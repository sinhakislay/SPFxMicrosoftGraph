import * as tslib_1 from "tslib";
import { Guid, SPEvent, SPEventArgs, Validate, _SPKillSwitch } from '@microsoft/sp-core-library';
import AdalAuthContextManager from './AdalAuthContextManager';
import { MsalTokenProvider } from './MsalTokenProvider';
import strings from '../SPHttpStrings.resx';
/**
 * Arguments for a token acquisition failure event.
 * @public
 */
var TokenAcquisitionEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(TokenAcquisitionEventArgs, _super);
    function TokenAcquisitionEventArgs(message, redirectUrl) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.redirectUrl = redirectUrl;
        return _this;
    }
    return TokenAcquisitionEventArgs;
}(SPEventArgs));
export { TokenAcquisitionEventArgs };
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @privateRemarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 * @sealed
 */
var AadTokenProvider = /** @class */ (function () {
    /**
     * @internal
     */
    function AadTokenProvider(configuration, oboConfiguration) {
        Validate.isNonemptyString(configuration.aadInstanceUrl, 'aadInstanceUrl');
        Validate.isNonemptyString(configuration.aadTenantId, 'aadTenantId');
        Validate.isNonemptyString(configuration.redirectUri, 'redirectUri');
        Validate.isNonemptyString(configuration.servicePrincipalId, 'servicePrincipalId');
        this._defaultConfiguration = configuration;
        this._msalTokenProvider = new MsalTokenProvider(configuration);
        this._oboConfiguration = oboConfiguration;
        this._tokenAcquisitionEvent = new SPEvent(AadTokenProvider._tokenAcquisitionEventId);
    }
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    AadTokenProvider.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        if (this._defaultConfiguration.servicePrincipalId === Guid.empty.toString()) {
            return Promise.reject(new Error(strings.servicePrincipalNotAvaliableError));
        }
        if (!_SPKillSwitch.isActivated(AadTokenProvider.msalTrialRunKillSwitchGuid, '09/11/19', 'Run MSAL for only 1/10th of all requests') &&
            Math.floor((Math.random() * 10)) === 0) {
            this._msalTokenProvider.getToken(resourceEndpoint)
                .catch(function (e) { });
        }
        return this._getTokenInternal(resourceEndpoint, this._defaultConfiguration, useCachedToken);
    };
    /**
   * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
   * access to that resource.
   *
   * The OAuth2 token should not be cached by the caller since it is already cached by the method
   * itself.
   *
   * @param resourceEndpoint - the resource for which the token should be obtained
   * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
   * An example of a resourceEndpoint would be https://graph.microsoft.com
   * @returns A promise that will be fullfiled with the token or that will reject
   *          with an error message
   *
   * @internal
   */
    AadTokenProvider.prototype._getTokenInternal = function (resourceEndpoint, configuration, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        var tokenProviderConfig = configuration || this._defaultConfiguration;
        if (!this._authContextManager) {
            this._authContextManager = new AdalAuthContextManager();
        }
        return this._authContextManager.getAuthContext(tokenProviderConfig, this._oboConfiguration)
            .then(function (authContext) { return authContext.getToken(resourceEndpoint, useCachedToken); });
    };
    Object.defineProperty(AadTokenProvider.prototype, "tokenAcquisitionEvent", {
        /**
         * Notifies the developer when Token Acquisition requires user action.
         * @eventproperty
         */
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Token Acquisition Event String
     * @internal
     */
    AadTokenProvider._tokenAcquisitionEventId = 'tokenAcquisitionFailure';
    AadTokenProvider.msalTrialRunKillSwitchGuid = Guid.parse('e177c5d1-fceb-45c5-95c0-438dff9b583b');
    return AadTokenProvider;
}());
export default AadTokenProvider;
//# sourceMappingURL=AadTokenProvider.js.map