import { ServiceScope, IDisposable } from '@microsoft/sp-core-library';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { PageContext } from '@microsoft/sp-page-context';
import { HttpClient, SPHttpClient, AadHttpClientFactory, AadTokenProviderFactory, MSGraphClientFactory } from '@microsoft/sp-http';
import BaseComponent from './BaseComponent';
import DynamicDataProvider from './DynamicDataProvider';
import DynamicDataSourceManager from './DynamicDataSourceManager';
/**
 * Constructor parameters for a BaseComponentContext.
 *
 * @internal
 */
export interface IComponentContextParameters {
    /**
     * The manager's ServiceScope, which will be used to create the child
     * ServiceScope for the associated context.
     */
    readonly parentServiceScope: ServiceScope;
    /**
     * The client-side component manifest.
     */
    readonly manifest: IClientSideComponentManifest;
    /**
     * Logging service tag
     */
    readonly loggingTag: string;
    /**
     * Instance id for the client-side component.
     */
    readonly instanceId: string;
}
/**
 * The base class for context objects for client-side components.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by business logic that interacts with a
 * associated component.  Each component type has its own specialized subclass
 * of BaseComponentContext, e.g. WebPartContext for web parts, ExtensionContext for
 * client-side extensions, and so on.
 *
 * @privateRemarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for every class in a project.
 * If lots of members are added to the context without discipline, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to the context object.
 * Is it really a core scenario?  Is it unnecessarily coupling your package to another
 * package?  Is there a better place to put the object?
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Never add loose functions, callbacks, or settable properties to the context.
 *
 * @public
 */
declare abstract class BaseComponentContext implements IDisposable {
    /**
     * Manifest for the client-side component.
     */
    readonly manifest: IClientSideComponentManifest;
    private _serviceScope;
    private _instanceId;
    private _pageContext;
    private _dynamicDataProvider;
    private _dynamicDataSourceManager;
    private _isDisposed;
    private _httpClient;
    private _spHttpClient;
    private _aadClientFactory;
    private _aadTokenFactory;
    private _msGraphClientFactory;
    /** @internal */
    constructor(parameters: IComponentContextParameters);
    /**
     * Returns true if the context is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Disposes the base component context.
     */
    dispose(): void;
    /**
     * The associated {@link @microsoft/sp-core-library#ServiceScope} for this component.
     * @remarks
     * A child service scope is created for each client-side component.
     */
    readonly serviceScope: ServiceScope;
    /**
     * {@inheritDoc BaseComponent.instanceId}
     */
    readonly instanceId: string;
    /**
     * The page context provides standard definitions for common SharePoint objects
     * that need to be shared between the client-side application, web parts, and other
     * components.
     */
    readonly pageContext: PageContext;
    /**
     * Creates a Dynamic Data Provider for the component.
     *
     * @param component - Component tied to the Dynamic Data Provider
     * @param serviceScope - ServiceScope to consume the Dynamic Data Manager from. Must be finished.
     * @internal
     */
    _initializeDynamicData(component: BaseComponent, serviceScope: ServiceScope): void;
    /**
     * Returns the Dynamic Data Provider associated with the component.
     */
    readonly dynamicDataProvider: DynamicDataProvider;
    /**
     * Returns the Dynamic Data Source Manager associated with the component.
     */
    readonly dynamicDataSourceManager: DynamicDataSourceManager;
    /**
     * The instance of AadHttpClientFactory created for this instance of component
     */
    readonly aadHttpClientFactory: AadHttpClientFactory;
    /**
     * The instance of AadTokenProviderFactory created for this instance of component
     */
    readonly aadTokenProviderFactory: AadTokenProviderFactory;
    /**
     * The instance of MSGraphClientFactory created for this instance of component
     */
    readonly msGraphClientFactory: MSGraphClientFactory;
    /**
     * The instance of HttpClient created for this instance of component
     */
    readonly httpClient: HttpClient;
    /**
     * The instance of SpHttpClient created for this instance of component
     */
    readonly spHttpClient: SPHttpClient;
}
export default BaseComponentContext;
//# sourceMappingURL=BaseComponentContext.d.ts.map