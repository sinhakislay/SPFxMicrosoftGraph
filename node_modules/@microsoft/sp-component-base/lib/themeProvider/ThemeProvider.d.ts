import { ServiceKey, ServiceScope, SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
import { ITheme, IReadonlyTheme } from './themeInterfaces/ITheme';
/**
 * The object passed when the IThemeProvider.themeChangedEvent is raised.
 *
 * @public
 */
export declare class ThemeChangedEventArgs extends SPEventArgs {
    /**
     * The new theme. If the value is undefined, then the theme was cleared.
     */
    readonly theme: ITheme | undefined;
}
/**
 * The ThemeProvider class provides the capability to get different themes from the Framework. Themes can be provided
 * in different contexts, e.g. Canvas sections may provide a variant of the global theme in some contexts.
 *
 * @public
 */
export declare class ThemeProvider {
    /**
     * The service key for ThemeProvider.
     */
    static readonly serviceKey: ServiceKey<ThemeProvider>;
    private static readonly _themeChangedEventNameLiteral;
    /**
     * Used to register a unique event for each ThemeProvider instance by appending
     * the instance count to themeChangedEventNameLiteral.
     */
    private static _instanceCount;
    /**
     * Raised when the theme changes with the new theme as an argument.
     *
     * @eventproperty
     */
    readonly themeChangedEvent: SPEvent<ThemeChangedEventArgs>;
    private readonly _id;
    private _theme;
    /**
     * Construct a new instance of the ThemeProvider class.
     *
     * @param serviceScope - The current service scope.
     * @param theme - Theme to provide.
     */
    constructor(serviceScope: ServiceScope, theme?: ITheme);
    private readonly _themeChangedEventName;
    /**
     * Clear the currently set theme and raise the themeChangedEvent.
     *
     * @internal
     */
    _clearTheme(): void;
    /**
     * Change the theme and raise the themeChangedEvent.
     *
     * @param theme - The new theme.
     *
     * @internal
     */
    _setTheme(theme: ITheme): void;
    /**
     * If set, get the current scoped theme.
     */
    tryGetTheme(): IReadonlyTheme | undefined;
    private _raiseEvent;
}
//# sourceMappingURL=ThemeProvider.d.ts.map