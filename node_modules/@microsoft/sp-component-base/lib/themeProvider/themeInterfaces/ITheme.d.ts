import { IPalette } from './IPalette';
import { IFontStyles, IReadonlyFontStyles } from './IFontStyles';
import { ISemanticColors } from './ISemanticColors';
/**
 * Collection of theme values, which can be used to programatically style components.
 *
 * @privateRemarks
 * This is a snapshot of OUIFR's ITheme.
 *
 * @public
 */
export interface ITheme {
    /**
     * Disables global styles on Fabric components. This will prevent global overrides that
     * might have been set by other Fabric users from applying to your components.
     *
     * @remarks This has a vary narrow use case and most likely should be avoided.
     */
    disableGlobalClassNames: boolean;
    /**
     * Font styles for different sizes.
     */
    fonts: IFontStyles;
    /**
     * Indicates whether the theme is inverted.
     */
    isInverted: boolean;
    /**
     * Color palette.
     */
    palette: IPalette;
    /**
     * The collection of all semantic slots for colors used in themes.
     */
    semanticColors: ISemanticColors;
}
/**
 * Immutable ITheme.
 *
 * @public
 */
export interface IReadonlyTheme extends Readonly<ITheme> {
    /**
     * {@inheritdoc ITheme.palette}
     */
    readonly palette: Readonly<IPalette>;
    /**
     * {@inheritdoc ITheme.fonts}
     */
    readonly fonts: Readonly<IReadonlyFontStyles>;
    /**
     * {@inheritdoc ITheme.semanticColors}
     */
    readonly semanticColors: Readonly<ISemanticColors>;
}
//# sourceMappingURL=ITheme.d.ts.map