import { IDisposable } from '@microsoft/sp-core-library';
import { IDynamicDataSource } from '@microsoft/sp-dynamic-data';
import DynamicDataProvider from './DynamicDataProvider';
/**
 * Serializable object that simplifies usage of a DynamicProperty.
 *
 * @remarks
 * This is built for usage in web part properties, and modified through the property pane.
 * Can be initialized with a default callback.
 * Web parts initialize with the render method so if the 3rd party developer does nothing, a change in the
 * DynamicProperty will re-render the web part automatically.
 *
 * @public
 */
export default class DynamicProperty<TValue> implements IDisposable {
    /**
     * Constant with the type name of the DynamicProperty.
     * @internal
     */
    static readonly _TYPE_NAME: string;
    private static readonly _arrayRegex;
    private _reference;
    private _value;
    private _hasValue;
    private _sourceId;
    private _provider;
    private _isDisposed;
    /**
     * Set to store all callback assigned in order to unregister them when the object gets disposed.
     */
    private _callbacks;
    /**
     * Default callback. Can be undefined if another callback has been set up.
     */
    private _defaultCallback;
    /**
     * Collection of callbacks that should be registered if/when the DynamicProperty source gets registered.
     * This gets emptied when the source exists.
     */
    private _pendingCallbacks;
    private _onSourcesChanged;
    /**
     * Create a new DynamicProperty object.
     * @param provider - DynamicDataProvider.
     * @param callback - Optional. Default callback to be registered for updates in the DynamicDataSource.
     */
    constructor(provider: DynamicDataProvider, callback?: () => void);
    /**
     * Sets the value of the DynamicProperty to be a reference to a DynamicDynamicSource
     * and property.  The reference is of the form `<source>:<property>:<path>`.
     * @param reference - Id of the DynamicDataSource and property.
     */
    setReference(reference: string): void;
    /**
     * Sets a static value in the DynamicProperty.
     * @param value - Value for the DynamicProperty.
     */
    setValue(value: TValue): void;
    /**
     * {@inheritDoc @microsoft/sp-core-library#IDisposable.isDisposed}
     */
    readonly isDisposed: boolean;
    /**
     * {@inheritDoc @microsoft/sp-core-library#IDisposable.dispose}
     */
    dispose(): void;
    /**
     * Returns a serializable version of the object.
     * To be used when `JSON.stringify()` is called on the object (i.e. during Web Part serialization)
     *
     * @remarks
     * This doesn't follow the naming rule for internal methods because the JavaScript engine needs this exact name.
     *
     * @internal
     */
    toJSON(): Object;
    /**
     * DynamicDataReference string that the DynamicProperty object points to.
     * The reference is of the form `<source>:<property>:<path>`.
     *
     * @remarks
     * If the DynamicProperty is set up with static data, this returns undefined.
     */
    readonly reference: string | undefined;
    /**
     * Returns the value of the DynamicProperty object, if it has a non-dynamic value.
     * Used for serialization purposes. The proper API to access the value of the object is `tryGetValue()`
     *
     * @internal
     */
    readonly value: TValue | undefined;
    /**
     * Returns the value of the object.
     *
     * @remarks
     * If the value is an array, then the first element of the array is returned;
     * otherwise, the value itself is returned.
     *
     * NOTE: This api will never return an array.  To retrieve an array value,
     * use the {@link DynamicProperty.tryGetValues} API.
     *
     * @returns the value associated with the dynamic property or
     * undefined if the source or the data doesn't exist.
     */
    tryGetValue(): TValue | undefined;
    /**
     * Returns the value of the object.
     *
     * @remarks
     * If the value is NOT an array, then an array is returned with the value being the single entry;
     * otherwise, the value itself is returned.  If the property is undefined or cannot be found,
     * an empty array will be returned.
     *
     * NOTE: This api will always return an array and it assumes that the array is homogeneous.
     * To retrieve a non-array value, use the {@link DynamicProperty.tryGetValue} API.
     *
     * @returns the value associated with the dynamic property or
     * an empty array if the source or the data doesn't exist.
     */
    tryGetValues(): TValue[];
    /**
     * Returns the DynamicDataSource that the DynamicProperty object refers to.
     * Returns undefined if the source doesn't exist.
     */
    tryGetSource(): IDynamicDataSource | undefined;
    /**
     * Registers a callback function for updates on the associated DynamicDataSource.
     * @param callback - Callback function to register.
     */
    register(callback: () => void): void;
    /**
     * Unregisters a callback function for updates on the associated DynamicDataSource.
     * The callback function must be the same it was registered with.
     * @param callback - Callback function to unregister.
     */
    unregister(callback: () => void): void;
    /**
     * Returns true if the object has a default callback.
     */
    hasDefaultCallback(): boolean;
    /**
     * Removes the registration for the default callback.
     *
     * @remarks
     * This can be useful for advanced users who only want their custom callbacks.
     */
    removeDefaultCallback(): void;
    /**
     * Returns the id of the DynamicDataSource if the DynamicProperty has a reference set.
     *
     * @internal
     */
    _getSourceId(): string;
    /**
     * Returns the property name of the DynamicDataSource that the DynamicProperty points to.
     *
     * NOTE: This is accessed from the property pane code while building the DynamicDataWidget.
     * @internal
     */
    _getProperty(): string;
    /**
     * Returns the path from the property that the object points to, if applicable.
     * If not applicable, returns an empty string.
     *
     * @internal
     */
    _getPropertyPath(): string;
    /**
     * Returns a deep cloned version of the current instance.
     *
     * @remarks
     * Since the dynamic property is maintaining an instance of the DynamicDataProvider,
     * which which when serialized will result in 'Maximum call stack size exceeded' based
     * on what kind of sources they hold references to.
     *
     * For example, if the dynamicDataProvider is holding PageContext source, which internally
     * has serviceScope in its state. Deep cloning this source would result in the above mentioned
     * error.
     *
     * Hence we would want to just clone the dynamicDataProvider not deep clone it.
     *
     * @returns - Custom deep Cloned version of the current instance.
     *
     * @internal
     */
    _cloneDeep(instance: DynamicProperty<any>): any;
    /**
     * Returns the property name of the DynamicDataSource that the DynamicProperty points to.
     *
     * @remarks
     * Removes the array notation from the property name, if any, before it is being registered.
     * This is to avoid any mismatch between the strings passed by the source when it notifies
     * a property change, as the source doesn't pass any array notation with the property name.
     * Array notation is only for internal representaion, for a property whose value is an array type.
     */
    private _getPropertyToRegister;
    /**
     * Callback when the DynamicDataSources list changes.
     * It registers the pending callbacks into the DynamicDataProvidere.
     */
    private _onSourcesChangedCallback;
    private _getData;
}
//# sourceMappingURL=DynamicProperty.d.ts.map