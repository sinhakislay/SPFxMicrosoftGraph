import { IDisposable, ServiceScope } from '@microsoft/sp-core-library';
import { IDynamicDataCallables, IDynamicDataSource, IDynamicDataSourceMetadata } from '@microsoft/sp-dynamic-data';
import BaseComponent from './BaseComponent';
/**
 * The Dynamic Data Source Manager is responsible for:
 *  - Constructing the dynamic data source
 *  - Allowing initialization of the dynamic data source by a component
 *  - Allowing data source to update its metadata and notify when data has been updated.
 *
 * @public
 */
export default class DynamicDataSourceManager implements IDisposable {
    private _dynamicDataManager;
    private _component;
    private _callableFunctions;
    private _src;
    private _isDisposed;
    private _isInitialized;
    private _logSource;
    /**
     * Initializes the Dynamic Data source manager for a specific component.
     *
     * @param component - Component on which the source is being constructed.
     *
     * @internal
     */
    _initialize(component: BaseComponent, serviceScope: ServiceScope): void;
    /**
     * Disposes the resources held by the Dynamic Data source.
     */
    dispose(): void;
    /**
     * Returns true if the DynamicDataSourceManager is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Returns the source of DynamicDataSourceManager.
     * @internal
     */
    readonly _source: IDynamicDataSource | undefined;
    /**
     * Initializes the Dynamic Data Source for the component.
     *
     * @param callableFunctions - Set of methods that are exposed through the Dynamic Data Source
     */
    initializeSource(callableFunctions: IDynamicDataCallables): void;
    /**
     * Notifies that this source has updated its properties.
     *
     * When invoked, it enables to broadcast the notification to all the consumers who have
     * registered to this notification from this source.
     */
    notifySourceChanged(): void;
    /**
     * Notifies that this source has updated a specific property.
     *
     * When invoked, it enables to broadcast the notification to all the consumers who have
     * registered to this notification from this source.
     *
     * @param propertyId - Id of the updated property in the source.
     */
    notifyPropertyChanged(propertyId: string): void;
    /**
     * Updates the metadata of the Dynamic Data Source.
     * It allows to update fields like title or description.
     * Auto-generated fields like alias, componentId or instanceId cannot be updated.
     *
     * @param metadata - Partial of the metadata.
     */
    updateMetadata(metadata: Partial<IDynamicDataSourceMetadata>): void;
    /**
     * Returns the Id of the current DataSource.
     * If the component did not initialize as a dynamic data source, then it returns an empty string.
     */
    readonly sourceId: string;
    private _buildSource;
    /**
     * This is the allowedEvents() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     */
    private _allowedEvents;
    /**
     * This is the sendEvent() that the consumer invokes to send an event to the source, with data.
     * @param eventName - Name of the event
     * @param data - Associated data
     */
    private _sendEvent;
    /**
     * This is the getPropertyDefinitions() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * This assumes that the component has dynamic data and has a controller.
     */
    private _getPropertyDefinitions;
    /**
     * This is the getPropertyValue() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * This assumes that the component has the source initialized.
     * If there is no value returned, it checks whether the propertyId is incorrect or the value is actually undefined.
     *
     * @remarks
     * If the property value associated with the property id, is an array then the
     * propertyId will have [*] notation appended at the end to support valid JSON Path notation.
     * Hence when reading the property id, we account for that and extract the name accordingly.
     */
    private _getPropertyValue;
    /**
     * Returns the real time value of the property.
     * @param propertyId - property id for which the value is requested.
     */
    private _getPropertyDefinitionsAsync;
    /**
     * Returns the real time value of the property.
     * @param propertyId - property id for which the value is requested.
     */
    private _getPropertyValueAsync;
    /**
     * This is the allowedEvents() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     */
    private _allowedEventsAsync;
    /**
     * This is the getPropertyValueSchema() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * If the source doesn't provide the annotated value, then it falls back to whatever
     * 'getPropertyValue' returns as the sample value and metadata would be undefined.
     *
     * @remarks
     * If the property value associated with the property id, is an array then the
     * propertyId will have [*] notation appended at the end to support valid JSON Path notation.
     * Hence when reading the property id, we account for that and extract the name accordingly.
     *
     * @param propertyId - property id for which the schema is requested.
     */
    private _getAnnotatedPropertyValue;
    /**
     * Returns the annotated value of the property.
     * @param propertyId - property id for which the value is requested.
     */
    private _getAnnotatedPropertyValueAsync;
    private _buildMetadata;
    /**
     * Asserts if the event is a valid event on the source.
     *
     * Its an invalid event in two cases:
     *  1. When '_allowedEvent()' api returns undefined
     *  2. When the event name is not one of the allowed events on the source.
     *
     * @param eventName - Name of the event.
     */
    private _assertValidEvent;
    private _assertNotDisposed;
    private _assertInitialized;
    private _assertSourceExists;
    /**
     * Logs a feature event.
     * @param logFeature - Name of the feature to log.
     * @param contextualProps - Contextual log properties of the feature event.
     */
    private _logFeatureEntry;
}
//# sourceMappingURL=DynamicDataSourceManager.d.ts.map