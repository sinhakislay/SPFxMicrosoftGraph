import { Validate, _ClientManifestData } from '@microsoft/sp-core-library';
import { _LogSource, _logSourceServiceKey } from '@microsoft/sp-diagnostics';
import { PageContext } from '@microsoft/sp-page-context';
import { HttpClient, SPHttpClient, AadHttpClientFactory, AadTokenProviderFactory, MSGraphClientFactory } from '@microsoft/sp-http';
import DynamicDataProvider from './DynamicDataProvider';
import DynamicDataSourceManager from './DynamicDataSourceManager';
/**
 * The base class for context objects for client-side components.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by business logic that interacts with a
 * associated component.  Each component type has its own specialized subclass
 * of BaseComponentContext, e.g. WebPartContext for web parts, ExtensionContext for
 * client-side extensions, and so on.
 *
 * @privateRemarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for every class in a project.
 * If lots of members are added to the context without discipline, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to the context object.
 * Is it really a core scenario?  Is it unnecessarily coupling your package to another
 * package?  Is there a better place to put the object?
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Never add loose functions, callbacks, or settable properties to the context.
 *
 * @public
 */
var BaseComponentContext = /** @class */ (function () {
    /** @internal */
    function BaseComponentContext(parameters) {
        var _this = this;
        this._isDisposed = false;
        Validate.isNotNullOrUndefined(parameters, 'parameters');
        Validate.isNotNullOrUndefined(parameters.manifest, 'manifest');
        this.manifest = parameters.manifest;
        Validate.isNotNullOrUndefined(parameters.parentServiceScope, 'parentServiceScope');
        this._serviceScope = parameters.parentServiceScope.startNewChild();
        // TODO: VSO:507790 Reconcile this with ClientSideWebPartManager._createWebPartTag()
        Validate.isNotNullOrUndefined(parameters.loggingTag, 'loggingTag');
        this.serviceScope.provide(_logSourceServiceKey, _LogSource.create(parameters.loggingTag));
        Validate.isNonemptyString(parameters.instanceId, 'instanceId');
        this._instanceId = parameters.instanceId;
        this._httpClient = this.serviceScope.createDefaultAndProvide(HttpClient.serviceKey);
        this._spHttpClient = this.serviceScope.createDefaultAndProvide(SPHttpClient.serviceKey);
        this._msGraphClientFactory = this.serviceScope.createDefaultAndProvide(MSGraphClientFactory.serviceKey);
        this._aadClientFactory = this.serviceScope.createDefaultAndProvide(AadHttpClientFactory.serviceKey);
        this._aadTokenFactory = this.serviceScope.createDefaultAndProvide(AadTokenProviderFactory.serviceKey);
        this.serviceScope.provide(_ClientManifestData.serviceKey, new _ClientManifestData(this.serviceScope, this.manifest));
        // Consume services
        this.serviceScope.whenFinished(function () {
            _this._pageContext = _this.serviceScope.consume(PageContext.serviceKey);
        });
        this._dynamicDataProvider = new DynamicDataProvider();
        this._dynamicDataSourceManager = new DynamicDataSourceManager();
    }
    Object.defineProperty(BaseComponentContext.prototype, "isDisposed", {
        /**
         * Returns true if the context is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Disposes the base component context.
     */
    BaseComponentContext.prototype.dispose = function () {
        if (!this._isDisposed) {
            if (this._dynamicDataProvider) {
                this._dynamicDataProvider.dispose();
            }
            if (this._dynamicDataSourceManager) {
                this._dynamicDataSourceManager.dispose();
            }
            delete this._serviceScope;
            delete this._pageContext;
            delete this._dynamicDataProvider;
            delete this._dynamicDataSourceManager;
            this._isDisposed = true;
        }
    };
    Object.defineProperty(BaseComponentContext.prototype, "serviceScope", {
        /**
         * The associated {@link @microsoft/sp-core-library#ServiceScope} for this component.
         * @remarks
         * A child service scope is created for each client-side component.
         */
        get: function () { return this._serviceScope; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "instanceId", {
        /**
         * {@inheritDoc BaseComponent.instanceId}
         */
        get: function () { return this._instanceId; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "pageContext", {
        /**
         * The page context provides standard definitions for common SharePoint objects
         * that need to be shared between the client-side application, web parts, and other
         * components.
         */
        get: function () { return this._pageContext; },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a Dynamic Data Provider for the component.
     *
     * @param component - Component tied to the Dynamic Data Provider
     * @param serviceScope - ServiceScope to consume the Dynamic Data Manager from. Must be finished.
     * @internal
     */
    BaseComponentContext.prototype._initializeDynamicData = function (component, serviceScope) {
        this._dynamicDataProvider._initialize(component, serviceScope);
        this._dynamicDataSourceManager._initialize(component, serviceScope);
    };
    Object.defineProperty(BaseComponentContext.prototype, "dynamicDataProvider", {
        /**
         * Returns the Dynamic Data Provider associated with the component.
         */
        get: function () {
            return this._dynamicDataProvider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "dynamicDataSourceManager", {
        /**
         * Returns the Dynamic Data Source Manager associated with the component.
         */
        get: function () {
            return this._dynamicDataSourceManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "aadHttpClientFactory", {
        /**
         * The instance of AadHttpClientFactory created for this instance of component
         */
        get: function () {
            return this._aadClientFactory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "aadTokenProviderFactory", {
        /**
         * The instance of AadTokenProviderFactory created for this instance of component
         */
        get: function () {
            return this._aadTokenFactory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "msGraphClientFactory", {
        /**
         * The instance of MSGraphClientFactory created for this instance of component
         */
        get: function () {
            return this._msGraphClientFactory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "httpClient", {
        /**
         * The instance of HttpClient created for this instance of component
         */
        get: function () {
            return this._httpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComponentContext.prototype, "spHttpClient", {
        /**
         * The instance of SpHttpClient created for this instance of component
         */
        get: function () {
            return this._spHttpClient;
        },
        enumerable: true,
        configurable: true
    });
    return BaseComponentContext;
}());
export default BaseComponentContext;
//# sourceMappingURL=BaseComponentContext.js.map