"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const semver = require("semver");
const coreBuild = require("@microsoft/gulp-core-build");
const gulp_core_build_typescript_1 = require("@microsoft/gulp-core-build-typescript");
const BuildRig_1 = require("./BuildRig");
const BuildRigConstants_1 = require("./BuildRigConstants");
exports.preCopy = new coreBuild.CopyTask();
exports.postCopy = new coreBuild.CopyTask();
/**
 * This class represents the basic shared build rig for all SPFx Rigs. It defines a few
 * simple sub-tasks, and only registers a "build" task.
 */
class SPBuildRig extends BuildRig_1.BuildRig {
    constructor() {
        super(...arguments);
        this._preBuildTasks = [];
        this._postTypescriptTasks = [];
        this._postBuildTasks = [];
        this._postTelemetryTask = [];
        this._preTelemetryTask = [];
        this.nodeSupportedVersionRange = '>=8.9.4 <9.0.0 || >=10.13.0 <11.0.0';
    }
    initialize(gulp) {
        if (!semver.satisfies(process.version, this.nodeSupportedVersionRange)) {
            throw new Error(`Your dev environment is running NodeJS version ${process.version} which does`
                + ' not meet the requirements for running this tool. This tool requires a version of NodeJS'
                + ` that matches ${this.nodeSupportedVersionRange}`);
        }
        super.initialize(gulp);
    }
    /**
     * Register additional telemetry sub-tasks to run at the end of the sequence
     */
    addPostTelemetryTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postTelemetryTask);
    }
    /**
   * Register additional telemetry sub-tasks to run at the beginning of the sequence
   */
    addPreTelemetryTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._preTelemetryTask);
    }
    /**
     * Register additional sub-tasks to run before the typescript subtask.
     * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks
     */
    addPreBuildTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._preBuildTasks);
    }
    /**
     * Register additional sub-tasks to run after the typescript subtask.
     * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks
     */
    addPostTypescriptTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postTypescriptTasks);
    }
    /**
     * Register additional sub-tasks to run after the typescript subtask.
     * @deprecated
     */
    addBuildTasks(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postTypescriptTasks);
    }
    /**
     * Register additional sub-tasks to run after the entire build.
     * Note, this is meant to be used in a gulpfile.js to inject one-off subtasks
     */
    addPostBuildTask(tasks) {
        this.addTaskOrListOfTasks(tasks, this._postBuildTasks);
    }
    /**
     * Registers the command line arguments which are available for this rig
     * @todo 253519 this code should be moved into gulp-core-build/the task definitions
     */
    getYargs() {
        return super.getYargs()
            .option('locale', {
            describe: 'override the default culture (e.g. "fr-fr")',
            type: 'string'
        })
            .option('lite', {
            alias: 'l',
            describe: 'Speeds up the build by running the minimal set of tasks required to produce an executable output',
            type: 'boolean'
        })
            .command(BuildRigConstants_1.BuildRigConstants.tasks.build, 'build the project')
            .command(BuildRigConstants_1.BuildRigConstants.tasks.default, 'equivalent to bundle');
    }
    /**
     * Register 2 tasks, build and default, which simply copy files, then run typescript and tslint
     */
    getTasks() {
        const result = new Map();
        result.set(BuildRigConstants_1.BuildRigConstants.tasks.build, { executable: this.getBuildTask() });
        result.set(BuildRigConstants_1.BuildRigConstants.tasks.default, { executable: this.getBuildTask() });
        return result;
    }
    /**
     * Override this function to overwrite the "build" task
     */
    getBuildTask() {
        return coreBuild.serial(exports.preCopy, coreBuild.serial(this._preBuildTasks), this.getCoreBuildTask(), coreBuild.serial(this._postBuildTasks), exports.postCopy);
    }
    /**
     * Override this function to redefine the core build loop
     */
    getCoreBuildTask() {
        return coreBuild.parallel(gulp_core_build_typescript_1.tslintCmd, coreBuild.serial(coreBuild.serial(gulp_core_build_typescript_1.tscCmd, gulp_core_build_typescript_1.apiExtractor), coreBuild.serial(...this._postTypescriptTasks)));
    }
    setupSharedConfig() {
        exports.preCopy.name = 'pre-copy';
        exports.postCopy.name = 'post-copy';
    }
    /**
     * This function cleans up the shared config by populating task config properties that depend on other tasks'
     *  user-defined properties.
     */
    finalizeSharedConfig() {
        if (this.args.lite) {
            this._disableTasks(gulp_core_build_typescript_1.tslintCmd);
        }
    }
    addTaskOrListOfTasks(tasks, array) {
        if (tasks.length) {
            array.push(...tasks);
        }
        else {
            array.push(tasks);
        }
    }
}
exports.SPBuildRig = SPBuildRig;
//# sourceMappingURL=SPBuildRig.js.map