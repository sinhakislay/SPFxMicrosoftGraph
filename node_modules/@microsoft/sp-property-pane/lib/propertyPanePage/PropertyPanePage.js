/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PropertyPanePage.tsx
 */
import * as tslib_1 from "tslib";
import { sealed } from '@microsoft/decorators';
import * as React from 'react';
import PropertyPaneGroup from '../propertyPaneGroup/PropertyPaneGroup';
import propertyPanePageStyles from './PropertyPanePage.module.scss';
import PropertyPaneConditionalGroup from '../propertyPaneConditionalGroup/PropertyPaneConditionalGroup';
/**
 * PropertyPane page component
 *
 * @internal
 */
var PropertyPanePage = /** @class */ (function (_super) {
    tslib_1.__extends(PropertyPanePage, _super);
    function PropertyPanePage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyPanePage.prototype.componentDidMount = function () {
        this.props.setContainerDiv(this._propertyPanePage);
    };
    PropertyPanePage.prototype.render = function () {
        var _this = this;
        var index = 0;
        var propertyGroups = this.props.propertyGroups.map(function (group) {
            if (_this._isConditionalGroup(group)) {
                group = group;
                return (React.createElement("div", { key: 'PropertyPaneConditionalGroup' + index },
                    React.createElement(PropertyPaneConditionalGroup, tslib_1.__assign({}, group, _this.props, { index: index++ }))));
            }
            else {
                group = group;
                var groupKey = group.groupName || index.toString();
                return (React.createElement("div", { key: 'PropertyPaneGroup' + index++ },
                    React.createElement(PropertyPaneGroup, tslib_1.__assign({}, _this.props, { key: groupKey, pageNumber: _this.props.pageNumber, isGroupNameHidden: group.isGroupNameHidden, groupName: group.groupName, groupFields: group.groupFields, onChange: _this.props.onChange, properties: _this.props.properties, setEntryState: _this.props.setEntryState, isCollapsed: group.isCollapsed, displayGroupsAsAccordion: _this.props.displayGroupsAsAccordion, propertyPaneGroupStateChanged: _this.props.propertyPaneGroupStateChanged, propertyPanePagesStateMap: _this.props.propertyPanePagesStateMap, dynamicConfiguration: _this.props.dynamicConfiguration }))));
            }
        });
        return (React.createElement("div", { ref: function (c) { return _this._propertyPanePage = c; } },
            this.props.pageDescription
                ? React.createElement("div", { className: propertyPanePageStyles.propertyPanePageDescription, id: 'propertyPaneDescriptionId' }, this.props.pageDescription)
                /* tslint:disable:no-null-keyword */
                : null
        /* tslint:enable:no-null-keyword */
        ,
            propertyGroups));
    };
    PropertyPanePage.prototype._isConditionalGroup = function (group) {
        return 'primaryGroup' in group;
    };
    PropertyPanePage = tslib_1.__decorate([
        sealed
    ], PropertyPanePage);
    return PropertyPanePage;
}(React.Component));
export default PropertyPanePage;
//# sourceMappingURL=PropertyPanePage.js.map