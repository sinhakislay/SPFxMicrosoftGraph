import * as tslib_1 from "tslib";
import { autobind, Link } from '@microsoft/office-ui-fabric-react-bundle';
import * as React from 'react';
import Strings from '../loc/Strings.resx';
import SecondaryGroupConnector from './secondaryGroupConnector/SecondaryGroupConnector';
import styles from './PropertyPaneConditionalGroup.module.scss';
import PropertyPaneGroup from '../propertyPaneGroup/PropertyPaneGroup';
var PropertyPaneConditionalGroup = /** @class */ (function (_super) {
    tslib_1.__extends(PropertyPaneConditionalGroup, _super);
    function PropertyPaneConditionalGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            showSecondaryGroup: _this.props.showSecondaryGroup
        };
        return _this;
    }
    PropertyPaneConditionalGroup.prototype.render = function () {
        var _this = this;
        var showSecondaryGroup = this.state.showSecondaryGroup;
        return (React.createElement("div", null,
            !showSecondaryGroup &&
                React.createElement(SecondaryGroupConnector, { onConnectToSourceClick: function () { return _this._onShowSecondaryClick(); } }),
            React.createElement("div", { className: styles.clear }),
            this._renderGroup(),
            showSecondaryGroup &&
                React.createElement("div", { className: styles.removeConnectionButton },
                    React.createElement(Link, { onClick: this._onShowPrimaryClick }, Strings.DynamicDataRemoveConnectionText))));
    };
    PropertyPaneConditionalGroup.prototype._renderGroup = function () {
        var showSecondaryGroup = this.state.showSecondaryGroup;
        var group = showSecondaryGroup ? this.props.secondaryGroup : this.props.primaryGroup;
        return (React.createElement(PropertyPaneGroup, tslib_1.__assign({}, this.props, { key: group.groupName || this.props.index, pageNumber: this.props.pageNumber, groupName: group.groupName, groupFields: group.groupFields, onChange: this.props.onChange, properties: this.props.properties, setEntryState: this.props.setEntryState, isCollapsed: group.isCollapsed, displayGroupsAsAccordion: this.props.displayGroupsAsAccordion, propertyPaneGroupStateChanged: this.props.propertyPaneGroupStateChanged, propertyPanePagesStateMap: this.props.propertyPanePagesStateMap, dynamicConfiguration: this.props.dynamicConfiguration })));
    };
    /**
     * Prepares the component to show the secondary group of fields.
     */
    PropertyPaneConditionalGroup.prototype._onShowSecondaryClick = function () {
        if (this.props.onShowSecondaryGroup) {
            this.props.onShowSecondaryGroup();
        }
        this.setState({
            showSecondaryGroup: true
        });
    };
    /**
     * Prepares the component to show the primary group fields.
     */
    PropertyPaneConditionalGroup.prototype._onShowPrimaryClick = function () {
        if (this.props.onShowPrimaryGroup) {
            this.props.onShowPrimaryGroup();
        }
        this.setState({
            showSecondaryGroup: false
        });
    };
    tslib_1.__decorate([
        autobind
    ], PropertyPaneConditionalGroup.prototype, "_onShowSecondaryClick", null);
    tslib_1.__decorate([
        autobind
    ], PropertyPaneConditionalGroup.prototype, "_onShowPrimaryClick", null);
    return PropertyPaneConditionalGroup;
}(React.Component));
export default PropertyPaneConditionalGroup;
//# sourceMappingURL=PropertyPaneConditionalGroup.js.map