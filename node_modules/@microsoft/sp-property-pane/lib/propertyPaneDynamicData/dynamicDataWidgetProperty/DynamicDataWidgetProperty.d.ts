import * as React from 'react';
import { IDynamicDataWidgetPropertyProps, IDynamicDataWidgetPropertyState } from './IDynamicDataWidgetProperty';
export default class DynamicDataWidgetProperty extends React.Component<IDynamicDataWidgetPropertyProps, IDynamicDataWidgetPropertyState> {
    private _selectedPropertyText;
    constructor(props: IDynamicDataWidgetPropertyProps);
    /**
     * When a source change is detected we reset the selected property id, unless
     * component provides a property id filter.
     *
     * @param newProps - new props.
     */
    UNSAFE_componentWillReceiveProps(newProps: IDynamicDataWidgetPropertyProps): void;
    render(): React.ReactElement<HTMLDivElement>;
    /**
     * Renders the property dropdown.
     *
     * If property id filter is specified then we hide the property dropdown.
     */
    private _renderPropertyDropdown;
    private _renderWidgetEntries;
    /**
     * Returns the property id, if the component decides to filter by the property id and checks
     * if the current selected source has that proeprty, if yes then it is a valid filter, else returns undefined.
     */
    private _getPropertyIdFilter;
    /**
     * Retuns dropdown options with id-title pairs for all availables properties for a specified DD source.
     */
    private _getPropertyDropdownOptions;
    /**
     * Returns the selected property id.
     *
     * If the currently selected source has a property id, which is specified
     * in the filters, then it is a valid property id to be selected.
     * Else, if the value
     */
    private _getSelectedPropertyId;
}
//# sourceMappingURL=DynamicDataWidgetProperty.d.ts.map