import * as React from 'react';
import { IDynamicDataWidgetEntryProps, IDynamicDataWidgetEntryState } from './IDynamicDataWidgetEntry';
export default class DynamicDataWidgetEntry extends React.Component<IDynamicDataWidgetEntryProps, IDynamicDataWidgetEntryState> {
    private _selectedSubPropertyText;
    private _currentAnnotatedPropertyValue;
    constructor(props: IDynamicDataWidgetEntryProps);
    UNSAFE_componentWillReceiveProps(newProps: IDynamicDataWidgetEntryProps): void;
    /**
     * Renders the entries based on the maxPropertyValueDepth value provided by the component.
     * If the value of maxPropertyValueDepth is invalid then we display a console warning and
     * fall back to the default depth(MAX_SUBPROPERTY_DEPTH).
     * If it is not provided then we fall back to the default depth.
     */
    render(): React.ReactElement<{}>;
    /**
     * Returns the dropdown for the sub property.
     *
     * @param level - Current level of the new dropdown
     * @param propertyPath - Property selected in the previous dropdown, and for which the dropdown
     *  needs to be constructed.
     * @param selectedKey - SelectedKey for the new dropdown.
     */
    private _getDropdownForSubProperty;
    /**
     * Handler for the sub property dropdown.
     *
     * @param option - selected option.
     * @param level - level of the current dropdown among the sub property dropdowns.
     */
    private _onSubPropertySelectionChange;
    /**
     * Returns the dropdown options based on the type of the object passed.
     *
     * @param propValue - Object with which dropdown options are to to be built.
     * @param propertyPath - property path at the current level
     * @param recursiveCall - Indicates whether it is recursive call or not.
     * @param selectedKey - Key to be marked as selected.
     */
    private _getDropdownOptions;
    /**
     * Returns a dropdown option based on the proeprty path and the key.
     * @param propertyPath - property path to the current level
     * @param key - key with which the dropdown option is built.
     * @param selectedKey - Current selected key.
     */
    private _getDropdownOption;
    /**
     * Returns the text for the dropdown option, given the property path
     * @param propertyPath - property path to the current level
     * @param key - key for which the text is required.
     */
    private _getOptionText;
    /**
     * Updates dynamic property's reference using the current state
     */
    private _updateReference;
    /**
     * Returns the max sub-property depth to show on the widget.
     */
    private _getMaxSubPropertyDepth;
    /**
     * Returns the sub property value object based on the given property path.
     * @param propertyPath - property path to the current level
     */
    private _getSubPropertyValueObject;
    private _isSelectedPropertyValueAnArray;
    /**
     * Returns the sub-property path based on the current state. If the sub-property which is in the current
     * state, is not present on the reatltime object, then we return an empty string.
     *
     * @remarks
     * If the sub-property value associated with the subPropertyPath, is an array then the
     * subPropertyPath will have [*] notation appended at the end to support valid JSON Path notation.
     * Hence when reading the property id, we account for that and extract the name accordingly.
     */
    private _getSubPropertyPath;
}
//# sourceMappingURL=DynamicDataWidgetEntry.d.ts.map