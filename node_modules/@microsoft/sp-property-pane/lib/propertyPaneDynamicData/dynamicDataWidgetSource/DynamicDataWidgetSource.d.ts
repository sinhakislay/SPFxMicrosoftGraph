import * as React from 'react';
import { IDynamicDataWidgetSourceProps, IDynamicDataWidgetSourceState } from './IDynamicDataWidgetSource';
export default class DynamicDataWidgetSource extends React.Component<IDynamicDataWidgetSourceProps, IDynamicDataWidgetSourceState> {
    private _selectedSource;
    constructor(props: IDynamicDataWidgetSourceProps);
    render(): React.ReactElement<HTMLDivElement>;
    /**
     * Returns the source id:
     *  - if source id filter is provided, then it takes precedence over everything else.
     *  - else, if all the entries have the same source id, then selected source id would
     *    be that source id. This is because at this stage, source is common for all the
     *    entries.
     *  - else empty string.
     */
    private _getSelectedSourceId;
    /**
     * Renders the sources dropdown.
     */
    private _renderSourceDropdown;
    /**
     * Returns the source id, if the component decides to filter by the source id
     * else undefined.
     */
    private _getSourceIdFilter;
    /**
     * Retuns data source dropdown options with id-title pairs of all DD sources that are currently available.
     */
    private _getDataSourcesDropdownOptions;
    /**
     * Refreshes the Available sources based on the component id provided by the component
     * as part of the filters. If none provided, then it updates '_sources' array with all
     * the available sources.
     */
    private _getAvailableSources;
    private _renderWidgetProperties;
    private _isPropertyShared;
    private _renderWidgetProperty;
}
//# sourceMappingURL=DynamicDataWidgetSource.d.ts.map