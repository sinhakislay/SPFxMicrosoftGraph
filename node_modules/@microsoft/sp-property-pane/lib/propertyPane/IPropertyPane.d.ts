/**
 * PropertyPane interfaces for the developers wanting to configure the web parts.
 */
import { IPropertyPanePage } from '../propertyPanePage/IPropertyPanePage';
import { PropertyPaneLifeCycleEvent } from '../propertyPaneDefinitions/PropertyPaneLifeCycleEvent';
import { IDynamicConfiguration } from '../propertyPaneDynamicData/IDynamicConfiguration';
import { PropertyPaneFieldType } from '../propertyPaneFields/propertyPaneField/IPropertyPaneField';
/**
 * Web part - PropertyPane data contract.
 *
 * @internal
 */
export interface IPropertyPaneData {
    /**
     * Web part instance id.
     */
    webPartId: string;
    /**
     * Title of the web part.
     */
    title: string;
    /**
     * Indicates whether the web part's configuration is reactive or not.
     */
    isReactive?: boolean;
    /**
     * Indicates whether the PropertyPane state should reset or not.
     *
     * 'shouldResetState' will be true in the following cases:
     *    1. When the PropertyPane becomes visible from hidden state.
     *    2. Switching between the web parts while the PropertyPane is open.
     */
    shouldResetState?: boolean;
    /**
     * Notification event fired when the property pane field is changed and
     * has already been validated and modified.
     */
    onPropertyPaneFieldChanged: (propertyName: string, newValue: any, fieldType?: PropertyPaneFieldType) => void;
    /**
     * Single callback for all the possible configuration events of the PropertyPane.
     */
    onConfigurationEvent: (eventType: PropertyPaneLifeCycleEvent) => void;
    /**
     * Event callback fired after the PropertyPane is rendered.
     */
    onRendered: () => void;
    /**
     * Callback to re-render the PropertyPane.
     */
    render?: () => void;
    /**
     * Property bag from the web part.
     */
    properties: any;
    /**
     * Property pane configuration.
     */
    configuration: IPropertyPaneConfiguration;
    /**
     * Dynamic data configuration.
     *
     * @remarks
     * This contract represents all the required dynamic data related configuration
     * for the component. This data is essential in creating the dynamic properties.
     * This is filled by the framework. For example in BaseWebPart class for web parts.
     */
    dynamicConfiguration: IDynamicConfiguration;
}
/**
 * Web part configuration settings
 *
 * @public
 */
export interface IPropertyPaneConfiguration {
    /**
     * Page to be displayed on the PropertyPane.
     */
    currentPage?: number;
    /**
     * Indicates whether the loading indicator should be displayed on top of the property pane or not.
     *
     * @remarks
     * This feature is intended to be used when the user is waiting on a promise to resolve.
     * If set to true, overlay loading indicator appears after 500ms (web part author can override this behavior by
     * using overlayLoadingIndicator property).
     *
     * The reason why we are not showing it immediately is that our intent is to never show the loading
     * indicator. But in real life async requests could take long and it becomes necessary to display a
     * loading indicator to the end user.
     */
    showLoadingIndicator?: boolean;
    /**
     * Number of milliseconds to be delayed before the loading indicator is shown on the property pane.
     * @remarks
     * The default value is 500.
     */
    loadingIndicatorDelayTime?: number;
    /**
     * Total number of pages on the PropertyPane.
     */
    pages: IPropertyPanePage[];
    /**
     * List of properties to debounce the `onPropertyPaneFieldChanged` event.
     *
     * @remarks
     * If your property pane is reactive, the `onPropertyPaneFieldChanged` event will fire with
     * any change to the web part properties. This may lead to jank for some property pane controls
     * or web parts. You can use this configuration property to debounce the `onPropertyPaneFieldChanged`
     * event for the properties listed; other properties will be unaffected.
     *
     * @beta
     */
    debounceProperties?: IPropertyPaneDebounceProperty[];
}
/**
 * Definition of a Property Pane property, which should have the `onPropertyPaneFieldChanged` event
 * be debounced.
 *
 * @beta
 */
export interface IPropertyPaneDebounceProperty {
    /**
     * Property to debounce.
     */
    propertyName: string;
    /**
     * Number of milliseconds to delay the next `onPropertyPaneFieldChanged` event since the last
     * time the event fired for this property.
     *
     * @remarks
     * The default value is 500.
     *
     * @beta
     */
    debouncePeriod?: number;
}
//# sourceMappingURL=IPropertyPane.d.ts.map