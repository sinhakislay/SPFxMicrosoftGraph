/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PropertyPaneGroup.tsx
 */
import * as tslib_1 from "tslib";
import * as React from 'react';
import { sealed } from '@microsoft/decorators';
import * as lodash from '@microsoft/sp-lodash-subset';
import { ActionButton, Button, CompoundButton, Icon, IconButton, Label, Link, PrimaryButton, TextField, autobind, css } from '@microsoft/office-ui-fabric-react-bundle';
import { Toggle } from 'office-ui-fabric-react/lib/components/Toggle/Toggle';
import { TooltipHost } from '@microsoft/office-ui-fabric-react-bundle';
import { TooltipOverflowMode } from 'office-ui-fabric-react/lib/components/Tooltip/TooltipHost.types';
import { Checkbox } from 'office-ui-fabric-react/lib/components/Checkbox';
import { ChoiceGroup } from 'office-ui-fabric-react/lib/components/ChoiceGroup/ChoiceGroup';
import { Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown';
import { DropdownMenuItemType } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown.types';
import { SpinButton } from 'office-ui-fabric-react/lib/components/SpinButton/SpinButton';
import { Slider } from 'office-ui-fabric-react/lib/Slider';
import { DynamicProperty } from '@microsoft/sp-component-base';
import { _EngagementLogger, _LogEntry, _LogType } from '@microsoft/sp-diagnostics';
import KillSwitches from '../common/KillSwitches';
import { PropertyPaneButtonType } from '../propertyPaneFields/propertyPaneButton/IPropertyPaneButton';
import PropertyPaneCustomFieldHost from '../propertyPaneFields/propertyPaneCustomField/PropertyPaneCustomFieldHost';
import { PropertyPaneFieldType } from '../propertyPaneFields/propertyPaneField/IPropertyPaneField';
import propertyPaneGroupStyles from './PropertyPaneGroup.module.scss';
import strings from '../loc/Strings.resx';
import choiceGroupStyles from './PropertyPaneChoiceGroup.module.scss';
import { generateGroupFieldKey, getFixedUpPropValue } from './PropertyPaneGroupHelper';
import DynamicDataWidget from '../propertyPaneDynamicData/dynamicDataWidget/DynamicDataWidget';
var propertyPaneGroupInstance = 0;
/**
 * This is a workaround for fixing breaking changes in TextField in fabric 6 and 7.
 * In the workaround, even you provide a value, TextField still will maintain the state.
 * When value changed, the state will update according to new value.
 * This is same as the TextField in fabric 6.
 */
function WorkaroundTextField(props) {
    var _a = React.useState(props.value), value = _a[0], setValue = _a[1];
    var lastPropsValue = React.useRef(props.value);
    React.useEffect(function () {
        if (props.value !== lastPropsValue.current) {
            setValue(props.value);
            lastPropsValue.current = props.value;
        }
    });
    return React.createElement(TextField, tslib_1.__assign({}, props, { value: value, onChange: function (event, newValue) {
            setValue(newValue);
            if (props.onChange) {
                props.onChange(event, newValue);
            }
        } }));
}
/**
 * React Component: PropertyPaneGroup.
 *
 * @internal
 */
var PropertyPaneGroup = /** @class */ (function (_super) {
    tslib_1.__extends(PropertyPaneGroup, _super);
    /**
     * constructor
     */
    function PropertyPaneGroup(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Initial value of TextFieldPropertyPane.
         */
        _this._initialValue = '';
        _this.state = {
            isDetailsShown: true,
            id: "PropertyPaneGroup-" + propertyPaneGroupInstance++
        };
        // method bindings.
        _this._onHeaderClicked = _this._onHeaderClicked.bind(_this);
        return _this;
    }
    PropertyPaneGroup_1 = PropertyPaneGroup;
    /**
     * Returns the checked status of the incoming groupfield.
     * Today this method expects checkbox and toggle fields.
     * @param propValue - value of the group field from the property bag.
     * @param groupField - actual group field.
     */
    /* tslint:disable-next-line:no-any */
    PropertyPaneGroup._getCheckedStatus = function (propValue, groupField) {
        /* tslint:disable-next-line:no-null-keyword */
        return (propValue !== undefined && propValue !== null) ? propValue : groupField.properties.checked;
    };
    PropertyPaneGroup.prototype.UNSAFE_componentWillMount = function () {
        this.setState({
            isDetailsShown: this._isDetailsShown(this.props)
        });
    };
    PropertyPaneGroup.prototype.UNSAFE_componentWillReceiveProps = function (props) {
        if (props.groupFields && // tslint:disable-next-line:no-any
            // tslint:disable-next-line:no-any
            props.groupFields.some(function (groupField) { return groupField.shouldFocus || false; })) {
            // The group which contains the next focus control should be expanded.
            this.setState({
                isDetailsShown: true
            });
        }
        else {
            this.setState({
                isDetailsShown: this._isDetailsShown(props)
            });
        }
    };
    PropertyPaneGroup.prototype.componentDidMount = function () {
        this._setFocus();
    };
    PropertyPaneGroup.prototype.componentDidUpdate = function () {
        this._setFocus();
    };
    /**
     * render: renders the PropertyPaneGroup component.
     */
    PropertyPaneGroup.prototype.render = function () {
        this._keys = {}; // Reset to ensure consistency and predictable order.
        this._elementRefs = {}; // Reset to ensure consistency.
        return (React.createElement("div", null,
            this._renderGroupName(),
            this._renderGroupContent()));
    };
    /**
     * Returns true if the property pane group should be extended (false if collapsed)
     * @param props - Props to use for calculating the result
     */
    PropertyPaneGroup.prototype._isDetailsShown = function (props) {
        /**
         * Here we are making sure that state of the group is decided by the user actions.
         *  a) If user manually makes any changes to the accordion group's state then those changes are recorded
         *     in the 'propertyPaneGroupsState' dictionary and these recordings will be used for future renderings
         *     of the group.
         *
         *  b) IF there are no changes made by the user to the state of the accordion group then we infer the state
         *     from the property bag which web part sent.
         *
         */
        var isDetailsShown = undefined;
        if (props.propertyPanePagesStateMap[props.pageNumber] &&
            props.groupName) {
            isDetailsShown = props.propertyPanePagesStateMap[props.pageNumber][props.groupName];
        }
        return (isDetailsShown !== undefined) ? isDetailsShown : !props.isCollapsed;
    };
    PropertyPaneGroup.prototype._setFocus = function () {
        var _this = this;
        // This is the hack to workaround a react bug that doesn't set the focus in componentDidMount properly.
        setTimeout(function () {
            if (_this._focusElementKey) {
                var nextFocusedElement = _this._elementRefs[_this._focusElementKey];
                if (nextFocusedElement && nextFocusedElement.focus) {
                    nextFocusedElement.focus();
                    _this._focusElementKey = undefined;
                }
            }
        }, 0);
    };
    PropertyPaneGroup.prototype._renderGroupName = function () {
        var groupNameElem;
        var rtl = document.dir === 'rtl';
        if (!this.props.isGroupNameHidden) {
            if (!this.props.displayGroupsAsAccordion) {
                if (this.props.groupName) {
                    groupNameElem = (React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupHeaderNoAccordion }, this.props.groupName));
                }
            }
            else {
                var chevronIcon = this.state.isDetailsShown ? 'ChevronDown' : rtl ?
                    'ChevronLeft' : 'ChevronRight';
                groupNameElem = (React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupHeaderWithAccordion },
                    React.createElement("button", { className: propertyPaneGroupStyles.propertyPaneGroupHeader, "aria-expanded": this.state.isDetailsShown, onClick: this._onHeaderClicked },
                        React.createElement(Icon, { className: this.state.isDetailsShown ?
                                propertyPaneGroupStyles.propertyPaneGroupHeaderIcon :
                                propertyPaneGroupStyles.propertyPaneGroupHeaderIcon, "data-automation-state": this.state.isDetailsShown ? 'expanded' : 'collapsed', iconName: chevronIcon }),
                        React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupHeaderText }, this.props.groupName))));
            }
        }
        return groupNameElem;
    };
    PropertyPaneGroup.prototype._renderGroupContent = function () {
        var _this = this;
        if (this.state.isDetailsShown) {
            return (React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupContent }, this.props.groupFields.map(function (groupField) { return _this._renderGroupField(groupField); })));
        }
        return undefined; // tslint:disable-line:no-any
    };
    /**
     * _renderGroupField: renders the individual groupField based on the field type.
     */
    /* tslint:disable:no-any */
    PropertyPaneGroup.prototype._renderGroupField = function (groupField) {
        var _this = this;
        var _a;
        var key = generateGroupFieldKey(this._keys, groupField);
        var propValue = getFixedUpPropValue(groupField, this.props.properties, this.props.dynamicConfiguration);
        if (groupField.shouldFocus) {
            this._focusElementKey = key;
        }
        // If group field has explicitly set its own ref function, pass the instance to that ref function.
        var setRef = function (instance) {
            _this._elementRefs[key] = instance; // Key must be a string at this point
            if (typeof groupField.properties.ref === 'function') {
                groupField.properties.ref(instance);
            }
        };
        /* tslint:enable:no-any */
        var groupFieldElement;
        switch (groupField.type) {
            /* CUSTOM FIELD */
            case PropertyPaneFieldType.Custom:
                groupFieldElement = React.createElement(PropertyPaneCustomFieldHost, tslib_1.__assign({}, groupField.properties, { onChanged: function (targetProperty, value) {
                        // enable/disable Save button
                        if (_this.props.setEntryState) {
                            _this.props.setEntryState(targetProperty, true);
                        }
                        if (_this.props.onChange) {
                            _this.props.onChange(targetProperty, value, PropertyPaneFieldType.Custom);
                        }
                    } }));
                break;
            /* TOGGLE */
            case PropertyPaneFieldType.Toggle:
                groupFieldElement =
                    React.createElement(Toggle, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, checked: PropertyPaneGroup_1._getCheckedStatus(propValue, groupField), onText: groupField.properties.onText || strings.ToggleOnText, offText: groupField.properties.offText || strings.ToggleOffText, onChanged: function (value) {
                            _this._onChange(groupField, value);
                        }, "data-automation-id": groupField.properties.dataAutomationId }));
                break;
            /* TEXTFIELD */
            case PropertyPaneFieldType.TextField:
                /**
                 * OUIFR doesn't respect undefined value and hence it was not clearing the text field value.
                 * So, explicitly setting the value to an empty string if propValue and groupField.properties.value
                 * are empty/undefined.
                 */
                var textFieldValue = propValue || groupField.properties.value || '';
                groupFieldElement = React.createElement(WorkaroundTextField, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: textFieldValue, onChange: function (event, value) {
                        // If no validation method, we use onChanged to notify input changed.
                        if (!groupField.properties.onGetErrorMessage) {
                            _this._onChange(groupField, value);
                        }
                    }, onNotifyValidationResult: function (errorMessage, value) {
                        return _this._onNotifyValidationResult(errorMessage, value, groupField, _this.props.setEntryState);
                    }, onFocus: function (ev) { return _this._onFocusTextFieldPropertyPane(ev, groupField.properties); }, onBlur: function (ev) { return _this._onBlurTextFieldPropertyPane(ev, groupField.properties); } }));
                break;
            /* DROPDOWN */
            case PropertyPaneFieldType.Dropdown:
                var dropdownOptions = groupField.properties.options
                    ? groupField.properties.options.map(function (option) { return ({
                        key: option.key,
                        index: option.index,
                        text: option.text,
                        itemType: option.type || DropdownMenuItemType.Normal
                    }); })
                    : [];
                groupFieldElement = React.createElement(Dropdown, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, selectedKey: propValue || groupField.properties.selectedKey, disabled: groupField.properties.isDisabled || groupField.properties.disabled, ariaLabel: groupField.properties.ariaLabel, "aria-posinset": groupField.properties.ariaPositionInSet, "aria-setsize": groupField.properties.ariaSetSize, label: groupField.properties.label, options: dropdownOptions, calloutProps: groupField.properties.calloutProps, onChanged: function (option, index) {
                        _this._onDropDownChange(groupField, option, index);
                    }, "data-automation-id": groupField.properties.dataAutomationId }));
                break;
            /* CHECKBOX */
            case PropertyPaneFieldType.CheckBox:
                groupFieldElement = React.createElement(Checkbox, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, label: groupField.properties.text, checked: PropertyPaneGroup_1._getCheckedStatus(propValue, groupField), disabled: this._isDisabled(groupField), onChange: function (ev, isChecked) {
                        _this._onChange(groupField, isChecked);
                    } }));
                break;
            /* LABEL */
            // (SOX VSO bug #203642)
            // Accessibility doesn't work in PropertyPane, it need change code in fabric-react.
            case PropertyPaneFieldType.Label:
                groupFieldElement = React.createElement(Label, tslib_1.__assign({}, groupField.properties), groupField.properties.text);
                break;
            /* SLIDER */
            case PropertyPaneFieldType.Slider:
                groupFieldElement =
                    React.createElement(Slider, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: propValue || groupField.properties.value, onChange: function (value) {
                            _this._onChange(groupField, value);
                        } }));
                break;
            /* CHOICEGROUP */
            case PropertyPaneFieldType.ChoiceGroup:
                groupField.properties.options.forEach(function (option) {
                    /**
                     * In the below cases, we would like to retain the value of the option.checked.
                     * 1. propValue can be undefined in the cases of non-webparts like the canvas where
                     *    they do not have properties bag.
                     * 2. propValue can be empty/null in both webpart/non-webpart cases.
                     */
                    /* tslint:disable-next-line:no-null-keyword */
                    if (propValue !== undefined && propValue !== '' && propValue !== null) {
                        option.checked = option.key === propValue;
                    }
                    // Normalizing 'isDisabled' property.
                    if (option.hasOwnProperty('disabled') && option.disabled !== undefined) {
                        option.disabled = option.disabled;
                    }
                    // Adding the tooltip only for the image and icon choicegroup options. Adding tooltiphost
                    // to the default choicegroup option(we don't need tooltip here) has an issue where the
                    // text goes behind the input element.
                    if (!option.onRenderLabel && (option.imageSrc || option.iconProps)) {
                        option.onRenderLabel = function (choice) {
                            return (React.createElement(TooltipHost, { overflowMode: TooltipOverflowMode.Parent, calloutProps: { gapSpace: 65 }, content: choice.text },
                                React.createElement("span", { id: choice.labelId, className: 'ms-label' }, choice.text)));
                        };
                    }
                });
                var options = groupField.properties.options.map(function (option) {
                    var propertyPaneChoiceGroupOptionIconProps = option.iconProps, otherOptions = tslib_1.__rest(option, ["iconProps"]);
                    var iconOption = propertyPaneChoiceGroupOptionIconProps
                        ? {
                            iconProps: {
                                iconName: propertyPaneChoiceGroupOptionIconProps.officeFabricIconFontName
                            }
                        }
                        : undefined;
                    var themableSvg = option.themableSvg;
                    var renderOption = themableSvg ?
                        {
                            onRenderField: _this._renderChoiceGroupWithSvg
                        }
                        : undefined;
                    var dataAutomationIdOption = {
                        'data-automation-id': "PropertyPaneChoiceGroup-" + option.key
                    };
                    return lodash.merge({}, otherOptions, iconOption, renderOption, dataAutomationIdOption);
                });
                var choiceGroupClassName = css(propertyPaneGroupStyles.propertyPaneChoiceGroup, (_a = {},
                    _a[propertyPaneGroupStyles.choiceGroupContainsIconOrImage] = options.some(function (option) { return Boolean(option.iconProps || option.imageSrc); }),
                    _a));
                groupFieldElement =
                    React.createElement(ChoiceGroup, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, options: options, className: choiceGroupClassName, onChanged: function (checkedOption) {
                            _this._onChoiceGroupChange(groupField, checkedOption);
                        } }));
                break;
            /* BUTTON */
            case PropertyPaneFieldType.Button:
                var handleClick = function () {
                    var newValue = groupField.properties.onClick(propValue); // tslint:disable-line:no-any
                    _this._onChange(groupField, newValue, PropertyPaneFieldType.Button);
                };
                var iconProps = groupField.properties.icon
                    ? { iconName: groupField.properties.icon }
                    : undefined;
                var buttonType = groupField.properties.buttonType;
                var buttonProps = tslib_1.__assign({}, groupField.properties, { ariaLabel: groupField.properties.ariaLabel || groupField.properties.text, componentRef: setRef, iconProps: iconProps, onClick: handleClick, text: groupField.properties.text });
                if (buttonType) {
                    delete buttonProps.buttonType; // remove since fully removed from Fabric as of 5
                }
                switch (buttonType) {
                    case PropertyPaneButtonType.Primary:
                        groupFieldElement = React.createElement(PrimaryButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case PropertyPaneButtonType.Compound:
                        groupFieldElement = React.createElement(CompoundButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case PropertyPaneButtonType.Command:
                        groupFieldElement = React.createElement(ActionButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case PropertyPaneButtonType.Icon:
                        groupFieldElement = React.createElement(IconButton, tslib_1.__assign({}, buttonProps));
                        break;
                    default:
                        groupFieldElement = React.createElement(Button, tslib_1.__assign({}, buttonProps));
                        break;
                }
                break;
            /* HORIZONTAL RULE */
            case PropertyPaneFieldType.HorizontalRule:
                groupFieldElement =
                    React.createElement("hr", tslib_1.__assign({}, groupField.properties));
                break;
            /* LINK */
            case PropertyPaneFieldType.Link:
                groupFieldElement = React.createElement(Link, tslib_1.__assign({ componentRef: setRef }, groupField.properties, { "data-interception": !KillSwitches.isOpenNewTabKillSwitchActivated() && groupField.properties.target === '_blank'
                        ? 'off'
                        : undefined }), groupField.properties.text);
                break;
            case PropertyPaneFieldType.DynamicField:
                groupFieldElement = React.createElement(DynamicDataWidget, { parentKey: key, type: PropertyPaneFieldType.DynamicField, fieldProperties: groupField.properties, entries: [propValue], dynamicDataProvider: this.props.dynamicConfiguration.dynamicDataProvider, onChange: this._onDynamicDataChanged.bind(this, groupField) });
                break;
            case PropertyPaneFieldType.DynamicFieldSet:
                groupFieldElement = React.createElement(DynamicDataWidget, { parentKey: key, type: PropertyPaneFieldType.DynamicFieldSet, fieldProperties: groupField.properties, entries: propValue, dynamicDataProvider: this.props.dynamicConfiguration.dynamicDataProvider, onChange: this._onDynamicDataChanged.bind(this, groupField) });
                break;
            case PropertyPaneFieldType.DynamicTextField:
                groupFieldElement = this._getDynamicTextField(groupField, propValue, setRef);
                break;
            case PropertyPaneFieldType.SpinButton:
                groupFieldElement = (React.createElement(SpinButton, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: propValue || groupField.properties.defaultValue, onIncrement: function (value) { return _this._onChange(groupField, Number(value) + 1); }, onDecrement: function (value) { return _this._onChange(groupField, Number(value) - 1); } })));
                break;
            default:
                /* tslint:disable:no-null-keyword */
                groupFieldElement = null; // tslint:disable-line:no-any
            /* tslint:enable:no-null-keyword */
        }
        return (React.createElement("div", { key: key, className: propertyPaneGroupStyles.propertyPaneGroupField }, groupFieldElement));
    };
    PropertyPaneGroup.prototype._getDynamicTextField = function (groupField, dataPath, setRef // tslint:disable-line:no-any
    ) {
        var _this = this;
        var textFieldValue = dataPath.reference ?
            '[' + dataPath.reference + ']' :
            (dataPath.value || groupField.properties.value || '');
        return (React.createElement(WorkaroundTextField, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: textFieldValue, onGetErrorMessage: this._validateDynamicDataPath.bind(this, groupField), onNotifyValidationResult: function (errorMessage, value) {
                return _this._onNotifyValidationResult(errorMessage, _this._getDynamicProperty(value, groupField), groupField, _this.props.setEntryState);
            } })));
    };
    PropertyPaneGroup.prototype._renderChoiceGroupWithSvg = function (props) {
        var _a, _b, _c;
        var themableSvg = props.themableSvg;
        return (React.createElement("label", { htmlFor: props.id, className: css('ms-ChoiceField-field', choiceGroupStyles.field, (_a = {},
                _a['ms-ChoiceField-field--image ' + choiceGroupStyles.fieldIsImage] = !!props.imageSrc,
                _a['ms-ChoiceField--icon ' + choiceGroupStyles.fieldIsIcon] = !!props.iconProps,
                _a['is-checked ' + choiceGroupStyles.fieldIsChecked] = props.checked,
                _a['is-disabled ' + choiceGroupStyles.fieldIsDisabled] = props.disabled,
                _a)) },
            props.imageSrc && (React.createElement("div", { className: css('ms-ChoiceField-innerField', choiceGroupStyles.innerField) },
                React.createElement("div", { className: css('ms-ChoiceField-imageWrapper', choiceGroupStyles.imageWrapper, (_b = {},
                        _b['is-hidden ' + choiceGroupStyles.imageWrapperIsHidden] = props.checked,
                        _b)) },
                    React.createElement("div", { className: css('ms-Image', choiceGroupStyles.imageRoot), style: {
                            width: props.imageSize ? props.imageSize.width : undefined,
                            height: props.imageSize ? props.imageSize.height : undefined
                        } }, themableSvg)),
                React.createElement("div", { className: css('ms-ChoiceField-imageWrapper', choiceGroupStyles.imageWrapper, (_c = {},
                        _c['is-hidden ' + choiceGroupStyles.imageWrapperIsHidden] = !props.checked,
                        _c)) },
                    React.createElement("div", { className: css('ms-Image', choiceGroupStyles.imageRoot), style: {
                            width: props.imageSize ? props.imageSize.width : undefined,
                            height: props.imageSize ? props.imageSize.height : undefined
                        } }, themableSvg)))),
            props.iconProps &&
                React.createElement("div", { className: css('ms-ChoiceField-innerField', choiceGroupStyles.innerField) },
                    React.createElement("div", { className: css('ms-ChoiceField-iconWrapper', choiceGroupStyles.iconWrapper) },
                        React.createElement(Icon, tslib_1.__assign({}, props.iconProps)))),
            props.imageSrc || props.iconProps
                ? (React.createElement("div", { className: css('ms-ChoiceField-labelWrapper', choiceGroupStyles.labelWrapper) },
                    React.createElement("span", { id: props.labelId, className: 'ms-Label' }, props.text))) : React.createElement("span", { id: props.labelId, className: 'ms-Label' }, props.text)));
    };
    PropertyPaneGroup.prototype._onNotifyValidationResult = function (errorMessage, value, groupField, /* tslint:disable-line:no-any */ setEntryState) {
        if (setEntryState) {
            setEntryState(groupField.targetProperty, !errorMessage);
        }
        this._onChange(groupField, value);
    };
    /* tslint:disable-next-line:no-any */
    PropertyPaneGroup.prototype._validateDynamicDataPath = function (groupField, value) {
        var errorMessage = '';
        // Call the web part's onGetErrorMessage before the framework validation.
        if (groupField.properties.onGetErrorMessage) {
            errorMessage = groupField.properties.onGetErrorMessage(value);
        }
        // Error message will be null in two cases:
        //  1. When web part's validation returns no error
        //  2. When web part's onGetErrorMessage is not defined
        // In either of the cases framework validation should happen.
        if (!errorMessage) {
            if (!!value.match(PropertyPaneGroup_1.DYNAMICPROPERTY_DEFAULT_REGEX) ||
                !!value.match(PropertyPaneGroup_1.DYNAMICPROPERTY_COMPONENT_REGEX)) {
                var dynamicProperty = this._getDynamicProperty(value, groupField);
                if (!dynamicProperty.tryGetValue()) {
                    // entered string does not return any dynamic data
                    errorMessage = strings.NoDynamicDataReturnedErrorText;
                }
            }
        }
        return errorMessage;
    };
    /**
     * Returns the dynamic property object if any, for the given value.
     *
     * @param value - value of property pane dynamic text field.
     * @param groupField - property pane dyanmic text field.
     */
    PropertyPaneGroup.prototype._getDynamicProperty = function (value, groupField) {
        var dynamicProperty = new DynamicProperty(groupField.properties.dynamicDataProvider, groupField.properties.changeCallback);
        // if the entered string conforms to the dynamic data resource path,
        // then set the reference, else set it as a static value.
        var matches = PropertyPaneGroup_1.DYNAMICPROPERTY_DEFAULT_REGEX.exec(value) ||
            PropertyPaneGroup_1.DYNAMICPROPERTY_COMPONENT_REGEX.exec(value);
        if (matches) {
            dynamicProperty.setReference(matches[1]); // The captured group is at index 1, always.
        }
        else {
            dynamicProperty.setValue(value);
        }
        return dynamicProperty;
    };
    PropertyPaneGroup.prototype._onFocusTextFieldPropertyPane = function (ev, props) {
        /**
         * Record the initial text content when focus entered text field.
         * It is used in blur event handler to compare the content.
         */
        if (props.logName) {
            this._initialValue = ev.target.value;
        }
    };
    PropertyPaneGroup.prototype._onBlurTextFieldPropertyPane = function (ev, props) {
        /**
         * Scenario name:
         * 1. Number of time text field in property pane is entered in edit mode.
         * 2. Distribution of character number added in text field after one edition.
         * 3. Type of edition user take. E.g. Clear, Add or Edit.
         * Signal: Log the value of text area when focus goes out. Seen it as user finished edit.
         * It will not be logged if user doesn't make change.
         */
        if (props.logName) {
            var action = void 0;
            var currentText = ev.target.value;
            var defaultValue = props.value || '';
            if (this._initialValue !== currentText) {
                if (currentText === defaultValue || currentText === '') {
                    action = 'Clear';
                }
                else if (this._initialValue === defaultValue) {
                    action = 'Add';
                }
                else {
                    action = 'Edit';
                }
                _EngagementLogger.logEventWithLogEntry(new _LogEntry(props.logName.moduleName, props.logName.controlName, _LogType.Event, {
                    'action': action,
                    'length': currentText.length.toString()
                }));
            }
        }
    };
    /**
     * Event handler for a ChoiceGroup's onChange event.
     *
  * @params {IPropertyPaneField} groupField: the property pane control which has just invoked onChanged event.
  * @params {IChoiceGroupOption} checkedOption: the option representing the field which is checked now.
                                                                                    */
    PropertyPaneGroup.prototype._onChoiceGroupChange = function (groupField, checkedOption) {
        // Maintain the choice group props before EVERYTHING happens.
        // It is needed because the design flaw of Fabric-React ChoiceGroup. Discussions in PR:
        // https://aka.ms/fociu0
        groupField.properties.options.forEach(function (option) {
            return option.checked = option.key === checkedOption.key;
        });
        this._onChange(groupField, checkedOption.key);
    };
    /**
     * Event handler for a DropDown's onChange event.
     * @todo (SPPPLAT VSO#169096) Change fabric controls to send in a common type for all the events.
     * Then change this method to use the common type.
     */
    PropertyPaneGroup.prototype._onDropDownChange = function (groupField, selectedItem, selectedIndex) {
        // invoke onPropertyChange event
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, selectedItem.key);
        }
    };
    /**
     * Event handler for a group field's onChange event.
     */
    /* tslint:disable-next-line:no-any */
    PropertyPaneGroup.prototype._onChange = function (groupField, /* tslint:disable-line:no-any */ value, /* tslint:disable-line:no-any */ fieldType) {
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, value, fieldType);
        }
        // enable/disable Save button
        if (!groupField.properties.onGetErrorMessage && this.props.setEntryState) {
            this.props.setEntryState(groupField.targetProperty, true);
        }
    };
    /**
     * Event handler for header click.
     */
    PropertyPaneGroup.prototype._onHeaderClicked = function () {
        // We maintain the state of the propertypane group only if the user assigns a name to it.
        if (this.props.groupName && this.props.groupName.length > 0) {
            this.props.propertyPaneGroupStateChanged(this.props.pageNumber, this.props.groupName, !this.state.isDetailsShown);
        }
        this.setState({
            isDetailsShown: !this.state.isDetailsShown
        });
    };
    /**
     * Method to check if the passed in groupfield is disabled or not.
     *
     * To support backward compatibility we are checking for 'isDisabled', 'enabled' and 'isEnabled'
     * property values.
     */
    PropertyPaneGroup.prototype._isDisabled = function (groupField) {
        var disabled = groupField.properties.disabled;
        /**
         * This is to support backward compatibilty.
         * If the 'disabled' proeprty is undefined then we check for the old properties if any and take their
         * value.
         */
        if (disabled === undefined) {
            if (groupField.properties.hasOwnProperty('isDisabled') && groupField.properties.isDisabled !== undefined) {
                disabled = groupField.properties.isDisabled;
            }
            else if (groupField.properties.hasOwnProperty('enabled') && groupField.properties.enabled !== undefined) {
                disabled = !groupField.properties.enabled;
            }
            else if (groupField.properties.hasOwnProperty('isEnabled') && groupField.properties.isEnabled !== undefined) {
                disabled = !groupField.properties.isEnabled;
            }
        }
        return disabled;
    };
    PropertyPaneGroup.prototype._onDynamicDataChanged = function (groupField, targetProperty, newPropValue // tslint:disable-line:no-any
    ) {
        // For dynamic fields, target property is not set at the top level.
        // It is at the entry level. Hence re-assigning the targetProperty here,
        // which is used in for example, BaseWebPart to notify the web part of the change.
        groupField.targetProperty = targetProperty;
        this._onChange(groupField, newPropValue);
    };
    var PropertyPaneGroup_1;
    /**
     * Regex for the dynamic property if it takes the form as in below example:
     * [PageContext:User:Email]
     */
    PropertyPaneGroup.DYNAMICPROPERTY_DEFAULT_REGEX = /^\[(\w+:\w+(?::\w+)?)\]$/;
    /**
     * Regex for the dynamic property if it takes the form as in below example:
     * `${component.manifest.componentType}.${component.manifest.id}.${component.instanceId}`
     */
    /* tslint:disable:max-line-length */
    PropertyPaneGroup.DYNAMICPROPERTY_COMPONENT_REGEX = /^\[([a-zA-Z]+\.([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})\.([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}):\w+(?::\w+)?)\]$/;
    tslib_1.__decorate([
        autobind
    ], PropertyPaneGroup.prototype, "_renderGroupField", null);
    tslib_1.__decorate([
        autobind
    ], PropertyPaneGroup.prototype, "_renderChoiceGroupWithSvg", null);
    tslib_1.__decorate([
        autobind
    ], PropertyPaneGroup.prototype, "_onDynamicDataChanged", null);
    PropertyPaneGroup = PropertyPaneGroup_1 = tslib_1.__decorate([
        sealed
    ], PropertyPaneGroup);
    return PropertyPaneGroup;
}(React.Component));
export default PropertyPaneGroup;
//# sourceMappingURL=PropertyPaneGroup.js.map