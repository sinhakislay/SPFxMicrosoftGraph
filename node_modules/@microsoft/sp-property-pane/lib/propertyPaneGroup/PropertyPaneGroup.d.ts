/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PropertyPaneGroup.tsx
 */
import * as React from 'react';
import { IPropertyPaneGroupProps } from './IPropertyPaneGroup';
/**
 * Interface for PropertyPaneGroup state.
 *
 * @internal
 */
export interface IPropertyPaneGroupState {
    isDetailsShown: boolean;
    id?: string;
}
/**
 * React Component: PropertyPaneGroup.
 *
 * @internal
 */
export default class PropertyPaneGroup extends React.Component<IPropertyPaneGroupProps, IPropertyPaneGroupState> {
    /**
     * Regex for the dynamic property if it takes the form as in below example:
     * [PageContext:User:Email]
     */
    private static DYNAMICPROPERTY_DEFAULT_REGEX;
    /**
     * Regex for the dynamic property if it takes the form as in below example:
     * `${component.manifest.componentType}.${component.manifest.id}.${component.instanceId}`
     */
    private static DYNAMICPROPERTY_COMPONENT_REGEX;
    /**
     * This map is used to store the React instance of controls.
     * public refs is a frozen object and cannot directly assign instance to it.
     * Use
     */
    private _elementRefs;
    /**
     * An map of keys associated with the PropertyPaneGroup fields. Each value represents the
     * smallest unused index for that key. The index will be 0 if the value is undefined.
     * This map is to ensure that keys are unique for the fields within the PropertyPaneGroup.
     * This resets on every render of the PropertyPaneGroup.
     *
     * @private
     * @type {{[key: string]: number}}
     */
    private _keys;
    /**
     * Key of the control that is going to be focused on componentDidMount and componentDidUpdate.
     * This key will be undefined if no control is explicitly specified to be focused.
     */
    private _focusElementKey;
    /**
     * Initial value of TextFieldPropertyPane.
     */
    private _initialValue;
    /**
     * Returns the checked status of the incoming groupfield.
     * Today this method expects checkbox and toggle fields.
     * @param propValue - value of the group field from the property bag.
     * @param groupField - actual group field.
     */
    private static _getCheckedStatus;
    /**
     * constructor
     */
    constructor(props: IPropertyPaneGroupProps);
    UNSAFE_componentWillMount(): void;
    UNSAFE_componentWillReceiveProps(props: IPropertyPaneGroupProps): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    /**
     * render: renders the PropertyPaneGroup component.
     */
    render(): React.ReactElement<{}>;
    /**
     * Returns true if the property pane group should be extended (false if collapsed)
     * @param props - Props to use for calculating the result
     */
    private _isDetailsShown;
    private _setFocus;
    private _renderGroupName;
    private _renderGroupContent;
    /**
     * _renderGroupField: renders the individual groupField based on the field type.
     */
    private _renderGroupField;
    private _getDynamicTextField;
    private _renderChoiceGroupWithSvg;
    private _onNotifyValidationResult;
    private _validateDynamicDataPath;
    /**
     * Returns the dynamic property object if any, for the given value.
     *
     * @param value - value of property pane dynamic text field.
     * @param groupField - property pane dyanmic text field.
     */
    private _getDynamicProperty;
    private _onFocusTextFieldPropertyPane;
    private _onBlurTextFieldPropertyPane;
    /**
     * Event handler for a ChoiceGroup's onChange event.
     *
  * @params {IPropertyPaneField} groupField: the property pane control which has just invoked onChanged event.
  * @params {IChoiceGroupOption} checkedOption: the option representing the field which is checked now.
                                                                                    */
    private _onChoiceGroupChange;
    /**
     * Event handler for a DropDown's onChange event.
     * @todo (SPPPLAT VSO#169096) Change fabric controls to send in a common type for all the events.
     * Then change this method to use the common type.
     */
    private _onDropDownChange;
    /**
     * Event handler for a group field's onChange event.
     */
    private _onChange;
    /**
     * Event handler for header click.
     */
    private _onHeaderClicked;
    /**
     * Method to check if the passed in groupfield is disabled or not.
     *
     * To support backward compatibility we are checking for 'isDisabled', 'enabled' and 'isEnabled'
     * property values.
     */
    private _isDisabled;
    private _onDynamicDataChanged;
}
//# sourceMappingURL=PropertyPaneGroup.d.ts.map