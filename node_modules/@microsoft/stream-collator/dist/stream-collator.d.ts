/**
 * This library enables a tool to display live console output from multiple asynchronous processes,
 * while ensuring that their output does not get jumbled together.
 *
 * @remarks
 *
 * For more info, please see the package {@link https://www.npmjs.com/package/@microsoft/stream-collator
 * | README}.
 *
 * @packageDocumentation
 */


/**
 * A static class which manages the output of multiple threads.
 *
 * @public
 */
export declare class Interleaver {
    private static _tasks;
    private static _activeTask;
    private static _stdout;
    /**
     * Resets the default output stream
     */
    static setStdOut(stdout: {
        write: (text: string) => void;
    }): void;
    /**
     * Registers a task into the list of active buffers and returns a ITaskWriter for the
     * calling process to use to manage output.
     */
    static registerTask(taskName: string, quietMode?: boolean): ITaskWriter;
    /**
     * Removes information about all running tasks
     */
    static reset(): void;
    /**
     * Adds the text to the task's buffer, and writes it to the console if it is the active task
     */
    private static _writeTaskOutput;
    /**
     * Returns the current value of the task's buffer
     */
    private static _getTaskOutput;
    /**
     * Marks a task as completed. There are 3 cases:
     *  - If the task was the active task, also write out all completed, unwritten tasks
     *  - If there is no active task, write the output to the screen
     *  - If there is an active task, mark the task as completed and wait for active task to complete
     */
    private static _completeTask;
    /**
     * Helper function which writes all completed tasks
     */
    private static _writeAllCompletedTasks;
    /**
     * Write and delete task
     */
    private static _writeTask;
    private constructor();
}

/**
 * An writable interface for managing output of simultaneous processes.
 *
 * @public
 */
export declare interface ITaskWriter {
    write(data: string): void;
    writeLine(data: string): void;
    writeError(data: string): void;
    getStdOutput(): string;
    getStdError(): string;
    close(): void;
}

export { }
