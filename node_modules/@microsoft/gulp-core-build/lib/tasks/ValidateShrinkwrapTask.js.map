{"version":3,"file":"ValidateShrinkwrapTask.js","sourceRoot":"","sources":["../../src/tasks/ValidateShrinkwrapTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yCAAsC;AAEtC,6BAA6B;AAC7B,iCAAiC;AAqBjC;;;;;;;;GAQG;AACH,MAAa,sBAAuB,SAAQ,mBAAc;IACxD;;OAEG;IACH;QACE,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,IAAmB,EAAE,gBAAyC;QAC/E,MAAM,iBAAiB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,mCAA4B,CAAC;QAClG,MAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;QAE7F,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE;YACvC,IAAI,CAAC,QAAQ,CAAC,iCAAiC,GAAG,iBAAiB,CAAC,CAAC;YACrE,OAAO;SACR;aAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC7C,IAAI,CAAC,QAAQ,CAAC,iCAAiC,GAAG,gBAAgB,CAAC,CAAC;YACpE,OAAO;SACR;QAED,MAAM,WAAW,GAAgB,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5D,MAAM,cAAc,GAAmB,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,eAAe,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;QAEzE,OAAO;IACT,CAAC;IAEO,SAAS,CAAC,UAAsB,EAAE,aAA4B;QACpE,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBACtC,IAAI,CAAC,QAAQ,CAAC,0BAA0B,GAAG,qBAAqB,CAAC,CAAC;aACnE;iBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzE,IAAI,CAAC,QAAQ,CAAC,0BAA0B,GAAG,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO;4CACtC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACzD;SACF;IACH,CAAC;CACF;AA3CD,wDA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { GulpTask } from './GulpTask';\r\nimport gulpType = require('gulp');\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport { FileConstants } from '@microsoft/node-core-library';\r\n\r\ntype ShrinkwrapDep = { [name: string]: { version: string } };\r\ntype PackageDep = { [name: string]: string };\r\n\r\n/**\r\n * Partial representation of the contents of a `package.json` file\r\n */\r\ninterface INpmPackage {\r\n  dependencies: PackageDep;\r\n  devDependencies: PackageDep;\r\n}\r\n\r\n/**\r\n * Partial representation of the contents of an `npm-shrinkwrap.json` file\r\n */\r\ninterface INpmShrinkwrap {\r\n  dependencies: ShrinkwrapDep;\r\n}\r\n\r\n/**\r\n * This task attempts to detect if package.json file has been updated without the\r\n * shrinkwrap file being regenerated.\r\n *\r\n * It does this by checking that every dependency and dev dependency exists in the\r\n * shrinkwrap file and that the version in the shrinkwrap file satisfies what is\r\n * defined in the package.json file.\r\n * @public\r\n */\r\nexport class ValidateShrinkwrapTask extends GulpTask<void> {\r\n  /**\r\n   * Instantiates an instance of the ValidateShrinkwrap task\r\n   */\r\n  constructor() {\r\n    super('validate-shrinkwrap');\r\n  }\r\n\r\n  /**\r\n   * Iterates through dependencies listed in a project's package.json and ensures that they are all\r\n   * resolvable in the npm-shrinkwrap file.\r\n   */\r\n  public executeTask(gulp: gulpType.Gulp, completeCallback: (error: string) => void): NodeJS.ReadWriteStream | void {\r\n    const pathToPackageJson: string = path.join(this.buildConfig.rootPath, FileConstants.PackageJson);\r\n    const pathToShrinkwrap: string = path.join(this.buildConfig.rootPath, 'npm-shrinkwrap.json');\r\n\r\n    if (!this.fileExists(pathToPackageJson)) {\r\n      this.logError('Failed to find package.json at ' + pathToPackageJson);\r\n      return;\r\n    } else if (!this.fileExists(pathToShrinkwrap)) {\r\n      this.logError('Failed to find package.json at ' + pathToShrinkwrap);\r\n      return;\r\n    }\r\n\r\n    const packageJson: INpmPackage = require(pathToPackageJson);\r\n    const shrinkwrapJson: INpmShrinkwrap = require(pathToShrinkwrap);\r\n\r\n    this._validate(packageJson.dependencies, shrinkwrapJson.dependencies);\r\n    this._validate(packageJson.devDependencies, shrinkwrapJson.dependencies);\r\n\r\n    return;\r\n  }\r\n\r\n  private _validate(packageDep: PackageDep, shrinkwrapDep: ShrinkwrapDep): void {\r\n    for (const pkg in packageDep) {\r\n      if (!shrinkwrapDep.hasOwnProperty(pkg)) {\r\n        this.logError(`Failed to find package ${pkg} in shrinkwrap file`);\r\n      } else if (!semver.satisfies(shrinkwrapDep[pkg].version, packageDep[pkg])) {\r\n        this.logError(`Shrinkwrap version for ${pkg} (${shrinkwrapDep[pkg].version}) does not\r\n          satisfy package.json version of ${packageDep[pkg]}.`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}