{"version":3,"file":"JestTask.js","sourceRoot":"","sources":["../../src/tasks/JestTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\nimport * as path from 'path';\r\nimport { GulpTask} from './GulpTask';\r\nimport { IBuildConfig } from '../IBuildConfig';\r\nimport * as Gulp from 'gulp';\r\nimport * as Jest from 'jest-cli';\r\nimport * as globby from 'globby';\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\n\r\n/**\r\n * Configuration for JestTask\r\n * @alpha\r\n */\r\nexport interface IJestConfig {\r\n  /**\r\n   * Indicate whether this task is enabled. The default value is false.\r\n   */\r\n  isEnabled?: boolean;\r\n\r\n  /**\r\n   * Indicate whether Jest cache is enabled or not.\r\n   */\r\n  cache?: boolean;\r\n\r\n  /**\r\n   * Same as Jest CLI option collectCoverageFrom\r\n   */\r\n  collectCoverageFrom?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option coverage\r\n   */\r\n  coverage?: boolean;\r\n\r\n  /**\r\n   * Same as Jest CLI option coverageReporters\r\n   */\r\n  coverageReporters?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option testPathIgnorePatterns\r\n   */\r\n  testPathIgnorePatterns?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option modulePathIgnorePatterns\r\n   */\r\n  modulePathIgnorePatterns?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option moduleDirectories\r\n   */\r\n  moduleDirectories?: string[];\r\n\r\n  /**\r\n   * Same as Jest CLI option maxWorkers\r\n   */\r\n  maxWorkers?: number;\r\n\r\n  /**\r\n   * Same as Jest CLI option testMatch\r\n   */\r\n  testMatch?: string[];\r\n}\r\n\r\nconst DEFAULT_JEST_CONFIG_FILE_NAME: string = 'jest.config.json';\r\n\r\n/**\r\n * Indicates if jest is enabled\r\n * @internal\r\n * @param rootFolder - package root folder\r\n */\r\nexport function _isJestEnabled(rootFolder: string): boolean {\r\n  const taskConfigFile: string = path.join(rootFolder, 'config', 'jest.json');\r\n  if (!FileSystem.exists(taskConfigFile)) {\r\n    return false;\r\n  }\r\n  const taskConfig: {} = require(taskConfigFile);\r\n  // tslint:disable-next-line:no-string-literal\r\n  return !!taskConfig['isEnabled'];\r\n}\r\n\r\n/**\r\n * This task takes in a map of dest: [sources], and copies items from one place to another.\r\n * @alpha\r\n */\r\nexport class JestTask extends GulpTask<IJestConfig> {\r\n\r\n  constructor() {\r\n    super('jest',\r\n    {\r\n      cache: true,\r\n      collectCoverageFrom: ['lib/**/*.js?(x)', '!lib/**/test/**'],\r\n      coverage: true,\r\n      coverageReporters: ['json', 'html'],\r\n      testPathIgnorePatterns: ['<rootDir>/(src|lib-amd|lib-es6|coverage|build|docs|node_modules)/'],\r\n      // Some unit tests rely on data folders that look like packages.  This confuses jest-hast-map\r\n      // when it tries to scan for package.json files.\r\n      modulePathIgnorePatterns: ['<rootDir>/(src|lib)/.*/package.json']\r\n    });\r\n  }\r\n\r\n  public isEnabled(buildConfig: IBuildConfig): boolean {\r\n    return super.isEnabled(buildConfig) && !!this.taskConfig.isEnabled;\r\n  }\r\n\r\n  /**\r\n   * Loads the z-schema object for this task\r\n   */\r\n  public loadSchema(): Object {\r\n    return require('./jest.schema.json');\r\n  }\r\n\r\n  public executeTask(\r\n    gulp: typeof Gulp,\r\n    completeCallback: (error?: string | Error) => void\r\n  ): void {\r\n    const configFileFullPath: string = path.join(this.buildConfig.rootPath,\r\n      'config', 'jest', DEFAULT_JEST_CONFIG_FILE_NAME);\r\n\r\n    this._copySnapshots(this.buildConfig.srcFolder, this.buildConfig.libFolder);\r\n\r\n    // tslint:disable-next-line:no-any\r\n    const jestConfig: any = {\r\n      ci: this.buildConfig.production,\r\n      cache: !!this.taskConfig.cache,\r\n      config: FileSystem.exists(configFileFullPath) ? configFileFullPath : undefined,\r\n      collectCoverageFrom: this.taskConfig.collectCoverageFrom,\r\n      coverage: this.taskConfig.coverage,\r\n      coverageReporters: this.taskConfig.coverageReporters,\r\n      coverageDirectory: path.join(this.buildConfig.tempFolder, 'coverage'),\r\n      maxWorkers: !!this.taskConfig.maxWorkers ?\r\n        this.taskConfig.maxWorkers : 1,\r\n      moduleDirectories: !!this.taskConfig.moduleDirectories ?\r\n        this.taskConfig.moduleDirectories :\r\n        ['node_modules', this.buildConfig.libFolder],\r\n      reporters: [path.join(__dirname, 'JestReporter.js')],\r\n      rootDir: this.buildConfig.rootPath,\r\n      testMatch: !!this.taskConfig.testMatch ?\r\n        this.taskConfig.testMatch : ['**/*.test.js?(x)'],\r\n      testPathIgnorePatterns: this.taskConfig.testPathIgnorePatterns,\r\n      modulePathIgnorePatterns: this.taskConfig.modulePathIgnorePatterns,\r\n      updateSnapshot: !this.buildConfig.production,\r\n\r\n      // Jest's module resolution for finding jest-environment-jsdom is broken.  See this issue:\r\n      // https://github.com/facebook/jest/issues/5913\r\n      // As a workaround, resolve it for Jest:\r\n      testEnvironment: require.resolve('jest-environment-jsdom'),\r\n      cacheDirectory: path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder, 'jest-cache')\r\n    };\r\n\r\n    // suppress 'Running coverage on untested files...' warning\r\n    const oldTTY: true | undefined = process.stdout.isTTY;\r\n    process.stdout.isTTY = undefined;\r\n\r\n    Jest.runCLI(jestConfig,\r\n      [this.buildConfig.rootPath]).then(\r\n      (result: { results: Jest.AggregatedResult, globalConfig: Jest.GlobalConfig }) => {\r\n        process.stdout.isTTY = oldTTY;\r\n        if (result.results.numFailedTests || result.results.numFailedTestSuites) {\r\n          completeCallback(new Error('Jest tests failed'));\r\n        } else {\r\n          if (!this.buildConfig.production) {\r\n            this._copySnapshots(this.buildConfig.libFolder, this.buildConfig.srcFolder);\r\n          }\r\n          completeCallback();\r\n        }\r\n      },\r\n      (err) => {\r\n        process.stdout.isTTY = oldTTY;\r\n        completeCallback(err);\r\n      });\r\n  }\r\n\r\n  private _copySnapshots(srcRoot: string, destRoot: string): void {\r\n    const pattern: string = path.join(srcRoot, '**/__snapshots__/*.snap');\r\n    globby.sync(pattern).forEach(snapFile => {\r\n      const destination: string = snapFile.replace(srcRoot, destRoot);\r\n      if (this._copyIfMatchExtension(snapFile, destination, '.test.tsx.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.tsx.snap\".`);\r\n      } else if (this._copyIfMatchExtension(snapFile, destination, '.test.ts.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.ts.snap\".`);\r\n      } else if (this._copyIfMatchExtension(snapFile, destination, '.test.jsx.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.jsx.snap\".`);\r\n      } else if (this._copyIfMatchExtension(snapFile, destination, '.test.js.snap')) {\r\n        this.logVerbose(`Snapshot file ${snapFile} is copied to match extension \".test.js.snap\".`);\r\n      } else {\r\n        this.logWarning(`Snapshot file ${snapFile} is not copied because don't find that matching test file.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _copyIfMatchExtension(snapSourceFile: string, destinationFile: string, extension: string): boolean {\r\n    const snapDestFile: string = destinationFile.replace(/\\.test\\..+\\.snap$/, extension);\r\n    const testFileName: string = path.basename(snapDestFile, '.snap');\r\n    const testFile: string = path.resolve(path.dirname(snapDestFile), '..', testFileName); // Up from `__snapshots__`.\r\n    if (FileSystem.exists(testFile)) {\r\n      FileSystem.copyFile({\r\n        sourcePath: snapSourceFile,\r\n        destinationPath: snapDestFile\r\n      });\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}"]}