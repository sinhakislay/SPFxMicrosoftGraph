{"version":3,"file":"GenerateShrinkwrapTask.js","sourceRoot":"","sources":["../../src/tasks/GenerateShrinkwrapTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,+CAA+C;AAC/C,yBAAyB;AACzB,6BAA6B;AAC7B,oEAA0D;AAE1D,yCAAsC;AAEtC;;;;;GAKG;AACH,MAAa,sBAAuB,SAAQ,mBAAc;IACxD;;OAEG;IACH;QACE,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,WAAW,CAChB,IAAmB,EACnB,gBAAkD;QAElD,MAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;QAE7F,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YACrC,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YAC7C,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC9B,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAEpC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC/B,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAErC,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QACzC,aAAa,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;QAE/C,gBAAgB,EAAE,CAAC;QACnB,OAAO;IACT,CAAC;IAEO,sBAAsB,CAAC,UAAkB;QAC/C,IAAI;YACF,8BAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;SACrC;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG;iEACsB,CAAC,CAAC;SAC9D;IACH,CAAC;CACF;AA3CD,wDA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport gulpType = require('gulp');\r\nimport * as child_process from 'child_process';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { GulpTask } from './GulpTask';\r\n\r\n/**\r\n * This provides a convenient way to more consistently generate a shrinkwrap file in\r\n * a desired manner as a gulp task, as there are many consistency issues with just\r\n * running npm-shrinkwrap directly.\r\n * @public\r\n */\r\nexport class GenerateShrinkwrapTask extends GulpTask<void> {\r\n  /**\r\n   * Instantiates a GenerateShrinkwrap task which will regenerate the shrinkwrap for a particular project\r\n   */\r\n  constructor() {\r\n    super('generate-shrinkwrap');\r\n  }\r\n\r\n  /**\r\n   * Runs npm `prune` and `update` on a package before running `shrinkwrap --dev`\r\n   */\r\n  public executeTask(\r\n    gulp: gulpType.Gulp,\r\n    completeCallback: (error?: string | Error) => void\r\n  ): NodeJS.ReadWriteStream | void {\r\n    const pathToShrinkwrap: string = path.join(this.buildConfig.rootPath, 'npm-shrinkwrap.json');\r\n\r\n    if (this.fileExists(pathToShrinkwrap)) {\r\n      this.log(`Remove existing shrinkwrap file.`);\r\n      this._dangerouslyDeletePath(pathToShrinkwrap);\r\n    }\r\n\r\n    this.log(`Running npm prune`);\r\n    child_process.execSync('npm prune');\r\n\r\n    this.log(`Running npm update`);\r\n    child_process.execSync('npm update');\r\n\r\n    this.log(`Running npm shrinkwrap --dev`);\r\n    child_process.execSync('npm shrinkwrap --dev');\r\n\r\n    completeCallback();\r\n    return;\r\n  }\r\n\r\n  private _dangerouslyDeletePath(folderPath: string): void {\r\n    try {\r\n      FileSystem.deleteFolder(folderPath);\r\n    } catch (e) {\r\n      throw new Error(`${e.message}${os.EOL}Often this is caused by a file lock from a process\r\n       such as your text editor, command prompt, or \"gulp serve\"`);\r\n    }\r\n  }\r\n}"]}