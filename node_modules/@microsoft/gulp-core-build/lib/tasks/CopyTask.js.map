{"version":3,"file":"CopyTask.js","sourceRoot":"","sources":["../../src/tasks/CopyTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yCAAsC;AAyBtC;;;GAGG;AACH,MAAa,QAAS,SAAQ,mBAAqB;IACjD;;OAEG;IACH;QACE,KAAK,CACH,MAAM,EACN;YACE,MAAM,EAAE,EAAE;YACV,aAAa,EAAE,IAAI;SACpB,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,UAAU;QACf,OAAO,OAAO,CAAC,oBAAoB,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,WAAW,CAChB,IAAiB,EACjB,gBAAkD;QAElD,4BAA4B;QAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QAClC,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChC,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAClD,2BAA2B;QAE3B,MAAM,UAAU,GAA6B,EAAE,CAAC;QAEhD,KAAK,MAAM,QAAQ,IAAI,MAAM,EAAE;YAC7B,IAAI,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBACnC,MAAM,OAAO,GAAa,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAE3C,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAC5C,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;qBACxC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;qBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC7B,CAAC,CAAC;aACJ;SACF;QAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,gBAAgB,EAAE,CAAC;SACpB;aAAM;YACL,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;IACH,CAAC;CACF;AAvDD,4BAuDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { GulpTask } from './GulpTask';\r\nimport * as Gulp from 'gulp';\r\n\r\n/**\r\n * Configuration for CopyTask\r\n * @public\r\n */\r\nexport interface ICopyConfig {\r\n  /**\r\n   * The list of patterns and the destination which where they should be copied\r\n   */\r\n  copyTo: {\r\n    /**\r\n     * A mapping of destination paths (absolute or relative) to a list of glob pattern matches\r\n     */\r\n    [destPath: string]: string[];\r\n  };\r\n\r\n  /**\r\n   * If true, the files will be copied into a flattened folder. If false, they will retain the original\r\n   * folder structure. True by default.\r\n   */\r\n  shouldFlatten?: boolean;\r\n}\r\n\r\n/**\r\n * This task takes in a map of dest: [sources], and copies items from one place to another.\r\n * @public\r\n */\r\nexport class CopyTask extends GulpTask<ICopyConfig> {\r\n  /**\r\n   * Instantiates a CopyTask with an empty configuration\r\n   */\r\n  constructor() {\r\n    super(\r\n      'copy',\r\n      {\r\n        copyTo: {},\r\n        shouldFlatten: true\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads the z-schema object for this task\r\n   */\r\n  public loadSchema(): Object {\r\n    return require('./copy.schema.json');\r\n  }\r\n\r\n  /**\r\n   * Executes the copy task, which copy files based on the task's Configuration\r\n   */\r\n  public executeTask(\r\n    gulp: typeof Gulp,\r\n    completeCallback: (error?: string | Error) => void\r\n  ): Promise<Object> | NodeJS.ReadWriteStream | void {\r\n    /* tslint:disable:typedef */\r\n    const flatten = require('gulp-flatten');\r\n    const gulpif = require('gulp-if');\r\n    const merge = require('merge2');\r\n    const { copyTo, shouldFlatten } = this.taskConfig;\r\n    /* tslint:enable:typedef */\r\n\r\n    const allStreams: NodeJS.ReadWriteStream[] = [];\r\n\r\n    for (const copyDest in copyTo) {\r\n      if (copyTo.hasOwnProperty(copyDest)) {\r\n        const sources: string[] = copyTo[copyDest];\r\n\r\n        sources.forEach(sourceMatch => allStreams.push(\r\n          gulp.src(sourceMatch, { allowEmpty: true })\r\n            .pipe(gulpif(shouldFlatten, flatten()))\r\n            .pipe(gulp.dest(copyDest))\r\n        ));\r\n      }\r\n    }\r\n\r\n    if (allStreams.length === 0) {\r\n      completeCallback();\r\n    } else {\r\n      return merge(allStreams);\r\n    }\r\n  }\r\n}\r\n"]}