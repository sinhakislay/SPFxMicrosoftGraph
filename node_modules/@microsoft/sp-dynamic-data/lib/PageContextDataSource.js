import { cloneDeep } from '@microsoft/sp-lodash-subset';
import strings from './loc/Strings.resx';
import { DynamicDataUtilities } from './common/DynamicDataUtilities';
/**
 * The page context data source.  It should contain all app-level contextual information
 *
 * @internal
 */
var PageContextDataSource = /** @class */ (function () {
    function PageContextDataSource(serviceScope) {
        var _this = this;
        this._propertyDefinitions = {};
        this._eventDefinitions = {};
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._dynamicDataManager = serviceScope.consume(DynamicDataUtilities.IDynamicDataManagerServiceKey);
            _this._dynamicDataManager.addSource({
                id: PageContextDataSource.pageContextDataSourceId,
                metadata: {
                    title: strings.pageContextDataSourceTitle,
                    description: strings.pageContextDataSourceDescription,
                    componentId: '1c4541f7-5c31-41aa-9fa8-fbc9dc14c0a8',
                    alias: PageContextDataSource._pageContextDataSourceAlias
                },
                getPropertyDefinitions: _this.getPropertyDefinitions.bind(_this),
                getAnnotatedPropertyValue: _this.getAnnotatedPropertyValue.bind(_this),
                getPropertyValue: _this.getPropertyValue.bind(_this),
                sendEvent: _this.sendEvent.bind(_this),
                // Async apis
                getPropertyDefinitionsAsync: _this.getPropertyDefinitionsAsync.bind(_this),
                allowedEventsAsync: _this.allowedEventsAsync.bind(_this),
                getAnnotatedPropertyValueAsync: _this.getAnnotatedPropertyValueAsync.bind(_this),
                getPropertyValueAsync: _this.getPropertyValueAsync.bind(_this)
            });
        });
    }
    /**
     *
     * @param propInfo - The "sub-datasource" property.
     */
    PageContextDataSource.prototype.addPropertyHandler = function (propInfo) {
        var _this = this;
        // add the property references
        propInfo.dynamicDataFunctions.getPropertyDefinitions().forEach(function (propertyDefinition) {
            _this._propertyDefinitions[propertyDefinition.id] = {
                propertyCollectionId: propInfo.id,
                annotatedPropertyValueFunction: propInfo.dynamicDataFunctions.getAnnotatedPropertyValue,
                propertyValueFunction: propInfo.dynamicDataFunctions.getPropertyValue,
                definition: propertyDefinition
            };
        });
        // add the event references
        if (propInfo.dynamicDataFunctions.allowedEvents) {
            propInfo.dynamicDataFunctions.allowedEvents().forEach(function (event) {
                if (propInfo.dynamicDataFunctions.sendEvent) {
                    _this._eventDefinitions[event.name] = {
                        propertyCollectionId: propInfo.id,
                        sendEvent: propInfo.dynamicDataFunctions.sendEvent,
                        definition: event
                    };
                }
            });
        }
        this._dynamicDataManager.notifySourceChanged(PageContextDataSource.pageContextDataSourceId);
    };
    /**
     * Used by the downstream content providers to indicate that their properties have changed.
     * @param propertyId - the propertyId (not the context property info, but the property id) that has changed
     */
    PageContextDataSource.prototype.notifyPropertyChanged = function (propertyId) {
        this._dynamicDataManager.notifyPropertyChanged(PageContextDataSource.pageContextDataSourceId, propertyId);
    };
    /**
     * Remove all of the properties
     *
     * @param id - the id of the data provider that you want to remove.
     */
    PageContextDataSource.prototype.removePropertyHandler = function (id) {
        // First, delete the property references
        for (var prop in this._propertyDefinitions) {
            if (this._propertyDefinitions.hasOwnProperty(prop)) {
                if (this._propertyDefinitions[prop].propertyCollectionId === id) {
                    delete this._propertyDefinitions[prop];
                }
            }
        }
        // then delete the event references
        for (var prop in this._eventDefinitions) {
            if (this._eventDefinitions.hasOwnProperty(prop)) {
                if (this._eventDefinitions[prop].propertyCollectionId === id) {
                    delete this._eventDefinitions[prop];
                }
            }
        }
        this._dynamicDataManager.notifySourceChanged('PageContext');
    };
    /**
     * Iterate over all of the properties we are aware of and return
     * the set
     */
    PageContextDataSource.prototype.getPropertyDefinitions = function () {
        var retVal = [];
        for (var prop in this._propertyDefinitions) {
            if (this._propertyDefinitions.hasOwnProperty(prop)) {
                retVal.push(this._propertyDefinitions[prop].definition);
            }
        }
        return cloneDeep(retVal);
    };
    /**
     * Return the property value for the given property ID.  This will
     * iterate over all the different data providers exposed in the
     * context data source
     *
     * @param propertyId - the name of the property you want the value for
     *
     */
    PageContextDataSource.prototype.getPropertyValue = function (propertyId) {
        if (this._propertyDefinitions[propertyId]) {
            // We know this property - call the correct prop value function for it
            return cloneDeep(this._propertyDefinitions[propertyId].propertyValueFunction(propertyId));
        }
        return undefined;
    };
    /**
     * Returns the annotated value for the property supplied.
     * @param propertyId - The id of the property that contains the annotated value.
     */
    PageContextDataSource.prototype.getAnnotatedPropertyValue = function (propertyId) {
        if (this._propertyDefinitions[propertyId]) {
            // we know this property - call the correct annotated prop value function.
            return cloneDeep(this._propertyDefinitions[propertyId].annotatedPropertyValueFunction(propertyId));
        }
        else {
            return { sampleValue: undefined };
        }
    };
    /**
     * Iterate over all of the properties we are aware of and return
     * the set
     */
    PageContextDataSource.prototype.getPropertyDefinitionsAsync = function () {
        return Promise.resolve(this.getPropertyDefinitions());
    };
    /**
     * Return the property value for the given property ID.  This will
     * iterate over all the different data providers exposed in the
     * context data source
     * @param propertyId - the name of the property you want the value for.
     */
    PageContextDataSource.prototype.getPropertyValueAsync = function (propertyId) {
        return Promise.resolve(this.getPropertyValue(propertyId));
    };
    /**
     * Returns the annotated value for the property supplied.
     * @param propertyId - The id of the property that contains the annotated value.
     */
    PageContextDataSource.prototype.getAnnotatedPropertyValueAsync = function (propertyId) {
        return Promise.resolve(this.getAnnotatedPropertyValue(propertyId));
    };
    /**
     * iterate over all the known event handlers and return the
     * complete set.
     */
    PageContextDataSource.prototype.allowedEventsAsync = function () {
        var retVal = [];
        for (var prop in this._eventDefinitions) {
            if (this._eventDefinitions.hasOwnProperty(prop)) {
                retVal.push(this._eventDefinitions[prop].definition);
            }
        }
        return Promise.resolve(cloneDeep(retVal));
    };
    /**
     * This simply passes the sendEvent method to the appropriate
     * function end point.
     *
     * @param eventName - The event name that is being called
     * @param data - The data to be passed into the event
     */
    PageContextDataSource.prototype.sendEvent = function (eventName, data) {
        if (this._eventDefinitions[eventName]) {
            this._eventDefinitions[eventName].sendEvent(eventName, data);
        }
    };
    /**
     * Id of the PageContext dynamic data source.
     */
    PageContextDataSource.pageContextDataSourceId = 'PageContext';
    PageContextDataSource._pageContextDataSourceAlias = 'Page Context';
    return PageContextDataSource;
}());
export default PageContextDataSource;
//# sourceMappingURL=PageContextDataSource.js.map