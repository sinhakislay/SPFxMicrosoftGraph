import { IsolatedDynamicDataMessageType } from './IsolatedDynamicDataMessageType';
import { _SPEventManager, SPEvent, ServiceKey } from '@microsoft/sp-core-library';
import { SOURCES_CHANGED_EVENT_NAME, SOURCES_RECEIVED } from '../common/DynamicDataEventConstants';
import { DynamicDataEventNames } from '../common/DynamicDataEventNames';
/**
 * Class which handles both transmitting and receiving messages to and from the parent window
 * via PostMessage, when the component is loaded in an isolated environment.
 *
 * @internal
 */
var IsolatedDynamicDataTransceiver = /** @class */ (function () {
    function IsolatedDynamicDataTransceiver(serviceScope) {
        this._onMessageReceivedEvent = new SPEvent(SOURCES_RECEIVED);
        window.addEventListener('message', this._onMessageReceived);
    }
    /**
     * Sends a PostMessage to the parent window.
     *
     * @param eventType - Type of event to send.
     * @param data - Associated data with the event.
     */
    IsolatedDynamicDataTransceiver.sendMessage = function (eventType, data) {
        if (data === void 0) { data = {}; }
        window.parent.postMessage({
            type: eventType,
            data: data
        }, window.parent.origin);
    };
    Object.defineProperty(IsolatedDynamicDataTransceiver.prototype, "messageReceivedEvent", {
        /**
         * Event that gets raised when the list of Dynamic Data Sources gets updated.
         * @eventproperty
         */
        get: function () {
            return this._onMessageReceivedEvent;
        },
        enumerable: true,
        configurable: true
    });
    IsolatedDynamicDataTransceiver.prototype._onMessageReceived = function (event) {
        var currentOrigin = new URL(event.origin).origin;
        var message = event.data;
        /*
         * Handle the received event only if it is targeted to the current window and
         * the message is for the Isolated DynamicData scenario.
         */
        if (currentOrigin.toLowerCase() === event.origin.toLowerCase() && message) {
            var data = message.data;
            switch (message.type) {
                case IsolatedDynamicDataMessageType.SourcesChangedEvent:
                    this._raiseSourcesChangedEvent(data);
                    break;
                case IsolatedDynamicDataMessageType.NotifySourceChanged:
                    this._notifySourceChanged(data);
                    break;
                case IsolatedDynamicDataMessageType.NotifyPropertyChanged:
                    this._notifyPropertyChanged(data);
                    break;
                case IsolatedDynamicDataMessageType.GetPropertyDefinitions:
                    this._notifyPropertyDefinitionsReceived(data);
                    break;
                case IsolatedDynamicDataMessageType.GetPropertyValue:
                    this._notifyPropertyValueReceived(data);
                    break;
                case IsolatedDynamicDataMessageType.GetAnnotatedPropertyValue:
                    this._notifyAnnotatedPropertyValueReceived(data);
            }
        }
    };
    /**
     * Raises an event when the Dynamic Data Sources gets updated.
     * @remarks
     * The event is sticky because sources can be updated before there is anyone listening. This way all clients
     * will get notified that sources have been updated. Further updates are notified in real-time.
     */
    IsolatedDynamicDataTransceiver.prototype._raiseSourcesChangedEvent = function (data) {
        _SPEventManager.instance.raiseStickyEvent(SOURCES_CHANGED_EVENT_NAME, {});
        // Isolated DDM listens to this event to read all the passed in sources
        _SPEventManager.instance.raiseStickyEvent(SOURCES_RECEIVED, data);
    };
    /**
     * Raises an event to all listeners when a Dynamic Data Source has been updated.
     * @param data - Data associated with the message.
     */
    IsolatedDynamicDataTransceiver.prototype._notifySourceChanged = function (data) {
        var sourceId = data.sourceId;
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getAllPropertiesChangedEventName(sourceId), {});
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getAnyPropertyChangedEventName(sourceId), {});
    };
    /**
     * Raises an event to all listeners when a property in a Dynamic Data Source has been updated.
     * @param data - Data associated with the event.
     */
    IsolatedDynamicDataTransceiver.prototype._notifyPropertyChanged = function (data) {
        var sourceId = data.sourceId, propertyId = data.propertyId;
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getPropertyChangedEventName(sourceId, propertyId), {});
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getAnyPropertyChangedEventName(sourceId), {});
    };
    IsolatedDynamicDataTransceiver.prototype._notifyPropertyDefinitionsReceived = function (data) {
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getPropertyDefintionsEventName(data.sourceId), data);
    };
    IsolatedDynamicDataTransceiver.prototype._notifyPropertyValueReceived = function (data) {
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getPropertyValueEventName(data.sourceId, data.propertyId), data);
    };
    IsolatedDynamicDataTransceiver.prototype._notifyAnnotatedPropertyValueReceived = function (data) {
        _SPEventManager.instance.raiseEvent(DynamicDataEventNames.getPropertyValueEventName(data.sourceId, data.propertyId, true), data);
    };
    /**
     * The service key for IsolatedDynamicDataTransceiver service.
     */
    IsolatedDynamicDataTransceiver.serviceKey = ServiceKey.create('sp-dynamic-data:IsolatedDynamicDataTransceiver', IsolatedDynamicDataTransceiver);
    return IsolatedDynamicDataTransceiver;
}());
export { IsolatedDynamicDataTransceiver };
//# sourceMappingURL=IsolatedDynamicDataTransceiver.js.map