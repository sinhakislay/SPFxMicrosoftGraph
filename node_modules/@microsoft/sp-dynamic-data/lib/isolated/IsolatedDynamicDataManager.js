import { SPEvent, Validate, _SPEventManager } from '@microsoft/sp-core-library';
import { IsolatedDynamicDataMessageType } from './IsolatedDynamicDataMessageType';
import { IsolatedDynamicDataTransceiver } from './IsolatedDynamicDataTransceiver';
import { IsolatedProxyDynamicDataSource } from './IsolatedProxyDynamicDataSource';
import { SOURCES_CHANGED_EVENT_NAME } from '../common/DynamicDataEventConstants';
import { DynamicDataEventNames } from '../common/DynamicDataEventNames';
import { SOURCES_RECEIVED } from '../common/DynamicDataEventConstants';
import PageContextDataSource from '../PageContextDataSource';
import IsolatedProxyPageContextSource from './IsolatedProxyPageContextSource';
/**
 * Manager for Dynamic Data in the Isolated scenario.
 * This holds a reference to the Dynamic Data Source and passes the data to the parent window's
 * DynamicDataManager through ParentIframeCommunicator.
 *
 * @remarks
 * Data sources can notify for changes within the data source or for a specific property.
 * Data consumers can register to both changes in a Dynamic Data source and a specific property within the source.
 * There are 3 events to handle this variety of situations:
 *
 * Notifying a change for a property triggers events for the specific propery and for "any" property
 * Notifying a change for the whole source triggers events for for "any" property and "all" properties.
 *
 * Registering for changes in a property register to events for the specific property and "all" properties.
 * Registering for changes in the whole source register to events for "any" properties.
 *
 * This ensures that regardless of how sources and consumers are configured, events will trigger once and only once for
 * each update within the data source.
 *
 * @internal
 */
var IsolatedDynamicDataManager = /** @class */ (function () {
    function IsolatedDynamicDataManager(serviceScope) {
        /**
         * Added the below 3 dummy public properties to make this class extend ISPEventObserver.
         */
        this.instanceId = 'IsolatedDynamicDataManager-instanceId';
        /**
         * Component id for the IsolatedDynamicDataManager.
         */
        this.componentId = 'IsolatedDynamicDataManager-componentId';
        /**
         * Indicates whether the component is disposed or not.
         */
        this.isDisposed = false;
        this._sourcesChangedEvent = new SPEvent(SOURCES_CHANGED_EVENT_NAME);
        this._existingSources = new Map();
        _SPEventManager.instance.registerEvent(SOURCES_RECEIVED, this, this._onAllSourcesReceived.bind(this));
    }
    Object.defineProperty(IsolatedDynamicDataManager.prototype, "sourcesChangedEvent", {
        /**
         * Event that gets raised when the list of Dynamic Data Sources gets updated.
         * @eventproperty
         */
        get: function () {
            return this._sourcesChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Notifies the parent window that the Dynamic Data Source has been updated.
     * @param sourceId - Id of the Dynamic Data Source that is being updated.
     */
    IsolatedDynamicDataManager.prototype.notifySourceChanged = function (sourceId) {
        IsolatedDynamicDataTransceiver.sendMessage(IsolatedDynamicDataMessageType.NotifySourceChanged, {
            sourceId: sourceId
        });
    };
    /**
     * Notifies the parent window that the property in a Dynamic Data Source has been updated.
     * @param sourceId - Id of the Dynamic Data Source whose property is being updated.
     * @param propertyId - Id of the property that is being updated.
     */
    IsolatedDynamicDataManager.prototype.notifyPropertyChanged = function (sourceId, propertyId) {
        IsolatedDynamicDataTransceiver.sendMessage(IsolatedDynamicDataMessageType.NotifyPropertyChanged, {
            sourceId: sourceId,
            propertyId: propertyId
        });
    };
    /**
     * Registers a listener on the parent app's DynamicDataManager for updates
     * on a Dynamic Data Source.
     */
    IsolatedDynamicDataManager.prototype.registerSourceChanged = function (sourceId, observer, callback) {
        var eventNames = [
            DynamicDataEventNames.getAllPropertiesChangedEventName(sourceId),
            DynamicDataEventNames.getAnyPropertyChangedEventName(sourceId)
        ];
        var eventType = IsolatedDynamicDataMessageType.RegisterSourceChanged;
        this._registerUnregisterEvents(true, { eventNames: eventNames, observer: observer, callback: callback }, { eventType: eventType, sourceId: sourceId });
    };
    /**
     * Unregisters a listener for updates on a Dynamic Data Source.
     */
    IsolatedDynamicDataManager.prototype.unregisterSourceChanged = function (sourceId, observer, callback) {
        var eventNames = [
            DynamicDataEventNames.getAllPropertiesChangedEventName(sourceId),
            DynamicDataEventNames.getAnyPropertyChangedEventName(sourceId)
        ];
        var eventType = IsolatedDynamicDataMessageType.UnregisterSourceChanged;
        this._registerUnregisterEvents(false, { eventNames: eventNames, observer: observer, callback: callback }, { eventType: eventType, sourceId: sourceId });
    };
    /**
     * Registers a listener for updates on a Dynamic Data Source.
     */
    IsolatedDynamicDataManager.prototype.registerPropertyChanged = function (sourceId, propertyId, observer, callback) {
        var eventNames = [
            DynamicDataEventNames.getPropertyChangedEventName(sourceId, propertyId),
            DynamicDataEventNames.getAllPropertiesChangedEventName(sourceId)
        ];
        var eventType = IsolatedDynamicDataMessageType.RegisterPropertyChanged;
        this._registerUnregisterEvents(true, { eventNames: eventNames, observer: observer, callback: callback }, { eventType: eventType, sourceId: sourceId, propertyId: propertyId });
    };
    /**
     * Registers a listener for updates on a Dynamic Data Source.
     */
    IsolatedDynamicDataManager.prototype.unregisterPropertyChanged = function (sourceId, propertyId, observer, callback) {
        var eventNames = [
            DynamicDataEventNames.getPropertyChangedEventName(sourceId, propertyId),
            DynamicDataEventNames.getAllPropertiesChangedEventName(sourceId)
        ];
        var eventType = IsolatedDynamicDataMessageType.UnregisterPropertyChanged;
        this._registerUnregisterEvents(false, { eventNames: eventNames, observer: observer, callback: callback }, { eventType: eventType, sourceId: sourceId, propertyId: propertyId });
    };
    /**
     * Sends a message to the parent window, requesting for the current existing sources. When the
     * IsolatedDynamicDataManager receives the new list, it updates the existing list of sources and
     * notifies the listeners that the available sources have changed.
     *
     * @returns - A read-only array with all the existing Dynamic Data Sources.
     */
    IsolatedDynamicDataManager.prototype.getSources = function () {
        IsolatedDynamicDataTransceiver.sendMessage(IsolatedDynamicDataMessageType.AllSources);
        var sources = [];
        this._existingSources.forEach(function (source) { return sources.push(source); });
        return sources;
    };
    /**
     * Returns a Dynamic Data Source based on its id.
     * Returns undefined if the source doesn't exist.
     * @param sourceId - Id of the Dynamic Data Source.
     */
    IsolatedDynamicDataManager.prototype.tryGetSource = function (sourceId) {
        Validate.isNotNullOrUndefined(sourceId, 'sourceId');
        return this._existingSources.get(sourceId);
    };
    /**
     * Sends the new Isolated Dynamic Data Source to the main page, to be added into main page's
     * DynamicDataManager's list of sources.
     * Local PageContext data source is not sent to the main page, as it would be irrelevant,
     * and hence maintained locally. This is because, when asked for the pageContext source from
     * the isolated page, PageContext from isolated page is returned, NOT the main pages'.
     *
     * @remarks
     * Throws an error if the source can't be added.
     *
     * @param source - Dynamic Data Source to add.
     */
    IsolatedDynamicDataManager.prototype.addSource = function (source) {
        if (source.id === PageContextDataSource.pageContextDataSourceId) {
            this._existingSources.set(source.id, new IsolatedProxyPageContextSource(source));
            return;
        }
        IsolatedDynamicDataTransceiver.sendMessage(IsolatedDynamicDataMessageType.AddSource, { source: source });
    };
    /**
     * Removes an existing Dynamic Data Source from the manager.
     * @param id - Id of the Dynamic Data Source.
     */
    IsolatedDynamicDataManager.prototype.removeSource = function (sourceId) {
        IsolatedDynamicDataTransceiver.sendMessage(IsolatedDynamicDataMessageType.RemoveSource, { sourceId: sourceId });
    };
    /**
     * Added this api to make this class extend ISPEventObserver.
     * @internal
     */
    IsolatedDynamicDataManager.prototype.dispose = function () {
        this.isDisposed = true;
    };
    /**
     * Handler to store all the received sources from the parent window.
     * @param message - Incoming message from the parent window's PostMessage.
     */
    IsolatedDynamicDataManager.prototype._onAllSourcesReceived = function (data) {
        var _this = this;
        data.sources.forEach(function (source) {
            var id = source.id;
            if (!_this._existingSources.has(id)) {
                _this._existingSources.set(id, new IsolatedProxyDynamicDataSource(source));
            }
        });
        this._raiseSourcesChangedEvent();
    };
    /**
     * Raises an event when the Dynamic Data Sources gets updated.
     * @remarks
     * The event is sticky because sources can be updated before there is anyone listening. This way all clients
     * will get notified that sources have been updated. Further updates are notified in real-time.
     */
    IsolatedDynamicDataManager.prototype._raiseSourcesChangedEvent = function () {
        _SPEventManager.instance.raiseStickyEvent(SOURCES_CHANGED_EVENT_NAME, {});
    };
    IsolatedDynamicDataManager.prototype._registerUnregisterEvents = function (isRegister, eventData, sendMessageData) {
        var eventNames = eventData.eventNames, observer = eventData.observer, callback = eventData.callback;
        var eventType = sendMessageData.eventType, sourceId = sendMessageData.sourceId, propertyId = sendMessageData.propertyId;
        var methodName = isRegister ? 'registerEvent' : 'unregisterEvent';
        eventNames.forEach(function (eventName) { return _SPEventManager.instance[methodName](eventName, observer, callback); });
        IsolatedDynamicDataTransceiver.sendMessage(eventType, { sourceId: sourceId, propertyId: propertyId, observer: observer });
    };
    return IsolatedDynamicDataManager;
}());
export default IsolatedDynamicDataManager;
//# sourceMappingURL=IsolatedDynamicDataManager.js.map