/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
import { Log } from '@microsoft/sp-core-library';
import DiagnosticsSettingsManager from './DiagnosticsSettingsManager';
import TraceLogger from './Api/Trace/TraceLogger';
/**
 * Diagnostics class initializes the diagnostics pipeline and connect to backend server.
 * Diagnostics contains a set of internal APIs that collects data and reports data via
 * the pipeline. The APIs consist of
 *  -- TraceLogger - for logging diagnostic information
 *
 * @internal
 */
var Diagnostics = /** @class */ (function () {
    function Diagnostics() {
    }
    /**
     * Initializes the diagnostics pipelines
     */
    Diagnostics.initialize = function (settings) {
        if (!Diagnostics._isInitialized) {
            DiagnosticsSettingsManager.initialize(settings);
            TraceLogger.shouldWriteToConsole = settings.enableConsoleLog;
            TraceLogger._addHandler({
                log: function (traceEvent) {
                    Log.info(traceEvent.eventName, "EventName:" + traceEvent.data.toString() + ", ResultCode: " + traceEvent.resultCode);
                },
                verbose: function (traceEvent) {
                    Log.verbose(traceEvent.eventName, traceEvent.data.toString());
                }
            });
            Diagnostics._isInitialized = true;
        }
    };
    Object.defineProperty(Diagnostics, "isInitialized", {
        /**
         * Returns true if diagnostics has been already initialized.
         */
        get: function () {
            return this._isInitialized;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Used to refresh the telemetry settings when they change from the application
     * (i.e. when an in-place navigation to a different site happens)
     * @param settings - the subset of the telemetry settings to be updated
     */
    Diagnostics.updateSettings = function (settings) {
        DiagnosticsSettingsManager.updateSettings(settings);
    };
    Diagnostics._isInitialized = false;
    return Diagnostics;
}());
export default Diagnostics;
//# sourceMappingURL=Diagnostics.js.map