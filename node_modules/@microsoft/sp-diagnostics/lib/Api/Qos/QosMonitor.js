// Copyright (c) Microsoft. All rights reserved.
import { _SPKillSwitch, Guid, Text, Validate } from '@microsoft/sp-core-library';
import TraceLogger from '../Trace/TraceLogger';
import QosLogger from './QosLogger';
import EngagementLogger from '../Engagement/EngagementLogger';
import DiagnosticsSettingsManager from '../../DiagnosticsSettingsManager';
/**
 * Qos logger
 * This class represents the Qos monitor APIs
 *
 * @preapproved @internal
 */
var QosMonitor = /** @class */ (function () {
    /**
   * Creates a QoS monitor (initializes it and logs the start event)
   * @param scenarioName	- Unique name of the QoS scenario
   * You will see start tag: SPPages.ScenarioName.Start
   * @param copyToEngagement - indicate whether this data should be used as Engagement as well.
   */
    function QosMonitor(scenarioName, copyToEngagement) {
        var _a;
        if (copyToEngagement === void 0) { copyToEngagement = false; }
        this._qosResultTypeValue = (_a = {},
            _a[0 /* Success */] = 'Success',
            _a[1 /* Failure */] = 'Failure',
            _a[2 /* ExpectedFailure */] = 'ExpectedFailure',
            _a);
        Validate.isNonemptyString(scenarioName, 'scenarioName');
        this._id = Guid.newGuid().toString();
        if (!this._isDebugSession() ||
            _SPKillSwitch.isActivated(Guid.parse('2f038457-f3a3-40d4-8eb1-c9b4495f2419'), '10/15/2019', 'WEX_SkipNonShipQoSUploadStartEvents')) {
            QosLogger.instance.startQosMonitor(this._id, { name: scenarioName });
        }
        this._scenarioName = scenarioName;
        this._hasEnded = false;
        this._copyToEngagement = copyToEngagement;
    }
    QosMonitor.startRealTimeProcessing = function () {
        if (!QosLogger.instance.shouldProcessInRealTime) {
            this._shouldProcessInRealTime(true);
        }
    };
    /**
     * Only used in unit tests
     * @internal
     */
    QosMonitor._shouldProcessInRealTime = function (processInRealTime) {
        QosLogger.instance.shouldProcessInRealTime = processInRealTime;
    };
    Object.defineProperty(QosMonitor.prototype, "name", {
        get: function () {
            return this._scenarioName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "shortEventName", {
        get: function () {
            return 'Qos';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "resultCode", {
        get: function () {
            return this._endResultCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "resultType", {
        get: function () {
            /* tslint:disable-next-line:no-any */
            return this._endResult;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "extraData", {
        get: function () {
            return this._endExtraData;
        },
        set: function (value) {
            this._endExtraData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "hasEnded", {
        get: function () {
            return this._hasEnded;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * QoS monitor ends with success
     * You will see success tag: SPPages.ScenarioName.Success
     */
    QosMonitor.prototype.writeSuccess = function (extraData) {
        this._writeQosEnd(0 /* Success */, undefined, undefined, extraData);
    };
    /**
     * QoS monitor ends with failure
     * You will see failure tag: SPPages.ScenarioName.<failuretag>.Failure.
     * <failuretag> will be filled with param tagName
     */
    QosMonitor.prototype.writeUnexpectedFailure = function (tagNameSuffix, ex, extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultUnexpected'; }
        this._writeQosEnd(1 /* Failure */, tagNameSuffix, ex, extraData);
    };
    /*
     * QoS monitor ends with expected failure
     * You will see success tag: ModernPublish.RenderPublishPage.<failuretag>.ExpectedFailure.
     * <failuretag> will be filled with param tagName
     */
    QosMonitor.prototype.writeExpectedFailure = function (tagNameSuffix, ex, extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultExpected'; }
        this._writeQosEnd(2 /* ExpectedFailure */, tagNameSuffix, ex, extraData);
    };
    QosMonitor.prototype._writeQosEnd = function (resultType, tagNameSuffix, ex, extraData) {
        if (!this._shouldSkip(resultType)) {
            var enableExtraDataSetter = !_SPKillSwitch.isActivated(QosMonitor._isExtraDataSetterEnabledKSId, '9/11/2019', 'WPLoadExtraData');
            /* tslint:disable-next-line:no-any */
            var existingExtraData = enableExtraDataSetter ? this.extraData : undefined;
            if (DiagnosticsSettingsManager.isInitialized &&
                resultType !== 0 /* Success */) {
                var correlationId = DiagnosticsSettingsManager.settings.correlationId;
                if (!extraData) {
                    extraData = existingExtraData || {};
                }
                // Reuse the existing CorrelationId column for extraData
                extraData.CorrelationId = extraData.correlationId ||
                    extraData.CorrelationId ||
                    correlationId;
            }
            this._endResultCode = tagNameSuffix;
            this._endExtraData = extraData || existingExtraData;
            this._endResult = resultType;
            var endData = {
                resultCode: this._endResultCode,
                resultType: this._endResult,
                error: ex ? ex.message : undefined,
                extraData: this._endExtraData
            };
            QosLogger.instance.writeQosEndResult(this._id, endData);
            this._writeToEngagement();
        }
    };
    QosMonitor.prototype._isDebugSession = function () {
        return !!sessionStorage.getItem('spfx-debug');
    };
    QosMonitor.prototype._shouldSkip = function (result) {
        if (this._hasEnded && (this._endResult !== undefined)) {
            var message = Text.format(QosMonitor.qosMonitorHasEndedErrorString, this.name, this._qosResultTypeValue[this._endResult], this._qosResultTypeValue[result]);
            if (this._endResult !== result) {
                TraceLogger.logError(QosMonitor.logSource, new Error(message));
            }
            if (DEBUG) {
                TraceLogger.logVerbose(QosMonitor.logSource, message, 'skipEnd');
            }
            return true;
        }
        else {
            this._hasEnded = true;
            return this._isDebugSession();
        }
    };
    QosMonitor.prototype._writeToEngagement = function () {
        if (this._shouldWriteToEngagement()) {
            // Engagement name requires certain format. Cannot just use QOS name.
            // Record Qos name in extra data 'qosName'
            var engagementData = {
                name: 'Spfx.Qos.ToEngagement',
                extraData: this.extraData || {}
            };
            // tslint:disable-next-line:no-string-literal
            engagementData.extraData['qosName'] = this.name;
            if (this.resultType) {
                // tslint:disable-next-line:no-string-literal
                engagementData.extraData['qosResultType'] = this._qosResultTypeValue[this.resultType];
            }
            if (this.resultCode) {
                // tslint:disable-next-line:no-string-literal
                engagementData.extraData['qosResultCode'] = this.resultCode;
            }
            EngagementLogger.log(engagementData);
        }
    };
    QosMonitor.prototype._shouldWriteToEngagement = function () {
        var shouldWriteEngagement = this._copyToEngagement;
        return shouldWriteEngagement;
    };
    QosMonitor.logSource = {
        id: 'QosMonitor'
    };
    QosMonitor.qosMonitorHasEndedErrorString = 'QoS monitor \'{0}\' has ended with \'{1}\' already. Ignoring \'{2}\' tag.';
    QosMonitor._isExtraDataSetterEnabledKSId = Guid.parse('6d18e32c-abd5-40c1-8ce1-3fb551418901');
    return QosMonitor;
}());
export default QosMonitor;
//# sourceMappingURL=QosMonitor.js.map