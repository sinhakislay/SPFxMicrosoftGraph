import { QosResultType } from './QosResultType';
/**
 * Qos logger
 * This class represents the Qos monitor APIs
 *
 * @preapproved @internal
 */
export default class QosMonitor {
    private static readonly logSource;
    private static readonly qosMonitorHasEndedErrorString;
    private static _isExtraDataSetterEnabledKSId;
    private _id;
    private _hasEnded;
    private _endExtraData;
    private _scenarioName;
    private _endResultCode;
    private _endResult;
    private _copyToEngagement;
    private _qosResultTypeValue;
    static startRealTimeProcessing(): void;
    /**
     * Only used in unit tests
     * @internal
     */
    static _shouldProcessInRealTime(processInRealTime: boolean): void;
    /**
   * Creates a QoS monitor (initializes it and logs the start event)
   * @param scenarioName	- Unique name of the QoS scenario
   * You will see start tag: SPPages.ScenarioName.Start
   * @param copyToEngagement - indicate whether this data should be used as Engagement as well.
   */
    constructor(scenarioName: string, copyToEngagement?: boolean);
    readonly name: string;
    readonly shortEventName: string;
    readonly resultCode: string;
    readonly resultType: QosResultType;
    extraData: any;
    readonly hasEnded: boolean;
    /**
     * QoS monitor ends with success
     * You will see success tag: SPPages.ScenarioName.Success
     */
    writeSuccess(extraData?: {
        [key: string]: any;
    }): void;
    /**
     * QoS monitor ends with failure
     * You will see failure tag: SPPages.ScenarioName.<failuretag>.Failure.
     * <failuretag> will be filled with param tagName
     */
    writeUnexpectedFailure(tagNameSuffix?: string, ex?: Error, extraData?: {
        [key: string]: any;
    }): void;
    writeExpectedFailure(tagNameSuffix?: string, ex?: Error, extraData?: {
        [key: string]: any;
    }): void;
    private _writeQosEnd;
    private _isDebugSession;
    private _shouldSkip;
    private _writeToEngagement;
    private _shouldWriteToEngagement;
}
//# sourceMappingURL=QosMonitor.d.ts.map