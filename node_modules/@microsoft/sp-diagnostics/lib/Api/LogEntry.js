// Copyright (c) Microsoft. All rights reserved.
import LogFeature from './LogFeature';
import LogType from './LogType';
/**
 * Represents a Log entry
 *
 * @internal
 */
var LogEntry = /** @class */ (function () {
    /**
     * Initializes a new instance of LogEntry
     * @param moduleName - the name of the module
     * @param logFeature - the name of the feature
     * @param logType - the log type
     * @param logProperties - optional property bag
     */
    function LogEntry(moduleName, logFeature, logType, logProperties, isIntentional) {
        if (logFeature === void 0) { logFeature = LogFeature.None; }
        if (logType === void 0) { logType = LogType.Trace; }
        if (moduleName) {
            this.moduleName = moduleName;
            this.logFeature = logFeature;
            this.logType = logType;
            this.logProperties = logProperties;
            this.isIntentional = isIntentional;
        }
        else {
            throw new Error('moduleName is invalid');
        }
    }
    /**
     * convert the log entry to string
     * @returns the serialized log entry
     */
    LogEntry.prototype.toString = function () {
        var serializedLogProps = undefined;
        if (this.logProperties) {
            try {
                serializedLogProps = JSON.stringify(this.logProperties);
            }
            catch (e) {
                console.log('Error happens in toString():' + e);
            }
        }
        return this.moduleName + " | " + this.logFeature + " | " + this.logType + " | " + serializedLogProps;
    };
    return LogEntry;
}());
export default LogEntry;
//# sourceMappingURL=LogEntry.js.map