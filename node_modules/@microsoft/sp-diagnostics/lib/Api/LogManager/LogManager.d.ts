/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
import CircularBuffer from './CircularBuffer';
/**
 * LogManager allows multiple handlers to process log events.
 * It caches the latest 5000 log events. If a handler is just added, the
 * handler is able to get access to the cached events and all incoming events.
 * Dev-dashboard and potentially third-party can use it to get access to events.
 * @internal
 */
export default class LogManager<TLog> {
    private static readonly _maxVerboseLog;
    private _shouldLogInRealTime;
    private _handlers;
    private _events;
    constructor(initialHandler?: (e: TLog) => void);
    /**
     * Event list for delayed asynchronous processing.
     * Events are accumulated in CircularBuffer for processing later.
     */
    readonly events: CircularBuffer<TLog>;
    /**
     * Registers an external logger to logger collection for asynchronous event logging.
     * Logger is registered once.
     */
    addHandler(handler: (e: TLog) => void): void;
    /**
     * Event logging operation for delayed asynchronous processing.
     */
    log(event: TLog): void;
    /**
     * Removes an external logger from logger collection for asynchronous event logging.
     * Logger is registered once.
     */
    removeHandler(handler: (e: TLog) => void): void;
    /**
     * Reset function clears logger collection for asynchronous event logging.
     * All recorded events are purged.
     */
    reset(): void;
    /**
     * Processes all the buffered events using the registered handler.
     */
    processAll(handler: (e: TLog) => void): void;
    private _containsHandler;
    private _processAllEvents;
    private _processLogEvent;
}
//# sourceMappingURL=LogManager.d.ts.map