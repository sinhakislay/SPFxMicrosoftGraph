/**
 * @copyright Microsoft Corporation.All rights reserved.
 * @file EngagementLogger.ts
 * EngagementLogger logger
 */
import LogManager from '../LogManager/LogManager';
import DiagnosticsSettingsManager from '../../DiagnosticsSettingsManager';
/**
 * Engagement logging
 * use *.Click for all the actions triggered by mouse, keyboard, or touch.
 * if you want to add more data or the action is not click but keydown.
 * Use extraData to log the type of action or use extraData to log details wrapped in LogEntry
 * @internal
 */
var EngagementLogger = /** @class */ (function () {
    function EngagementLogger() {
    }
    /**
     * Init function for the passed logger object
     */
    EngagementLogger._addHandler = function (logger) {
        EngagementLogger._handler = function (e) { logger.logData(e); };
        EngagementLogger._logManager.addHandler(EngagementLogger._handler);
    };
    /**
     * Starts processing logs in real time
     */
    EngagementLogger.startRealTimeProcessing = function () {
        if (!this._shouldProcessInRealTime) {
            EngagementLogger._logManager.processAll(EngagementLogger._handler);
            this._shouldProcessInRealTime = true;
        }
    };
    /**
    * Engagement logging
    *
    * @remarks
    * Use *.Click for all the actions triggered by mouse, keyboard, or touch.
    * tagName follows `<Workload>.controlName.actionName` pattern
    * For example, `{ name = "AddButton.Click" }`,
    * this logs `"<Workload>.AddButton.Click"` with default action triggered by mouse, keyboard, or touch.
    * `<Workload>` is set in Telemetry settings
    * `IEngagementData` interface is mapped to a set of enums for standardization of mapping.
    * Add new items to enum in order to register a new item specification.
    * SiteType is defined in SiteType enum
    * CurrentPage is defined in CurrentPage enum
    * Component is defined in Component enum
    * Feature is defined in Feature enum.
    */
    EngagementLogger.log = function (engagementData) {
        EngagementLogger._logEngagementData(engagementData);
    };
    /**
     * Engagement logging
     *
     * @remarks
     * Use *.Click for all the actions triggered by mouse, keyboard, or touch.
     * tagName follows `<Workload>.controlName.actionName` pattern
     * For example, `tagName = "AddButton.Click"`,
     * this logs `"<Workload>.AddButton.Click"` with default action triggered by mouse, keyboard, or touch.
     * `<Workload>` is set in Telemetry settings
     * Use extraData to log the type of action.
     * For example, `actionName = "Keydown"` and `tagName = "ModernPublish.AddButton.Click"`
     * this logs `"<Workload>.AddButton.Click"` with the extraData that it was selected using the Keydown
     */
    EngagementLogger.logEvent = function (tagName, actionName) {
        var logData = { name: tagName };
        if (actionName && actionName.length !== 0) {
            logData.extraData = { action: actionName };
        }
        EngagementLogger._logEngagementData(logData);
    };
    /**
     * Engagement logging with LogEntry
     *
     * @remarks
     * Here is an example:
     * ```
     * {"EngagementName":"SPPage.NavigationAction.SPPageQuickLaunchUpdate"`,
     * "Properties":"{\"message\":\"[NavigationAction] | SPPageQuickLaunchUpdate | 2 | null\"}",
     * "Duration":0,"LogType":0,
     * "ClientTime":1459357627444,"Source":"ClientV2Engagement"}
     * ```
     *
     * NavigationAction is moduleName in LogEntry, SPPageQuickLaunchUpdate is log feature name
     * In this example, SPPage is workload name which is set in Telemetry settings.
     * Do NOT add PII data!
     */
    EngagementLogger.logEventWithLogEntry = function (logEntry) {
        var logData = {
            isIntentional: logEntry.isIntentional,
            name: logEntry.moduleName + '.' + logEntry.logFeature,
            extraData: logEntry.logProperties
        };
        EngagementLogger._logEngagementData(logData, true);
    };
    EngagementLogger._logEngagementData = function (engagementData, isLogEntry) {
        if (isLogEntry === void 0) { isLogEntry = false; }
        if (!engagementData.name || engagementData.name.length === 0) {
            throw new Error('LogEntry is invalid');
        }
        EngagementLogger._checkValidTagName(engagementData, isLogEntry);
        EngagementLogger._addContextData(engagementData);
        EngagementLogger._logManager.log(engagementData);
    };
    // tagName should follow AppName.ControlName.ActionName pattern
    EngagementLogger._checkValidTagName = function (engagementData, isLogEntry) {
        if (isLogEntry === void 0) { isLogEntry = false; }
        if (!isLogEntry) {
            var tagNameRegex = /(\w+)\.(\w+).(\w+)/ig;
            if (tagNameRegex.test(engagementData.name) === false) {
                throw new Error(engagementData.name + " tagName does not follow AppName.ControlName.ActionName pattern");
            }
        }
    };
    EngagementLogger._addContextData = function (data) {
        if (DiagnosticsSettingsManager.isInitialized) {
            var _a = DiagnosticsSettingsManager.settings, listId = _a.listId, listItemUniqueId = _a.listItemUniqueId, siteId = _a.siteId, webId = _a.webId;
            data.siteId = siteId;
            data.webId = webId;
            if (listId) {
                data.listId = listId;
                if (listItemUniqueId) {
                    data.docId = listItemUniqueId;
                }
            }
        }
    };
    EngagementLogger._logManager = new LogManager();
    return EngagementLogger;
}());
export default EngagementLogger;
//# sourceMappingURL=EngagementLogger.js.map