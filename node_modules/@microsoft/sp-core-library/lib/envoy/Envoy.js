/**
 * Envoy is a ProxyHandler implementation designed to proxy an object
 * and all its subproperties. Envoy automatically creates new Proxies
 * when it encounters un-proxied objects in the root object hierarchy.
 *
 * @internal
 */
var Envoy = /** @class */ (function () {
    /**
     * @virtual
     */
    function Envoy() {
    }
    /**
     * Create the root Proxy object.
     *
     * @param args - Optional. Any additional arguments.
     *
     * @returns A new object Proxy.
     *
     * @virtual Override if the constructor is also overridden.
     */
    Envoy.create = function (obj) {
        // Construct a new instance of the child class
        /* tslint:disable-next-line:no-any */
        return new Proxy(obj, new this());
    };
    /**
     * Check whether a value is an object.
     *
     * @param obj - Value to test.
     *
     * @returns A boolean indicating whether obj is an object.
     */
    Envoy._isObject = function (obj) {
        return obj && typeof obj === 'object';
    };
    /**
     * ProxyHandler.get implementation.
     *
     * @param obj - Proxied object.
     * @param prop - The name of the property to get.
     *
     * @returns The value of `prop` on `obj`.
     *
     * @remarks Returns true if prop is `__isProxy__`.
     */
    Envoy.prototype.get = function (obj, prop) {
        // Identify the current object is a proxy
        if (prop === '__isProxy__') {
            return true;
        }
        var retVal = obj[prop];
        if (Envoy._isObject(retVal)) {
            if (!retVal.__isProxy__) {
                retVal = obj[prop] = this.onNewEnvoy(prop, retVal);
            }
        }
        return this.onGetValue(prop, retVal);
    };
    /**
     * ProxyHandler.set implementation.
     *
     * @param obj - Proxied object.
     * @param prop - Property name.
     * @param val - Value to set.
     *
     * @returns A value indicating whether the property was set.
     */
    Envoy.prototype.set = function (obj, prop, val) {
        if (Envoy._isObject(val)) {
            var oldVal = obj[prop];
            // It's possible `oldVal` is not an object but `val` is an object if
            // the value of `prop` is loosely typed
            if (Envoy._isObject(oldVal) && oldVal.__isProxy__) {
                obj[prop] = this.onBeforeSetValue(prop, val);
            }
            else {
                obj[prop] = this.onNewEnvoy(prop, this.onBeforeSetValue(prop, val));
            }
        }
        else {
            obj[prop] = this.onBeforeSetValue(prop, val);
        }
        this.onSetValue(prop, obj[prop]);
        return true;
    };
    /**
     * Invoked when retrieving any value from the proxied
     * object.
     *
     * @param prop - Property name.
     * @param val - Property value.
     *
     * @returns The value to return from the proxy.
     *
     * @remarks onGetValue is not called when checking the
     * `__isProxy__` property.
     *
     * @virtual
     */
    Envoy.prototype.onGetValue = function (prop, val) {
        return val;
    };
    /**
     * Invoked when a new Envoy Proxy needs to be created.
     *
     * @param val - Object to proxy.
     * @param prop - Property name for val on the parent object.
     *
     * @returns A new proxied object.
     *
     * @virtual Override if the constructor is also overridden.
     */
    Envoy.prototype.onNewEnvoy = function (prop, val) {
        // Constructing a new instance of the child class
        /* tslint:disable-next-line: no-any */
        return new Proxy(val, new this.constructor());
    };
    /**
     * Invoked before setting any value on the proxied
     * object.
     *
     * @param prop - Property name.
     * @param val - Property value.
     *
     * @returns The value to set on the proxy.
     *
     * @virtual
     */
    Envoy.prototype.onBeforeSetValue = function (prop, val) {
        return val;
    };
    /**
     * Invoked after a property is set on the proxied object.
     *
     * @param prop - Property name.
     * @param val - Property value.
     *
     * @virtual
     */
    Envoy.prototype.onSetValue = function (prop, val) {
        // default implementation is a no-op
    };
    return Envoy;
}());
export { Envoy };
//# sourceMappingURL=Envoy.js.map