import strings from './SPCoreLibraryStrings.resx';
/**
 * Operations for working with strings that contain text.
 *
 * @remarks
 * The utilities provided by this class are intended to be simple, small, and very
 * broadly applicable.
 *
 * @public
 */
var Text = /** @class */ (function () {
    function Text() {
    }
    /**
     * Format a string by substituting parameters.
     *
     * @remarks
     * This function replaces template parameters such as `"{0}"` or `"{1}"` with the
     * corresponding argument.  If the value is null or undefined, it will be replaced
     * by the word `"null"` or `"undefined"`.  The format string s must not be null or
     * undefined.
     *
     * Usage example:
     *
     * `Text.format("hello {0}!", "world")` will return `"hello world!"`
     */
    Text.format = function (s) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        // We can't use  Validate.isNotNullOrUndefined() here because Validate
        // relies on Text.format() for reporting errors and can cause a stack overflow
        if (s === null) { // tslint:disable-line:no-null-keyword
            throw new Error(strings.isNullValidateError.replace('{0}', 's'));
        }
        if (s === undefined) {
            throw new Error(strings.isUndefinedValidateError.replace('{0}', 's'));
        }
        return s.replace(Text.FORMAT_REGEX, function (match) {
            // The matchID is the numeric value contained in the brackets. {01} gets converted to 1.
            var matchId = parseInt(match.replace(Text.FORMAT_ARGS_REGEX, ''), 10);
            // The matchValue is the string contained in the values' matchId index.
            // If matchId = 1 and values = ['the', 'bear', 'ate'], then matchValue = 'bear'
            var matchValue = values[matchId];
            // If you index outside of the values array, return the original matchId in brackets
            if (matchId >= values.length || matchId < 0) {
                matchValue = match;
            }
            // Logic to convert null and undefined into readable strings
            /* tslint:disable-next-line:no-null-keyword */
            if (matchValue === null) {
                matchValue = 'null';
            }
            else if (matchValue === undefined) {
                matchValue = 'undefined';
            }
            return matchValue;
        });
    };
    /**
     * Returns the input string, with all instances of `searchValue` replaced by `replaceValue`.
     *
     * @remarks
     * Note that JavaScript's `string.replace()` only replaces the first match, unless a
     * global RegExp is provided.
     *
     * @param input         - The string to be modified
     * @param searchValue   - The value to search for
     * @param replaceValue  - The replacement text
     */
    Text.replaceAll = function (input, searchValue, replaceValue) {
        return input.split(searchValue).join(replaceValue);
    };
    // Regex that finds {#} so it can be replaced by the arguments in string format
    Text.FORMAT_REGEX = /\{\d+\}/g;
    // Regex that finds { and } so they can be removed on a lookup for string format
    Text.FORMAT_ARGS_REGEX = /[\{\}]/g;
    return Text;
}());
export default Text;
//# sourceMappingURL=Text.js.map