/**
 * Indicates the general type of environment where the SharePoint Framework is running.
 *
 * @remarks
 * This enum is used by the {@link Environment."type"} property.  It provides a way to distinguish
 * environments where certain functionality may be limited or disabled.
 *
 * @public
 */
export declare enum EnvironmentType {
    /**
     * Indicates that the SharePoint Framework is running inside a test harness, e.g. a unit test.
     * There may be no user interaction at all, and network access in general may be disabled.
     */
    Test = 0,
    /**
     * Indicates that the SharePoint Framework is running on a page from a "localhost" web server,
     * for example the SharePoint Workbench when hosted via "gulp serve".  SharePoint REST API calls
     * will not be available, and in general network access may not authenticate properly.
     * Certain page context information may be using mock values for testing.
     */
    Local = 1,
    /**
     * Indicates that the SharePoint Framework is running on a modern SharePoint web page,
     * with full framework functionality.  This is the normal usage scenario.
     */
    SharePoint = 2,
    /**
     * Indicates that the framework was hosted by a classic server-rendered SharePoint page.
     * Some functionality may be limited, e.g. various extensibility APIs may not be supported.
     */
    ClassicSharePoint = 3
}
/**
 * Interface for properties necessary for building a Environment object.
 * @internal
 */
export interface IEnvironmentData {
    /** {@inheritDoc Environment."type"} */
    type: EnvironmentType;
}
/**
 * Information about the system environment where the SharePoint Framework is running.
 * @public
 */
export default class Environment {
    private static _type;
    /**
     * This is called once by the system during startup to initialize the Environment object.
     * @internal
     */
    static _initialize(data: IEnvironmentData): void;
    /**
     * Indicates the general type of environment where the SharePoint Framework is running.
     */
    static readonly type: EnvironmentType;
}
//# sourceMappingURL=Environment.d.ts.map