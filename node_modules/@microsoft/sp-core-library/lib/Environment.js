import Validate from './Validate';
import strings from './SPCoreLibraryStrings.resx';
/**
 * Indicates the general type of environment where the SharePoint Framework is running.
 *
 * @remarks
 * This enum is used by the {@link Environment."type"} property.  It provides a way to distinguish
 * environments where certain functionality may be limited or disabled.
 *
 * @public
 */
export var EnvironmentType;
(function (EnvironmentType) {
    /**
     * Indicates that the SharePoint Framework is running inside a test harness, e.g. a unit test.
     * There may be no user interaction at all, and network access in general may be disabled.
     */
    EnvironmentType[EnvironmentType["Test"] = 0] = "Test";
    /**
     * Indicates that the SharePoint Framework is running on a page from a "localhost" web server,
     * for example the SharePoint Workbench when hosted via "gulp serve".  SharePoint REST API calls
     * will not be available, and in general network access may not authenticate properly.
     * Certain page context information may be using mock values for testing.
     */
    EnvironmentType[EnvironmentType["Local"] = 1] = "Local";
    /**
     * Indicates that the SharePoint Framework is running on a modern SharePoint web page,
     * with full framework functionality.  This is the normal usage scenario.
     */
    EnvironmentType[EnvironmentType["SharePoint"] = 2] = "SharePoint";
    /**
     * Indicates that the framework was hosted by a classic server-rendered SharePoint page.
     * Some functionality may be limited, e.g. various extensibility APIs may not be supported.
     */
    EnvironmentType[EnvironmentType["ClassicSharePoint"] = 3] = "ClassicSharePoint";
})(EnvironmentType || (EnvironmentType = {}));
/**
 * Information about the system environment where the SharePoint Framework is running.
 * @public
 */
var Environment = /** @class */ (function () {
    function Environment() {
    }
    /**
     * This is called once by the system during startup to initialize the Environment object.
     * @internal
     */
    Environment._initialize = function (data) {
        Validate.isNotNullOrUndefined(data, 'data');
        Environment._type = data.type;
        Validate.isNotNullOrUndefined(Environment._type, 'environmentType');
        if (!EnvironmentType.hasOwnProperty(data.type.toString())) {
            throw new Error(strings.invalidEnvironmentTypeError);
        }
    };
    Object.defineProperty(Environment, "type", {
        /**
         * Indicates the general type of environment where the SharePoint Framework is running.
         */
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    return Environment;
}());
export default Environment;
//# sourceMappingURL=Environment.js.map