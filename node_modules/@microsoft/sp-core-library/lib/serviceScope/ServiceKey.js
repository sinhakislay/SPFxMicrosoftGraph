import Text from '../Text';
import Validate from '../Validate';
var SERVICEKEY_LASTID_WINDOW_VAR = '_SPFX_ServiceKey_lastId';
/**
 * The ServiceKey is a lookup key that is used when calling {@link ServiceScope.consume}
 * to fetch a dependency.
 *
 * @remarks
 * Every service key also provides a default implementation of the dependency, which will
 * be automatically created in the root scope if the dependency is not found.  Providing a default
 * implementation ensures that new dependencies can be safely introduced without inadvertently
 * breaking components that are loaded by an older host that does not provide the new dependency.
 *
 * @public
 */
var ServiceKey = /** @class */ (function () {
    function ServiceKey(id, name, defaultCreator) {
        this.id = id;
        this.name = name;
        this.defaultCreator = defaultCreator;
    }
    /**
     * Constructs a new ServiceKey whose default implementation will be a new instance of
     * a TypeScript class that accepts the standard constructor parameter.
     *
     * @remarks
     * If you want to specify custom constructor parameters, use {@link ServiceKey.createCustom}
     * instead.
     *
     * @param name - A name such as "my-package.IMyService" which should be unique across packages.
     * @param serviceClass - the TypeScript class that implements the service.
     * @returns the newly created ServiceKey
     */
    ServiceKey.create = function (name, serviceClass) {
        // (createCustom() will validate name)
        Validate.isNotNullOrUndefined(serviceClass, 'serviceClass');
        return ServiceKey.createCustom(name, function (serviceScope) {
            return new serviceClass(serviceScope);
        });
    };
    /**
     * Constructs a new ServiceKey whose default implementation will be obtained
     * by invoking the specified callback.
     *
     * @param name - A name such as "my-package.IMyService" which should be unique across packages.
     * @param defaultCreator - a callback that returns an object that implements the T interface
     * @returns the newly created service key
     */
    ServiceKey.createCustom = function (name, defaultCreator) {
        Validate.isNonemptyString(name, 'name');
        Validate.isNotNullOrUndefined(defaultCreator, 'defaultCreator');
        var numericId;
        var lastId = window[SERVICEKEY_LASTID_WINDOW_VAR];
        if (lastId !== undefined && typeof (lastId) === 'number') {
            numericId = lastId + 1;
            // It seems inconceivable that we would increment all the way up to MAX_SAFE_INTEGER,
            // but nonetheless let's make sure that incrementing is actually producing something new
            if (numericId === lastId) {
                throw new Error('ServiceKey.createCustom() counter overflow');
            }
        }
        else {
            numericId = 1;
        }
        window[SERVICEKEY_LASTID_WINDOW_VAR] = numericId;
        // For example if name="sp-http:SPHttpClient 2" and numericId=5 then the generated ID would be:
        // "sp-http:SPHttpClient2_5".
        var id = Text.replaceAll(name, ' ', '') + '_' + numericId;
        return new ServiceKey(id, name, defaultCreator);
    };
    return ServiceKey;
}());
export default ServiceKey;
//# sourceMappingURL=ServiceKey.js.map