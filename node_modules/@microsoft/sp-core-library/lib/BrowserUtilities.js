import SPKillSwitch from './SPKillSwitch';
import Guid from './Guid';
/**
 * BrowserUtilities contains common utilities for browser related operations.
 * @internal
 */
var BrowserUtilities = /** @class */ (function () {
    function BrowserUtilities() {
    }
    BrowserUtilities.isWebViewHosted = function () {
        if (typeof BrowserUtilities._isWebViewHosted === 'undefined') {
            BrowserUtilities._isWebViewHosted =
                BrowserUtilities.isMobileWebView() ||
                    BrowserUtilities.isTeamsWebViewHosted() ||
                    (/[?&]env=WebView/.test(location.search));
        }
        return BrowserUtilities._isWebViewHosted;
    };
    BrowserUtilities.isTeamsWebViewHosted = function () {
        if (typeof BrowserUtilities._isTeamsWebView === 'undefined') {
            var ua = navigator.userAgent;
            BrowserUtilities._isTeamsWebView =
                /* Electron WebView (scoped to Microsoft Teams for now) */
                // tslint:disable-next-line:max-line-length
                /Teams\/((?:(\d+)\.)?(?:(\d+)\.)?(?:(\d+)\.\d+)).* Electron\/((?:(\d+)\.)?(?:(\d+)\.)?(?:(\d+)\.\d+))/.test(ua) ||
                    (/[?&]env=TeamsWebView/.test(location.search));
        }
        return BrowserUtilities._isTeamsWebView;
    };
    /**
     * When SharePoint is hosted in Teams, it can either be in :
     *    1. Teams Desktop Client: Electron Webview
     *    2. Teams in Browser: Iframe
     *
     * Desktop Client is identifiable via the user-agent.
     * However, for Teams in Browser, since we cannot leverage user-agent,
     * we'll be using window.name property to get the host iframe's name,
     * which when equal to "embedded-page-container" lets us know that
     * SharePoint is currently running in Teams in Browser.
     */
    BrowserUtilities.isTeamsBrowserHosted = function () {
        if (typeof BrowserUtilities._isTeamsBrowser === 'undefined') {
            BrowserUtilities._isTeamsBrowser = false;
            try {
                BrowserUtilities._isTeamsBrowser = (window.name === 'embedded-page-container');
            }
            catch (e) { /* no-op */ }
        }
        return BrowserUtilities._isTeamsBrowser;
    };
    /**
     * Return true, if SharePoint is hosted in Teams, either Webview or Browser
     */
    BrowserUtilities.isTeamsHosted = function () {
        if (SPKillSwitch.isActivated(Guid.parse('0100eb79-e269-4683-b118-81ca4eaaa794'), '10/16/2019', 'Check SharePoint hosted in Teams in Browser')) {
            return BrowserUtilities.isTeamsWebViewHosted();
        }
        return BrowserUtilities.isTeamsWebViewHosted() || BrowserUtilities.isTeamsBrowserHosted();
    };
    BrowserUtilities.isSharePointiOSApp = function () {
        if (typeof BrowserUtilities._isSharePointiOSApp === 'undefined') {
            var userAgent = navigator.userAgent;
            BrowserUtilities._isSharePointiOSApp =
                /* iOS WebView */
                /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/.test(userAgent) ||
                    BrowserUtilities._isTestMobileWebView();
            if (this._isMobileIntuneBrowser(userAgent)) {
                BrowserUtilities._isSharePointiOSApp = false;
            }
        }
        return BrowserUtilities._isSharePointiOSApp;
    };
    BrowserUtilities.isMobileWebView = function () {
        if (typeof BrowserUtilities._isMobileWebView === 'undefined') {
            var ua = navigator.userAgent;
            BrowserUtilities._isMobileWebView =
                /* iOS WebView */
                this.isSharePointiOSApp() ||
                    /* Android WebView (Lollipop+older) */
                    /(Android ).*; wv/.test(ua) ||
                    /(Android ).* Version\/((?:(\d+)\.)?(?:(\d+)\.)?(?:(\d+)\.\d+))/.test(ua) ||
                    /* Windows WebView (C# and JavaScript-based apps) */
                    ((navigator.userAgent.indexOf(BrowserUtilities._sharePointDesktopString) === -1) &&
                        (/(Windows ).*; WebView\/((?:(\d+)\.)?(?:(\d+)\.)?(?:(\d+)\.\d+))/.test(ua) ||
                            /(Windows ).*; MSAppHost\/((?:(\d+)\.)?(?:(\d+)\.)?(?:(\d+)\.\d+))/.test(ua))) ||
                    BrowserUtilities._isTestMobileWebView();
            if (this._isMobileIntuneBrowser(navigator.userAgent)) {
                BrowserUtilities._isMobileWebView = false;
            }
        }
        return BrowserUtilities._isMobileWebView;
    };
    BrowserUtilities.isMobileBrowser = function () {
        if (typeof BrowserUtilities._isMobileBrowser === 'undefined') {
            //
            // NOTE:
            // Currently matching hosted Android WebKit, iPhone/iPod Mobile Safari and IE Mobile.
            // May be extended to cover other mobile browsers as necessary. Not a perfect science.
            //
            BrowserUtilities._isMobileBrowser = BrowserUtilities.isWebViewHosted() ||
                /(Android|iPhone|iPod|IEMobile|BlackBerry)/.test(navigator.userAgent) ||
                (/[?&]env=Mobile/.test(location.search));
        }
        return BrowserUtilities._isMobileBrowser;
    };
    BrowserUtilities.isEmbedded = function () {
        if (typeof BrowserUtilities._isEmbedded === 'undefined') {
            if (BrowserUtilities.isWebViewHosted() || /[?&]PageVersion=[^&]/.test(location.search)) {
                BrowserUtilities._isEmbedded = true;
            }
            else if (navigator.userAgent.indexOf('ManagedBrowser') > -1) {
                BrowserUtilities._isEmbedded = false;
            }
            else {
                try {
                    var isIframeOrPhantomJS = (window.parent &&
                        window.parent !== window &&
                        navigator.userAgent.indexOf('PhantomJS/') === -1);
                    BrowserUtilities._isEmbedded = isIframeOrPhantomJS || /[?&]env=Embedded/.test(location.search);
                }
                catch (e) {
                    BrowserUtilities._handleErrorForParentWindowCheck();
                }
            }
        }
        return BrowserUtilities._isEmbedded;
    };
    BrowserUtilities.supportsServiceWorker = function () {
        return BrowserUtilities._serviceWorkerProperty in navigator;
    };
    BrowserUtilities.supportsNavigationPreload = function () {
        // ServiceWorkerRegistration is available on global window object
        return !!window.ServiceWorkerRegistration &&
            BrowserUtilities._navigationPreloadProperty in window.ServiceWorkerRegistration.prototype;
    };
    BrowserUtilities._isTestMobileWebView = function () {
        return (/[?&]env=MobileWebView/.test(location.search));
    };
    BrowserUtilities._isMobileIntuneBrowser = function (userAgent) {
        return navigator.userAgent.indexOf('ManagedBrowser') > -1;
    };
    BrowserUtilities._handleErrorForParentWindowCheck = function () {
        //
        // Accessing window.parent x-domain throws - then window.parent !== window,
        // and we can assume we are hosted in an x-domain iframe
        //
        BrowserUtilities._isEmbedded = true;
    };
    BrowserUtilities._sharePointDesktopString = 'SharePointDesktop';
    BrowserUtilities._serviceWorkerProperty = 'serviceWorker';
    BrowserUtilities._navigationPreloadProperty = 'navigationPreload';
    return BrowserUtilities;
}());
export { BrowserUtilities };
//# sourceMappingURL=BrowserUtilities.js.map