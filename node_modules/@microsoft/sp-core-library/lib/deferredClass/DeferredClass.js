/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Abstract class for deferred class code.
 */
/**
 * `DeferredClass` is a generic class to define the pattern of code loaded after the initial code download.
 *
 * @remarks
 * Example:
 * ```
 * class DeferredFoo extends DeferredClass<typeof Foo, Foo> {
 *
 *   // Static members do not inherit the generic types so we do this to correctly enforce the right typing.
 *   public static instance() DeferredFoo {
 *     return this._instance;
 *   }
 *
 *   public create(arg1: string, arg2: number): Foo {
 *     return new this._classType(arg1, arg2);
 *   }
 *
 *   protected _internalLoad(): Promise<Type> {
 *     // code to lazy load e.g. require.ensure(...)
 *     // or import(...)
 *     // or SPComponentLoader.loadComponentById(...).then(
 *     // (module: typeof DeferredFooModuleType) => { return module.DeferredFoo; });
 *   }
 * }
 * ```
 *
 * @param Type - The type of the Instance object. This type should define how you create an instance
 *   of the deferred class.
 * @param Instance - The interface of the deferred class.
 *
 * @internal
 */
var DeferredClass = /** @class */ (function () {
    /**
     * Singleton instance.
     */
    function DeferredClass() {
        var _this = this;
        this._onAfterLoadPromise = new Promise(function (resolve) { return _this._resolveOnAfterLoadCallbacks = resolve; });
    }
    /**
     * Initialize, if needed, the _internalInstance singleton.
     *
     * @returns - The singleton instance.
     */
    // tslint:disable-next-line:no-any
    DeferredClass._getInstance = function () {
        if (!this._internalInstance) {
            // Cast this to any in order to call the constructor for the derived class
            // tslint:disable-next-line:no-any
            this._internalInstance = new this();
        }
        return this._internalInstance;
    };
    Object.defineProperty(DeferredClass.prototype, "isLoaded", {
        /**
         * @returns Whether or not the code has been loaded.
         */
        get: function () {
            return !!this._classType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredClass.prototype, "shouldLoad", {
        /**
         * @returns Whether or not the code should load. Value should not change during the lifecycle of an instance.
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads the deferred chunk. After the returned promise is resolved, DeferredClass.create can be used
     * to create an instance of the deferred class.
     *
     * @returns - The Promise used for loading the code. If DeferredClass.shouldLoad has been overriden
     *   and returns false, then a rejected Promise is returned.
     */
    DeferredClass.prototype.load = function () {
        var _this = this;
        if (!this._loadPromise) {
            // shouldLoad is not expected to change during the lifecycle of this instance
            if (this.shouldLoad) {
                this._loadPromise = this._internalLoad();
                // tslint:disable-next-line:no-floating-promises - This promise isn't floating
                this._loadPromise.then(function (type) {
                    _this._classType = type;
                    _this._resolveOnAfterLoadCallbacks();
                });
            }
            else {
                this._loadPromise = Promise.reject(new Error('shouldLoad returns false'));
            }
        }
        return this._loadPromise;
    };
    /**
     * Returns a thenable Promise to be resolved after the code has finished loading. Use this for cases where
     * you do not want to invoke code loading but want to be notified when the code has loaded.
     *
     * @returns - A promise resolved after the code loads.
     */
    DeferredClass.prototype.onAfterLoad = function () {
        return this._onAfterLoadPromise;
    };
    return DeferredClass;
}());
export default DeferredClass;
//# sourceMappingURL=DeferredClass.js.map