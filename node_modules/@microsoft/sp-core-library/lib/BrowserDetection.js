import Version from './Version';
/**
 * Provides with information from the browser.
 * @internal
 */
var BrowserDetection = /** @class */ (function () {
    function BrowserDetection() {
    }
    /**
     * Returns information from the browser, calculated from the user agent.
     *
     * @param userAgent - Optional. If provided, it will calculate the data from the input parameter,
     *                      instead of the user agent from the browser.
     * @returns Browser information, with browser and OS data.
     */
    BrowserDetection.getBrowserInformation = function (userAgent) {
        var agent = userAgent || BrowserDetection.getUserAgent();
        return BrowserDetection.buildBrowserInformation(agent);
    };
    BrowserDetection.getUserAgent = function () {
        return (window && window.navigator && navigator.userAgent) || '';
    };
    BrowserDetection.buildBrowserInformation = function (userAgent) {
        var agent = userAgent.toLowerCase();
        var browserInfo = {
            browser: 0 /* Other */,
            browserVersion: undefined,
            os: 0 /* Other */,
            osVersion: undefined,
            userAgent: userAgent
        };
        browserInfo = BrowserDetection.fillBrowser(browserInfo, agent);
        browserInfo = BrowserDetection.fillOS(browserInfo, agent);
        return browserInfo;
    };
    BrowserDetection.fillBrowser = function (browserInfo, userAgent) {
        var browser = 0 /* Other */;
        var browserVersion = undefined;
        // Fill the values here
        var match;
        if (match = /msie (\d+)([\d.]*)/.exec(userAgent)) {
            // IE <= 10 has something like "MSIE 9" in the user agent.
            // This is also what newer versions do in compatibility mode.
            browser = 4 /* IE */;
        }
        else if (match = /trident.*rv:(\d+)([\d.]*)/.exec(userAgent)) {
            // This is IE 11. Sample user agent contains:
            // Trident/7.0; other stuff... rv:11.0
            browser = 4 /* IE */;
        }
        else if (match = /edge\/(\d+)([\d.]*)/.exec(userAgent)) {
            // This is Edge (it pretends to be Chrome and Safari).
            browser = 2 /* Edge */;
        }
        else if (match = /edg\/(\d+)([\d.]*)/.exec(userAgent)) {
            // This is Edge Chromium.
            browser = 6 /* EdgeChromium */;
        }
        else if (match = /(?:firefox|fxios)\/(\d+)([\d.]*)/.exec(userAgent)) {
            browser = 3 /* Firefox */;
        }
        else if (match = /(?:chrome|crios)\/(\d+)([\d.]*)/.exec(userAgent)) {
            // Note: lots of random browsers say they're Chrome and will end up in this bucket
            browser = 1 /* Chrome */;
        }
        else if (match = /safari\/(\d+)/.exec(userAgent)) {
            browser = 5 /* Safari */;
            match = /version\/(\d+)([\d.]*)/.exec(userAgent);
        }
        // Some other browser categories:
        //   IE Mobile: /iemobile\/(\d+)/
        //   IE Mobile in desktop mode: contains WPDesktop; get version from Trident version
        //   Opera (currently goes into Chrome bucket): /opr\/(\d+)/
        // Parse the captured version number for user's browser.
        if (match) {
            var browserMajor = parseInt(match[1], 10) || 0;
            var browserMinor = '0';
            var browserMinorVersion = match[2];
            if (browserMinorVersion) {
                var minorStart = browserMinorVersion.indexOf('.');
                if (minorStart >= 0 && minorStart < browserMinorVersion.length - 1) {
                    browserMinor = browserMinorVersion.substr(minorStart + 1);
                }
            }
            browserVersion = Version.parse(browserMajor + "." + browserMinor);
        }
        browserInfo.browser = browser;
        browserInfo.browserVersion = browserVersion;
        return browserInfo;
    };
    BrowserDetection.fillOS = function (browserInfo, userAgent) {
        var os = 0 /* Other */;
        var osVersion = undefined;
        // OS versions comes first as some UserAgents override the version for mismatching Windows versions (7, 8.1)
        var osVersionMatch = /[\s\(](os|os x|windows phone|windows nt|android) ([\d._]+)/.exec(userAgent);
        osVersion = osVersionMatch ? osVersionMatch[2] : undefined;
        // Parse device which gives hints about os / mobile state.
        // Windows Phone IE sometimes pretends to be Android, so explicitly check for Windows Phone first.
        // (wpdesktop is used by Windows Phone in desktop mode.)
        var deviceMatch = userAgent.match(/windows phone|wpdesktop/) || userAgent.match(/ipad|iphone|ipod|android/);
        if (deviceMatch) {
            var device = deviceMatch[0];
            if (device === 'windows phone' || device === 'wpdesktop') {
                os = 6 /* WindowsPhone */;
            }
            if (device === 'android') {
                os = 1 /* Android */;
            }
            if (device === 'ipad' || device === 'ipod' || device === 'iphone') {
                os = 2 /* IOS */;
            }
        }
        else {
            if (userAgent.indexOf('macintosh') !== -1) {
                os = 4 /* Mac */;
            }
            if (userAgent.indexOf('windows nt') !== -1) {
                os = 5 /* Windows */;
            }
            if (/(windows 8\.1|windows nt 6\.3)/.test(userAgent)) {
                os = 5 /* Windows */;
                osVersion = '8.1';
            }
            if (userAgent.indexOf('windows nt 10') !== -1) {
                os = 5 /* Windows */;
                osVersion = '10';
            }
            if (userAgent.indexOf('windows nt 6.1') !== -1) {
                os = 5 /* Windows */;
                osVersion = '7';
            }
        }
        browserInfo.os = os;
        browserInfo.osVersion = osVersion;
        return browserInfo;
    };
    return BrowserDetection;
}());
export default BrowserDetection;
//# sourceMappingURL=BrowserDetection.js.map