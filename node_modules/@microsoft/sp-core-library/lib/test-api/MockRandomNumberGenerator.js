/**
 * This is a test implementation of IRandomNumberGenerator that provides
 * a reproducible sequence of reasonably pseudorandom numbers.
 */
var MockRandomNumberGenerator = /** @class */ (function () {
    function MockRandomNumberGenerator(serviceScope) {
        this.reset();
    }
    /**
     * Reset the sequence.
     */
    MockRandomNumberGenerator.prototype.reset = function (seed) {
        // The seed cannot be zero
        this._seed = (seed && seed !== 0) ? seed : 1;
    };
    /**
     * IRandomNumberGenerator implementation
     */
    MockRandomNumberGenerator.prototype.generate = function () {
        return this._generateInt32() / MockRandomNumberGenerator.MODULUS;
    };
    MockRandomNumberGenerator.prototype._generateInt32 = function () {
        // This is the classic Lehmer random number generator.  (I love codin')
        var seedHi = Math.floor(this._seed / MockRandomNumberGenerator.MODULUS_HIGH);
        var seedLow = this._seed % MockRandomNumberGenerator.MODULUS_HIGH;
        this._seed = MockRandomNumberGenerator.MULTIPLIER * seedLow - MockRandomNumberGenerator.MODULUS_LOW * seedHi;
        if (this._seed <= 0) {
            this._seed += MockRandomNumberGenerator.MODULUS;
        }
        return this._seed;
    };
    MockRandomNumberGenerator.MULTIPLIER = 48271;
    MockRandomNumberGenerator.MODULUS = 2147483647;
    MockRandomNumberGenerator.MODULUS_HIGH = Math.floor(MockRandomNumberGenerator.MODULUS / MockRandomNumberGenerator.MULTIPLIER);
    MockRandomNumberGenerator.MODULUS_LOW = MockRandomNumberGenerator.MODULUS % MockRandomNumberGenerator.MULTIPLIER;
    return MockRandomNumberGenerator;
}());
export default MockRandomNumberGenerator;
//# sourceMappingURL=MockRandomNumberGenerator.js.map