// Copyright (c) Microsoft. All rights reserved.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import Validate from './Validate';
import strings from './SPCoreLibraryStrings.resx';
/**
 * The purpose of this class is to help make the SharePoint framework errors more robust.
 * On top of the base Error class functionality, this class adds the concept of error codes.
 * The error code could be a non-localized immutable string or an error number. All the
 * SharePoint framework code is expected to use this class for raising errors.
 *
 * References:
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error}
 *
 * {@link http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript}
 *
 * @alpha
 */
var SPError = /** @class */ (function (_super) {
    __extends(SPError, _super);
    /**
     * Constructor for the SPError class.
     *
     * @param errorCode - a numeric or string error code.
     * @param message - detailed error message.
     * @param logData - (optional) additional data that can be used to troubleshoot rare to repro bugs.
     *
     */
    function SPError(errorCode, message, logProperties) {
        var _this = _super.call(this, message) || this;
        // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc
        // tslint:disable-next-line:max-line-length
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        //
        // Note: the prototype must also be set on any classes which extend this one
        _this.__proto__ = SPError.prototype; // tslint:disable-line:no-any
        Validate.isNonemptyString(errorCode, 'errorCode');
        Validate.isNonemptyString(message, 'message');
        _this._errorCode = errorCode;
        _this.message = message;
        _this._logProperties = logProperties;
        // IE doesn't get a stack unless you throw an error explictly. Throwing an SPError will not get you the stack.
        _this.stack = (new Error()).stack || SPError._generateErrorStackForIE();
        return _this;
    }
    Object.defineProperty(SPError.prototype, "id", {
        /**
         * Error id.
         * e.g. Value of the enum.
         */
        get: function () {
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPError.prototype, "category", {
        /**
         * Error category.
         */
        get: function () {
            return 'SPError';
        },
        enumerable: true,
        configurable: true
    });
    // Useful for generating an error stack on IE11 for SPError
    SPError._generateErrorStackForIE = function () {
        try {
            throw new Error();
        }
        catch (e) {
            return e.stack;
        }
    };
    /**
     * Return a string equivalent of the error for display purposes.
     *
     * @returns string representation of the error.
     */
    SPError.prototype.toStringForUI = function () {
        return this._toString(true);
    };
    /**
     * Return a string equivalent of the error for logging purposes.
     *
     * @returns string representation of the error.
     */
    SPError.prototype.toString = function () {
        return this._toString();
    };
    /**
     * Return a string equivalent of the error for logging or display purposes.
     *
     * @returns string representation of the error.
     */
    SPError.prototype._toString = function (logDebug) {
        if (!this._errorString) {
            var errorMessageArray = [
                "[" + this.category + "." + this._errorCode + "]:",
                "" + this.message,
                ''
            ];
            if (logDebug || DEBUG) {
                // For now support only one level exception hierarchy.
                if (this.innerError) {
                    errorMessageArray = errorMessageArray.concat([
                        strings.spErrorInnerErrorText,
                        this.innerError.message
                    ]);
                }
                if (this.stack) {
                    errorMessageArray = errorMessageArray.concat([
                        strings.spErrorCallStackText,
                        this.stack
                    ]);
                }
                if (this._logProperties) {
                    errorMessageArray = errorMessageArray.concat([
                        strings.spErrorLogPropertiesText,
                        JSON.stringify(this._logProperties)
                    ]);
                }
            }
            this._errorString = errorMessageArray.join('\r\n');
        }
        return this._errorString;
    };
    return SPError;
}(Error));
export default SPError;
//# sourceMappingURL=SPError.js.map