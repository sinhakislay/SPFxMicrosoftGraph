import { Guid, Validate } from '@microsoft/sp-core-library';
import SPPermission from './SPPermission';
import SPTimeZone from './SPTimeZone';
/**
  * This class is primarily used with the `PageContext` class. It provides contextual
  * information for the SharePoint site ("SPWeb") that hosts the page.
  *
  * @public
  */
var SPWeb = /** @class */ (function () {
    /**
     * @internal
     */
    function SPWeb(data) {
        this._validate(data);
        this._absoluteUrl = data.absoluteUrl;
        this._id = Guid.parse(data.id);
        this._isAppWeb = data.isAppWeb;
        this._language = data.language;
        this._languageName = data.languageName;
        this._logoUrl = data.logoUrl;
        this._permissions = new SPPermission(data.permissions);
        this._timeZone = data.timeZoneInfo ?
            new SPTimeZone(data.timeZoneInfo) : undefined;
        this._firstDayOfWeek = data.firstDayOfWeek;
        this._serverRelativeUrl = data.serverRelativeUrl;
        this._templateName = data.templateName || '';
        this._title = data.title || '';
        this._description = data.description || '';
    }
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    SPWeb.prototype._serialize = function () {
        return {
            id: this.id.toString(),
            title: this.title,
            description: this.description,
            serverRelativeUrl: this.serverRelativeUrl,
            absoluteUrl: this.absoluteUrl,
            isAppWeb: this.isAppWeb,
            language: this.language,
            languageName: this.languageName,
            logoUrl: this.logoUrl,
            permissions: this.permissions._serialize(),
            templateName: this.templateName
        };
    };
    Object.defineProperty(SPWeb.prototype, "absoluteUrl", {
        /**
         * Returns the absolute URL for this SPWeb.
         * Example: `"https://example.com/sites/PubSite/SubWeb"`
         */
        get: function () {
            return this._absoluteUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "id", {
        /**
         * The GUID that identifies the SPWeb on the server.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "isAppWeb", {
        /**
         * Returns true if this `SPWeb` the container web for an `SPApp`.
         */
        get: function () {
            return this._isAppWeb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "language", {
        /**
         * Returns the locale identifier (LCID) for the default language of the website.
         *
         * @remarks
         * Example: 1033 represents the locale identifier for en-US.
         */
        get: function () {
            return this._language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "languageName", {
        /**
         * Returns the language name for the default language of the website.
         *
         * @remarks
         * Example: en-US represents the English language in the US locale.
         */
        get: function () {
            // @todo: VS #789033, remove the fallback to empty string when server change returns languageName.
            return this._languageName || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "logoUrl", {
        /**
         * Returns the absolute URL of the website logo.
         *
         * @remarks
         * Example:` https://example.com/sites/PubSite/SubWeb/logo.jpg`
         */
        get: function () {
            return this._logoUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "permissions", {
        /**
         * Return the SPPermission object that represents the set of permissions that the
         * current user has for interacting with the web.
         */
        get: function () {
            return this._permissions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "timeZoneInfo", {
        /**
         * Returns the web's regional timezone settings or undefined if they haven't been set.
         *
         * @beta
         */
        get: function () {
            return this._timeZone;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "firstDayOfWeek", {
        /**
         * Returns the web's regional first day of week setting or undefined if it hasn't been set.
         *
         * @beta
         */
        get: function () {
            // @todo VSO#490622: Consider better API structure to avoid confusing user with return value of undefined.
            return this._firstDayOfWeek;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "serverRelativeUrl", {
        /**
         * Returns the server-relative URL for this SPWeb.
         *
         * @remarks
         * Example: `"/sites/PubSite/SubWeb"`
         */
        get: function () {
            return this._serverRelativeUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "templateName", {
        /**
         * Returns the string representing the numeric identifier for the site definition or
         * site template that was used to create the site.
         *
         * @remarks
         * Example: `"1"` represents the team site template when creating a new site on SharePoint.
         */
        get: function () {
            return this._templateName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "title", {
        /**
         * Returns the title of the current SPWeb.
         */
        get: function () {
            return this._title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPWeb.prototype, "description", {
        /**
         * Returns the description of the current SPWeb.
         */
        get: function () {
            return this._description;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Function that throws an exception if an ISPWebData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPWebData object
     */
    SPWeb.prototype._validate = function (data) {
        Validate.isNotNullOrUndefined(data, 'ISPWebData object');
        Validate.isNotNullOrUndefined(data.absoluteUrl, 'absoluteUrl');
        Validate.isNotNullOrUndefined(Guid.tryParse(data.id), 'id');
        Validate.isNotNullOrUndefined(data.isAppWeb, 'isAppWeb');
        Validate.isNotNullOrUndefined(data.language, 'language');
        // @todo: VS #789033, enable validation of languageName when server change returns languageName.
        // Validate.isNotNullOrUndefined(data.languageName, 'languageName');
        Validate.isNotNullOrUndefined(data.logoUrl, 'logoUrl');
        Validate.isNotNullOrUndefined(data.permissions, 'permissions');
        Validate.isNotNullOrUndefined(data.serverRelativeUrl, 'serverRelativeUrl');
    };
    return SPWeb;
}());
export default SPWeb;
//# sourceMappingURL=SPWeb.js.map