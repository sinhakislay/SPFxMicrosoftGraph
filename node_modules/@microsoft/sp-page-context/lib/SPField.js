import { Validate } from '@microsoft/sp-core-library';
import { Guid } from '@microsoft/sp-core-library';
/**
 * A field represents the data model for a column in SharePoint list view.
 * @remarks
 *
 * This is the client-side equivalent for SharePoint `SPField` class. It is used with the
 * `@microsoft/sp-listview-extensibility` package.
 *
 * @public
 */
var SPField = /** @class */ (function () {
    /**
     * @internal
     */
    function SPField(data) {
        this._validate(data);
        this._id = Guid.parse(data.id);
        this._internalName = data.internalName || '';
        this._fieldType = data.fieldType || '';
        this._required = data.isRequired;
        this._displayName = data.displayName || '';
        this._clientSideComponentId = Guid.tryParse(data.clientSideComponentId);
        this._clientSideComponentProperties = data.clientSideComponentProperties || '';
    }
    Object.defineProperty(SPField.prototype, "id", {
        /**
         * The GUID identifier for this field.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPField.prototype, "internalName", {
        /**
         * The internal name of the field. This name is usually used to find the field.
         */
        get: function () {
            return this._internalName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPField.prototype, "fieldType", {
        /**
         * The type of the field represented as a string
         */
        get: function () {
            return this._fieldType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPField.prototype, "isRequired", {
        /**
         * Whether the field is required for each list item in the list
         */
        get: function () {
            return this._required;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPField.prototype, "displayName", {
        /**
         * The display name of the field. This name is shown as column name in UI.
         */
        get: function () {
            return this._displayName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPField.prototype, "clientSideComponentId", {
        /**
         * The unique identifier of the client-side component associated with the field.
         */
        get: function () {
            return this._clientSideComponentId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPField.prototype, "clientSideComponentProperties", {
        /**
         * This property is only used when a `ClientSideComponentId` is specified.  It is optional.
         *
         * @remarks
         * If non-empty, the string must contain a JSON object with custom initialization properties
         * whose format and meaning are defined by the client-side component.
         */
        get: function () {
            return this._clientSideComponentProperties;
        },
        enumerable: true,
        configurable: true
    });
    SPField.prototype._validate = function (data) {
        Validate.isNotNullOrUndefined(data, 'ISPFieldData object');
        // ...
    };
    return SPField;
}());
export default SPField;
//# sourceMappingURL=SPField.js.map