import SPPermission from './SPPermission';
import { Guid, Validate } from '@microsoft/sp-core-library';
/**
  * This class is primarily used with the `PageContext` class.  It provides contextual
  * information for the SharePoint list that hosts the page.
  *
  * @public
  */
var SPList = /** @class */ (function () {
    /**
     * @internal
     */
    function SPList(data) {
        this._validate(data);
        this._id = Guid.parse(data.id);
        this._permissions = new SPPermission(data.permissions);
        this._serverRelativeUrl = data.serverRelativeUrl;
        this._title = data.title;
    }
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    SPList.prototype._serialize = function () {
        return {
            id: this.id.toString(),
            title: this.title,
            permissions: this.permissions._serialize(),
            serverRelativeUrl: this.serverRelativeUrl
        };
    };
    Object.defineProperty(SPList.prototype, "id", {
        /**
         * The GUID that identifies the SPList on the server. This property could be undefined
         * if the information isn't available.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPList.prototype, "permissions", {
        /**
         * Return the SPPermission object that represents the set of permissions that the
         * current user has for interacting with the list.
         */
        get: function () {
            return this._permissions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPList.prototype, "serverRelativeUrl", {
        /**
         * Returns the server-relative URL for this `SPList`.
         *
         * @remarks
         * Example: "/sites/PubSite"
         */
        get: function () {
            return this._serverRelativeUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPList.prototype, "title", {
        /**
         * Returns the title for this `SPList`.
         */
        get: function () {
            return this._title;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Function that throws an exception if an `ISPListData` object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an `ISPListData` object
     */
    SPList.prototype._validate = function (data) {
        Validate.isNotNullOrUndefined(data, 'ISPListData object');
        Validate.isNotNullOrUndefined(data.baseTemplate, 'baseTemplate');
        Validate.isNotNullOrUndefined(Guid.tryParse(data.id), 'id');
        Validate.isNotNullOrUndefined(data.permissions, 'permissions');
        Validate.isNotNullOrUndefined(data.serverRelativeUrl, 'serverRelativeUrl');
        Validate.isNotNullOrUndefined(data.title, 'title');
    };
    return SPList;
}());
export default SPList;
//# sourceMappingURL=SPList.js.map