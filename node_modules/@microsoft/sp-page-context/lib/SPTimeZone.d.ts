/**
 * Interface that represents a `SPSystemTime` structure.
 * @beta
 */
export interface ISPSystemTime {
    Day: number;
    DayOfWeek: number;
    Hour: number;
    Milliseconds: number;
    Minute: number;
    Month: number;
    Second: number;
    Year: number;
}
/**
 * Interface that represents the data necessary to build an `TimeZone` object.
 * @beta
 */
export interface ISPTimeZoneData {
    daylightDate: ISPSystemTime;
    daylightOffset: number;
    description: string;
    id: number;
    offset: number;
    standardDate: ISPSystemTime;
    standardOffset: number;
}
/**
  * It provides timezone information from SharePoint. A conversion from UTC to local
  * time can be calculated by using the following formula.
  *
  * @remarks
  *
  * ```
  * isDaylightSavingsTime = isCurrentDate after DaylightSavingsDate but before the StandardDate
  * LocalTime = UTCTime - Offset - (isDaylightSavingsTime ? daylightOffset : standardOffset)
  * June 11, 2 A.M. PST = June 11, 9 A.M. - (480 minutes) - (-60  minutes)
  * ```
  *
  * @beta
  */
export default class SPTimeZone {
    private _daylightDate;
    private _daylightOffset;
    private _description;
    private _id;
    private _offset;
    private _standardDate;
    private _standardOffset;
    /**
     * @internal
     */
    constructor(data: ISPTimeZoneData);
    /**
     * Gets the date on which daylight time begins for the time zone.
     */
    readonly daylightDate: ISPSystemTime;
    /**
     * Gets the offset in the number of minutes that daylight time for the time zone differs
     * from Coordinated Universal Time (UTC).
     */
    readonly daylightOffset: number;
    /**
     * Gets the description for the time zone.
     */
    readonly description: string;
    /**
     * Gets the ID of the time zone.
     */
    readonly id: number;
    /**
     * Gets the offset in the number of minutes that the time zone differs from Coordinated
     * Universal Time (UTC).
     */
    readonly offset: number;
    /**
     * Gets the date on which standard time begins for the time zone.
     */
    readonly standardDate: ISPSystemTime;
    /**
     * Gets the offset in the number of minutes that standard time for the time zone differs
     * from coordinated universal time (UTC).
     */
    readonly standardOffset: number;
    /**
     * Function that throws an exception if an ISPTimeZoneData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPTimeZoneData object
     */
    private _validate;
}
//# sourceMappingURL=SPTimeZone.d.ts.map