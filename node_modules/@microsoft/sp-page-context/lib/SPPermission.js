/**
 * Used to test whether the current user has a requested set of permissions.
 *
 * @remarks
 *
 * Specifies the built-in permissions available in SharePoint Foundation
 *
 * For more information, see:
 * {@link https://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spbasepermissions.aspx}
 *
 * @public
 */
var SPPermission = /** @class */ (function () {
    function SPPermission(value) {
        if (!value || value.High === undefined || value.Low === undefined) {
            throw new Error('Must use an object with a Low and High number value');
        }
        this._value = value;
    }
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    SPPermission.prototype._serialize = function () {
        return {
            value: this.value
        };
    };
    Object.defineProperty(SPPermission.prototype, "value", {
        /**
         * Returns the value of this SPPermission object
         */
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Function for testing whether a given permission mask has any of the requested permissions.
     * @param requestedPerms - Any number of SPPermission objects to be compared against the original
     */
    SPPermission.prototype.hasAnyPermissions = function () {
        var _this = this;
        var requestedPerms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requestedPerms[_i] = arguments[_i];
        }
        return (requestedPerms || []).some(function (permission) {
            return _this.hasPermission(permission);
        });
    };
    /**
     * Function for testing whether a given permission mask has all of the requested permissions.
     * @param requestedPerms - Any number of SPPermission objects to be compared against the original
     */
    SPPermission.prototype.hasAllPermissions = function () {
        var _this = this;
        var requestedPerms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requestedPerms[_i] = arguments[_i];
        }
        return (requestedPerms || []).every(function (permission) {
            return _this.hasPermission(permission);
        });
    };
    /**
     * Function for testing whether a given permission mask has the requested permission.
     * @param requestedPerm - The SPPermission object to be compared against the original
     */
    SPPermission.prototype.hasPermission = function (requestedPerm) {
        /* tslint:disable:no-bitwise */
        return requestedPerm &&
            ((requestedPerm.value.Low & this.value.Low) === requestedPerm.value.Low) &&
            ((requestedPerm.value.High & this.value.High) === requestedPerm.value.High);
        /* tslint:enable:no-bitwise */
    };
    /**
     * Has no permissions on the Web site. Not available through the user interface.
     */
    SPPermission.emptyMask = new SPPermission({ High: 0x0, Low: 0x0 });
    // list/document perms  =0x000000000000XXXX
    /**
     * View items in lists, documents in document libraries, and view Web discussion comments.
     */
    SPPermission.viewListItems = new SPPermission({ High: 0x0, Low: 0x1 });
    /**
     * Add items to lists, add documents to document libraries, and add Web discussion comments.
     */
    SPPermission.addListItems = new SPPermission({ High: 0x0, Low: 0x2 });
    /**
     * Edit items in lists, edit documents in document libraries, edit Web discussion comments in documents,
     * and customize web part Pages in document libraries.
     */
    SPPermission.editListItems = new SPPermission({ High: 0x0, Low: 0x4 });
    /**
     * Delete items from a list, documents from a document library, and Web discussion comments in documents.
     */
    SPPermission.deleteListItems = new SPPermission({ High: 0x0, Low: 0x8 });
    /**
     * Approve a minor version of a list item or document.
     */
    SPPermission.approveItems = new SPPermission({ High: 0x0, Low: 0x10 });
    /**
     * View the source of documents with server-side file handlers.
     */
    SPPermission.openItems = new SPPermission({ High: 0x0, Low: 0x20 });
    /**
     * View past versions of a list item or document.
     */
    SPPermission.viewVersions = new SPPermission({ High: 0x0, Low: 0x40 });
    /**
     * Delete past versions of a list item or document.
     */
    SPPermission.deleteVersions = new SPPermission({ High: 0x0, Low: 0x80 });
    /**
     * Discard or check in a document which is checked out to another user.
     */
    SPPermission.cancelCheckout = new SPPermission({ High: 0x0, Low: 0x100 });
    /**
     * Create, change, and delete personal views of lists.
     */
    SPPermission.managePersonalViews = new SPPermission({ High: 0x0, Low: 0x200 });
    /**
     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.
     */
    SPPermission.manageLists = new SPPermission({ High: 0x0, Low: 0x800 });
    /**
     * View forms, views, and application pages, and enumerate lists.
     */
    SPPermission.viewFormPages = new SPPermission({ High: 0x0, Low: 0x1000 });
    // web level perms      =0x0000XXXXXXXX0000,
    /**
     * Allow users to open a Web site, list, or folder to access items inside that container.
     */
    SPPermission.open = new SPPermission({ High: 0x0, Low: 0x20000 });
    /**
     * View pages in a Web site.
     */
    SPPermission.viewPages = new SPPermission({ High: 0x0, Low: 0x20000 });
    /**
     * View the layouts page?
     */
    SPPermission.layoutsPage = new SPPermission({ High: 0x0, Low: 0x21000 });
    /**
     * Add, change, or delete HTML pages or web part Pages, and edit the Web site using a SharePoint
     * Foundationâ€“compatible editor.
     */
    SPPermission.addAndCustomizePages = new SPPermission({ High: 0x0, Low: 0x40000 });
    /**
     * Apply a theme or borders to the entire Web site.
     */
    SPPermission.applyThemeAndBorder = new SPPermission({ High: 0x0, Low: 0x80000 });
    /**
     * Apply a style sheet (.css file) to the Web site.
     */
    SPPermission.applyStyleSheets = new SPPermission({ High: 0x0, Low: 0x100000 });
    /**
     * View reports on Web site usage.
     */
    SPPermission.viewUsageData = new SPPermission({ High: 0x0, Low: 0x200000 });
    /**
     * Create a Web site using Self-Service Site Creation.
     */
    SPPermission.createSSCSite = new SPPermission({ High: 0x0, Low: 0x400000 });
    /**
     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.
     */
    SPPermission.manageSubwebs = new SPPermission({ High: 0x0, Low: 0x800000 });
    /**
     * Create a group of users that can be used anywhere within the site collection.
     */
    SPPermission.createGroups = new SPPermission({ High: 0x0, Low: 0x1000000 });
    /**
     * Create and change permission levels on the Web site and assign permissions to users and groups.
     */
    SPPermission.managePermissions = new SPPermission({ High: 0x0, Low: 0x2000000 });
    /**
     * Enumerate files and folders in a Web site using Microsoft Office SharePoint Designer 2007 and WebDAV interfaces.
     */
    SPPermission.browseDirectories = new SPPermission({ High: 0x0, Low: 0x4000000 });
    /**
     * View information about users of the Web site.
     */
    SPPermission.browserUserInfo = new SPPermission({ High: 0x0, Low: 0x8000000 });
    /**
     * Add or remove personal web parts on a web part Page.
     */
    SPPermission.addDelPrivateWebParts = new SPPermission({ High: 0x0, Low: 0x10000000 });
    /**
     * Update web parts to display personalized information.
     */
    SPPermission.updatePersonalWebParts = new SPPermission({ High: 0x0, Low: 0x20000000 });
    /**
     * Grant the ability to perform all administration tasks for the Web site as well as manage content.
     *
     * @remarks
     * Activate, deactivate, or edit properties of Web site scoped Features through the object model or
     * through the user interface (UI). When granted on the root Web site of a site collection, activate,
     * deactivate, or edit properties of site collection scoped Features through the object model. To
     * browse to the Site Collection Features page and activate or deactivate site collection scoped
     * Features through the UI, you must be a site collection administrator.
     */
    SPPermission.manageWeb = new SPPermission({ High: 0x0, Low: 0x40000000 });
    /**
     * Use features that launch client applications; otherwise, users must work on documents locally and upload changes.
     */
    SPPermission.useClientIntegration = new SPPermission({ High: 0x10, Low: 0x0 });
    /**
     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer 2007 interfaces to access the Web site.
     */
    SPPermission.useRemoteAPIs = new SPPermission({ High: 0x20, Low: 0x0 });
    /**
     * Manage alerts for all users of the Web site.
     */
    SPPermission.manageAlerts = new SPPermission({ High: 0x40, Low: 0x0 });
    /**
     * Create e-mail alerts.
     */
    SPPermission.createAlerts = new SPPermission({ High: 0x80, Low: 0x0 });
    /**
     * Allows a user to change his or her user information, such as adding a picture.
     */
    SPPermission.editMyUserInfo = new SPPermission({ High: 0x100, Low: 0x0 });
    /**
     * Enumerate permissions on the Web site, list, folder, document, or list item.
     */
    SPPermission.enumeratePermissions = new SPPermission({ High: 0x40000000, Low: 0x0 });
    /**
     * Has all permissions on the Web site. Not available through the user interface.
     */
    SPPermission.fullMask = new SPPermission({ High: 0x7FFFFFFF, Low: 0xFFFFFFFF });
    return SPPermission;
}());
export default SPPermission;
//# sourceMappingURL=SPPermission.js.map