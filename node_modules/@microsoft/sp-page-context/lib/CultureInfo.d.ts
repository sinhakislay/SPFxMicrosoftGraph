/**
 * Object that represents the data necessary to build an CultureInfo object.
 * @internal
 */
export interface ICultureInfoData {
    currentCultureName: string;
    currentUICultureName: string;
    isRightToLeft: boolean;
}
/**
 * JSON serializable object.
 * @alpha
 */
export interface ICultureInfo {
    readonly currentCultureName: string;
    readonly currentUICultureName: string;
    readonly isRightToLeft: boolean;
}
/**
  * This class is primarily used with the `PageContext` class.  It provides culture info
  * for the current user of the application.
  *
  * @public
  */
export default class CultureInfo {
    private _currentCultureName;
    private _currentUICultureName;
    private _isRightToLeft;
    /**
      * @internal
      */
    constructor(data: ICultureInfoData);
    /**
     * Returns a JSON serializable object.
     * @internal
     */
    _serialize(): ICultureInfo;
    /**
     * This string determines the language default format for dates, times, numbers, currency values,
     * the sorting order of text, casing conventions, and string comparisons.
     *
     * @remarks
     *
     * This property may be an empty string, but it will never be undefined.
     *
     * Example: If the currentCultureName is `"en-AU"` then the application could use this information
     * to display the date as 1/8 instead of 8/1.
     */
    readonly currentCultureName: string;
    /**
     * This string determines the default user interface language. This used for localization and
     * translation of text.
     *
     * @remarks
     * This property may have an empty string, but will never be undefined.
     *
     * Example: If the currentUICultureName is `"es-MX"`, then the application could use this
     * information to translate the word "hello" to "hola".
     */
    readonly currentUICultureName: string;
    /**
     * This boolean represents the dominant direction of written text for the default user
     * interface language.
     */
    readonly isRightToLeft: boolean;
    /**
     * Function that throws an exception if an ICultureInfoData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ICultureInfoData object
     */
    private _validate;
}
//# sourceMappingURL=CultureInfo.d.ts.map