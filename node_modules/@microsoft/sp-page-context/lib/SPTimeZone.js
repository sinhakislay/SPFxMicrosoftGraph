import { Validate } from '@microsoft/sp-core-library';
/**
  * It provides timezone information from SharePoint. A conversion from UTC to local
  * time can be calculated by using the following formula.
  *
  * @remarks
  *
  * ```
  * isDaylightSavingsTime = isCurrentDate after DaylightSavingsDate but before the StandardDate
  * LocalTime = UTCTime - Offset - (isDaylightSavingsTime ? daylightOffset : standardOffset)
  * June 11, 2 A.M. PST = June 11, 9 A.M. - (480 minutes) - (-60  minutes)
  * ```
  *
  * @beta
  */
var SPTimeZone = /** @class */ (function () {
    /**
     * @internal
     */
    function SPTimeZone(data) {
        this._validate(data);
        this._daylightDate = data.daylightDate;
        this._daylightOffset = data.daylightOffset;
        this._description = data.description;
        this._id = data.id;
        this._offset = data.offset;
        this._standardDate = data.standardDate;
        this._standardOffset = data.standardOffset;
    }
    Object.defineProperty(SPTimeZone.prototype, "daylightDate", {
        /**
         * Gets the date on which daylight time begins for the time zone.
         */
        get: function () {
            return this._daylightDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPTimeZone.prototype, "daylightOffset", {
        /**
         * Gets the offset in the number of minutes that daylight time for the time zone differs
         * from Coordinated Universal Time (UTC).
         */
        get: function () {
            return this._daylightOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPTimeZone.prototype, "description", {
        /**
         * Gets the description for the time zone.
         */
        get: function () {
            return this._description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPTimeZone.prototype, "id", {
        /**
         * Gets the ID of the time zone.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPTimeZone.prototype, "offset", {
        /**
         * Gets the offset in the number of minutes that the time zone differs from Coordinated
         * Universal Time (UTC).
         */
        get: function () {
            return this._offset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPTimeZone.prototype, "standardDate", {
        /**
         * Gets the date on which standard time begins for the time zone.
         */
        get: function () {
            return this._standardDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPTimeZone.prototype, "standardOffset", {
        /**
         * Gets the offset in the number of minutes that standard time for the time zone differs
         * from coordinated universal time (UTC).
         */
        get: function () {
            return this._standardOffset;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Function that throws an exception if an ISPTimeZoneData object or its parameters are
     * null or undefined.
     *
     * @param data - Data used to construct an ISPTimeZoneData object
     */
    SPTimeZone.prototype._validate = function (data) {
        Validate.isNotNullOrUndefined(data, 'ISPTimeZoneData object');
        Validate.isNotNullOrUndefined(data.daylightDate, 'daylightDate');
        Validate.isNotNullOrUndefined(data.daylightOffset, 'daylightOffset');
        Validate.isNotNullOrUndefined(data.description, 'description');
        Validate.isNotNullOrUndefined(data.id, 'id');
        Validate.isNotNullOrUndefined(data.offset, 'offset');
        Validate.isNotNullOrUndefined(data.standardDate, 'standardDate');
        Validate.isNotNullOrUndefined(data.standardOffset, 'standardOffset');
    };
    return SPTimeZone;
}());
export default SPTimeZone;
//# sourceMappingURL=SPTimeZone.js.map