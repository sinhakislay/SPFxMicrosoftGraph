{"version":3,"file":"JsonFile.js","sourceRoot":"","sources":["../src/JsonFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as jju from 'jju';\r\n\r\nimport { JsonSchema, IJsonSchemaErrorInfo, IJsonSchemaValidateOptions } from './JsonSchema';\r\nimport { Text, NewlineKind } from './Text';\r\nimport { FileSystem } from './FileSystem';\r\n\r\n/**\r\n * Options for JsonFile.stringify()\r\n *\r\n * @public\r\n */\r\nexport interface IJsonFileStringifyOptions {\r\n  /**\r\n   * If true, then `\\n` will be used for newlines instead of the default `\\r\\n`.\r\n   */\r\n  newlineConversion?: NewlineKind;\r\n\r\n  /**\r\n   * If true, then the \"jju\" library will be used to improve the text formatting.\r\n   * Note that this is slightly slower than the native JSON.stringify() implementation.\r\n   */\r\n  prettyFormatting?: boolean;\r\n}\r\n\r\n/**\r\n * Options for JsonFile.saveJsonFile()\r\n *\r\n * @public\r\n */\r\nexport interface IJsonFileSaveOptions extends IJsonFileStringifyOptions {\r\n  /**\r\n   * If there is an existing file, and the contents have not changed, then\r\n   * don't write anything; this preserves the old timestamp.\r\n   */\r\n  onlyIfChanged?: boolean;\r\n\r\n  /**\r\n   * Creates the folder recursively using FileSystem.ensureFolder()\r\n   * Defaults to false.\r\n   */\r\n  ensureFolderExists?: boolean;\r\n\r\n  /**\r\n   * If true, use the \"jju\" library to preserve the existing JSON formatting:  The file will be loaded\r\n   * from the target filename, the new content will be merged in (preserving whitespace and comments),\r\n   * and then the file will be overwritten with the merged contents.  If the target file does not exist,\r\n   * then the file is saved normally.\r\n   */\r\n  updateExistingFile?: boolean;\r\n}\r\n\r\n/**\r\n * Utilities for reading/writing JSON files.\r\n * @public\r\n */\r\nexport class JsonFile {\r\n  /**\r\n   * Loads a JSON file.\r\n   */\r\n  public static load(jsonFilename: string): any { // tslint:disable-line:no-any\r\n    if (!FileSystem.exists(jsonFilename)) {\r\n      throw new Error(`Input file not found: ${jsonFilename}`);\r\n    }\r\n\r\n    const contents: string = FileSystem.readFile(jsonFilename);\r\n    try {\r\n      return jju.parse(contents);\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${jsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads a JSON file and validate its schema.\r\n   */\r\n  public static loadAndValidate(jsonFilename: string, jsonSchema: JsonSchema,\r\n    options?: IJsonSchemaValidateOptions): any { // tslint:disable-line:no-any\r\n\r\n    const jsonObject: any = JsonFile.load(jsonFilename); // tslint:disable-line:no-any\r\n    jsonSchema.validateObject(jsonObject, jsonFilename, options);\r\n\r\n    return jsonObject;\r\n  }\r\n\r\n  /**\r\n   * Loads a JSON file and validate its schema, reporting errors using a callback\r\n   * @remarks\r\n   * See JsonSchema.validateObjectWithCallback() for more info.\r\n   */\r\n  public static loadAndValidateWithCallback(jsonFilename: string, jsonSchema: JsonSchema,\r\n    errorCallback: (errorInfo: IJsonSchemaErrorInfo) => void): any { // tslint:disable-line:no-any\r\n\r\n    const jsonObject: any = JsonFile.load(jsonFilename); // tslint:disable-line:no-any\r\n    jsonSchema.validateObjectWithCallback(jsonObject, errorCallback);\r\n\r\n    return jsonObject;\r\n  }\r\n\r\n  /**\r\n   * Serializes the specified JSON object to a string buffer.\r\n   * @param jsonObject - the object to be serialized\r\n   * @param options - other settings that control serialization\r\n   * @returns a JSON string, with newlines, and indented with two spaces\r\n   */\r\n  public static stringify(jsonObject: Object, options?: IJsonFileStringifyOptions): string {\r\n    return JsonFile.updateString('', jsonObject, options);\r\n  }\r\n\r\n  /**\r\n   * Serializes the specified JSON object to a string buffer.\r\n   * @param jsonObject - the object to be serialized\r\n   * @param options - other settings that control serialization\r\n   * @returns a JSON string, with newlines, and indented with two spaces\r\n   */\r\n  public static updateString(previousJson: string, newJsonObject: Object,\r\n    options?: IJsonFileStringifyOptions): string {\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    JsonFile.validateNoUndefinedMembers(newJsonObject);\r\n\r\n    let stringified: string;\r\n\r\n    if (previousJson !== '') {\r\n      // NOTE: We don't use mode=json here because comments aren't allowed by strict JSON\r\n      stringified = jju.update(previousJson, newJsonObject, {\r\n        mode: 'cjson',\r\n        indent: 2\r\n      });\r\n    } else if (options.prettyFormatting) {\r\n      stringified = jju.stringify(newJsonObject, {\r\n        mode: 'json',\r\n        indent: 2\r\n      });\r\n    } else {\r\n      stringified = JSON.stringify(newJsonObject, undefined, 2);\r\n    }\r\n\r\n    // Add the trailing newline\r\n    stringified = Text.ensureTrailingNewline(stringified);\r\n\r\n    if (options && options.newlineConversion) {\r\n      switch (options.newlineConversion) {\r\n        case NewlineKind.CrLf:\r\n          return Text.convertToCrLf(stringified);\r\n        case NewlineKind.Lf:\r\n          return Text.convertToLf(stringified);\r\n      }\r\n    }\r\n\r\n    return stringified;\r\n  }\r\n\r\n  /**\r\n   * Saves the file to disk.  Returns false if nothing was written due to options.onlyIfChanged.\r\n   * @param jsonObject - the object to be saved\r\n   * @param jsonFilename - the file path to write\r\n   * @param options - other settings that control how the file is saved\r\n   * @returns false if ISaveJsonFileOptions.onlyIfChanged didn't save anything; true otherwise\r\n   */\r\n  public static save(jsonObject: Object, jsonFilename: string, options?: IJsonFileSaveOptions): boolean {\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    // Do we need to read the previous file contents?\r\n    let oldBuffer: Buffer | undefined = undefined;\r\n    if (options.updateExistingFile || options.onlyIfChanged) {\r\n      if (FileSystem.exists(jsonFilename)) {\r\n        try {\r\n          oldBuffer = FileSystem.readFileToBuffer(jsonFilename);\r\n        } catch (error) {\r\n          // Ignore this error, and try writing a new file.  If that fails, then we should report that\r\n          // error instead.\r\n        }\r\n      }\r\n    }\r\n\r\n    let jsonToUpdate: string = '';\r\n    if (options.updateExistingFile && oldBuffer) {\r\n      jsonToUpdate = oldBuffer.toString();\r\n    }\r\n\r\n    const newJson: string = JsonFile.updateString(jsonToUpdate, jsonObject, options);\r\n\r\n    const newBuffer: Buffer = Buffer.from(newJson); // utf8 encoding happens here\r\n\r\n    if (options.onlyIfChanged) {\r\n      // Has the file changed?\r\n      if (oldBuffer && Buffer.compare(newBuffer, oldBuffer) === 0) {\r\n        // Nothing has changed, so don't touch the file\r\n        return false;\r\n      }\r\n    }\r\n\r\n    FileSystem.writeFile(jsonFilename, newBuffer.toString(), {\r\n      ensureFolderExists: options.ensureFolderExists\r\n    });\r\n\r\n    // TEST CODE: Used to verify that onlyIfChanged isn't broken by a hidden transformation during saving.\r\n    /*\r\n    const oldBuffer2: Buffer = FileSystem.readFileToBuffer(jsonFilename);\r\n    if (Buffer.compare(buffer, oldBuffer2) !== 0) {\r\n      console.log('new:' + buffer.toString('hex'));\r\n      console.log('old:' + oldBuffer2.toString('hex'));\r\n\r\n      throw new Error('onlyIfChanged logic is broken');\r\n    }\r\n    */\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Used to validate a data structure before writing.  Reports an error if there\r\n   * are any undefined members.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public static validateNoUndefinedMembers(jsonObject: Object): void {\r\n    return JsonFile._validateNoUndefinedMembers(jsonObject, []);\r\n  }\r\n\r\n  // Private implementation of validateNoUndefinedMembers()\r\n  private static _validateNoUndefinedMembers(jsonObject: Object, keyPath: string[]): void {\r\n    if (!jsonObject) {\r\n      return;\r\n    }\r\n    if (typeof jsonObject === 'object') {\r\n      for (const key of Object.keys(jsonObject)) {\r\n        keyPath.push(key);\r\n\r\n        // tslint:disable-next-line:no-any\r\n        const value: any = jsonObject[key];\r\n        if (value === undefined) {\r\n          const fullPath: string = JsonFile._formatKeyPath(keyPath);\r\n          throw new Error(`The value for ${fullPath} is \"undefined\" and cannot be serialized as JSON`);\r\n        }\r\n\r\n        JsonFile._validateNoUndefinedMembers(value, keyPath);\r\n        keyPath.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Given this input:    ['items', '4', 'syntax', 'parameters', 'string \"with\" symbols\", 'type']\r\n  // Return this string:  items[4].syntax.parameters[\"string \\\"with\\\" symbols\"].type\r\n  private static _formatKeyPath(keyPath: string[]): string {\r\n    let result: string = '';\r\n\r\n    for (const key of keyPath) {\r\n      if (/^[0-9]+$/.test(key)) {\r\n        // It's an integer, so display like this:  parent[123]\r\n        result += `[${key}]`;\r\n      } else if (/^[a-z_][a-z_0-9]*$/i.test(key)) {\r\n        // It's an alphanumeric identifier, so display like this:  parent.name\r\n        if (result) {\r\n          result += '.';\r\n        }\r\n        result += `${key}`;\r\n      } else {\r\n        // It's a freeform string, so display like this:  parent[\"A path: \\\"C:\\\\file\\\"\"]\r\n\r\n        // Convert this:     A path: \"C:\\file\"\r\n        // To this:          A path: \\\"C:\\\\file\\\"\r\n        const escapedKey: string = key.replace(/[\\\\]/g, '\\\\\\\\') // escape backslashes\r\n          .replace(/[\"]/g, '\\\\'); // escape quotes\r\n        result += `[\"${escapedKey}\"]`;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n"]}