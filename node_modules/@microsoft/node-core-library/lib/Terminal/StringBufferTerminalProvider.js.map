{"version":3,"file":"StringBufferTerminalProvider.js","sourceRoot":"","sources":["../../src/Terminal/StringBufferTerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,2DAAkF;AAClF,oDAAiD;AACjD,kCAA+B;AAE/B;;;;;;GAMG;AACH,MAAa,4BAA4B;IAQvC,YAAmB,gBAAyB,KAAK;QAPzC,oBAAe,GAAkB,IAAI,6BAAa,EAAE,CAAC;QACrD,mBAAc,GAAkB,IAAI,6BAAa,EAAE,CAAC;QACpD,mBAAc,GAAkB,IAAI,6BAAa,EAAE,CAAC;QACpD,iBAAY,GAAkB,IAAI,6BAAa,EAAE,CAAC;QAKxD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,IAAY,EAAE,QAAkC;QAC3D,QAAQ,QAAQ,EAAE;YAChB,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC/B,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,GAAG,CAAC;YAClC,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClC,MAAM;aACP;SACF;IACH,CAAC;IAED;;OAEG;IACH,IAAW,YAAY;QACrB,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACI,gBAAgB;QACrB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEO,gBAAgB,CAAC,CAAS;QAChC,OAAO,WAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aACvB,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC;aACzB,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;aACvB,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;CACF;AAxFD,oEAwFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider, TerminalProviderSeverity } from './ITerminalProvider';\r\nimport { StringBuilder } from '../StringBuilder';\r\nimport { Text } from '../Text';\r\n\r\n/**\r\n * Terminal provider that stores written data in buffers separated by severity.\r\n * This terminal provider is designed to be used when code that prints to a terminal\r\n * is being unit tested.\r\n *\r\n * @beta\r\n */\r\nexport class StringBufferTerminalProvider implements ITerminalProvider {\r\n  private _standardBuffer: StringBuilder = new StringBuilder();\r\n  private _verboseBuffer: StringBuilder = new StringBuilder();\r\n  private _warningBuffer: StringBuilder = new StringBuilder();\r\n  private _errorBuffer: StringBuilder = new StringBuilder();\r\n\r\n  private _supportsColor: boolean;\r\n\r\n  public constructor(supportsColor: boolean = false) {\r\n    this._supportsColor = supportsColor;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.write}\r\n   */\r\n  public write(data: string, severity: TerminalProviderSeverity): void {\r\n    switch (severity) {\r\n      case TerminalProviderSeverity.warning: {\r\n        this._warningBuffer.append(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.error: {\r\n        this._errorBuffer.append(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.verbose: {\r\n        this._verboseBuffer.append(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.log:\r\n      default: {\r\n        this._standardBuffer.append(data);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.eolCharacter}\r\n   */\r\n  public get eolCharacter(): string {\r\n    return '[n]';\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc ITerminalProvider.supportsColor}\r\n   */\r\n  public get supportsColor(): boolean {\r\n    return this._supportsColor;\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at log-level severity.\r\n   */\r\n  public getOutput(): string {\r\n    return this._normalizeOutput(this._standardBuffer.toString());\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at verbose-level severity.\r\n   */\r\n  public getVerbose(): string {\r\n    return this._normalizeOutput(this._verboseBuffer.toString());\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at error-level severity.\r\n   */\r\n  public getErrorOutput(): string {\r\n    return this._normalizeOutput(this._errorBuffer.toString());\r\n  }\r\n\r\n  /**\r\n   * Get everything that has been written at warning-level severity.\r\n   */\r\n  public getWarningOutput(): string {\r\n    return this._normalizeOutput(this._warningBuffer.toString());\r\n  }\r\n\r\n  private _normalizeOutput(s: string): string { // tslint:disable-line:export-name\r\n    return Text.convertToLf(s)\r\n      .replace(/\\u001b/g, '[x]')\r\n      .replace(/\\n/g, '[-n-]')\r\n      .replace(/\\r/g, '[-r-]');\r\n  }\r\n}\r\n"]}