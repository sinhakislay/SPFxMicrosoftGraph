{"version":3,"file":"Terminal.js","sourceRoot":"","sources":["../../src/Terminal/Terminal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  ITerminalProvider,\r\n  TerminalProviderSeverity\r\n} from './ITerminalProvider';\r\nimport {\r\n  IColorableSequence,\r\n  ColorValue,\r\n  Colors,\r\n  eolSequence,\r\n  TextAttribute\r\n} from './Colors';\r\n\r\n/**\r\n * This class facilitates writing to a console.\r\n *\r\n * @beta\r\n */\r\nexport class Terminal {\r\n  private _providers: Set<ITerminalProvider>;\r\n\r\n  public constructor(provider: ITerminalProvider) {\r\n    this._providers = new Set<ITerminalProvider>();\r\n    this._providers.add(provider);\r\n  }\r\n\r\n  /**\r\n   * Subscribe a new terminal provider.\r\n   */\r\n  public registerProvider(provider: ITerminalProvider): void {\r\n    this._providers.add(provider);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe a terminal provider. If the provider isn't subscribed, this function does nothing.\r\n   */\r\n  public unregisterProvider(provider: ITerminalProvider): void {\r\n    if (this._providers.has(provider)) {\r\n      this._providers.delete(provider);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write a generic message to the terminal\r\n   */\r\n  public write(...messageParts: (string | IColorableSequence)[]): void {\r\n    this._writeSegmentsToProviders(messageParts, TerminalProviderSeverity.log);\r\n  }\r\n\r\n  /**\r\n   * Write a generic message to the terminal, followed by a newline\r\n   */\r\n  public writeLine(...messageParts: (string | IColorableSequence)[]): void {\r\n    this.write(...messageParts, eolSequence);\r\n  }\r\n\r\n  /**\r\n   * Write a warning message to the console with yellow text.\r\n   *\r\n   * @remarks\r\n   * The yellow color takes precedence over any other foreground colors set.\r\n   */\r\n  public writeWarning(...messageParts: (string | IColorableSequence)[]): void {\r\n    this._writeSegmentsToProviders(\r\n      messageParts.map(\r\n        (part): IColorableSequence => ({\r\n          ...Colors._normalizeStringOrColorableSequence(part),\r\n          foregroundColor: ColorValue.Yellow\r\n        })\r\n      ),\r\n      TerminalProviderSeverity.warning\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write a warning message to the console with yellow text, followed by a newline.\r\n   *\r\n   * @remarks\r\n   * The yellow color takes precedence over any other foreground colors set.\r\n   */\r\n  public writeWarningLine(...messageParts: (string | IColorableSequence)[]): void {\r\n    this._writeSegmentsToProviders(\r\n      [\r\n        ...messageParts.map(\r\n          (part): IColorableSequence => ({\r\n            ...Colors._normalizeStringOrColorableSequence(part),\r\n            foregroundColor: ColorValue.Yellow\r\n          })\r\n        ),\r\n        eolSequence\r\n      ],\r\n      TerminalProviderSeverity.warning\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write an error message to the console with red text.\r\n   *\r\n   * @remarks\r\n   * The red color takes precedence over any other foreground colors set.\r\n   */\r\n  public writeError(...messageParts: (string | IColorableSequence)[]): void {\r\n    this._writeSegmentsToProviders(\r\n      messageParts.map(\r\n        (part): IColorableSequence => ({\r\n          ...Colors._normalizeStringOrColorableSequence(part),\r\n          foregroundColor: ColorValue.Red\r\n        })\r\n      ),\r\n      TerminalProviderSeverity.error\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write an error message to the console with red text, followed by a newline.\r\n   *\r\n   * @remarks\r\n   * The red color takes precedence over any other foreground colors set.\r\n   */\r\n  public writeErrorLine(...messageParts: (string | IColorableSequence)[]): void {\r\n    this._writeSegmentsToProviders(\r\n      [\r\n        ...messageParts.map(\r\n          (part): IColorableSequence => ({\r\n            ...Colors._normalizeStringOrColorableSequence(part),\r\n            foregroundColor: ColorValue.Red\r\n          })\r\n        ),\r\n        eolSequence\r\n      ],\r\n      TerminalProviderSeverity.error\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write a verbose-level message.\r\n   */\r\n  public writeVerbose(...messageParts: (string | IColorableSequence)[]): void {\r\n    this._writeSegmentsToProviders(messageParts, TerminalProviderSeverity.verbose);\r\n  }\r\n\r\n  /**\r\n   * Write a verbose-level message followed by a newline.\r\n   */\r\n  public writeVerboseLine(...messageParts: (string | IColorableSequence)[]): void {\r\n    this.writeVerbose(...messageParts, eolSequence);\r\n  }\r\n\r\n  private _writeSegmentsToProviders(\r\n    segments: (string | IColorableSequence)[],\r\n    severity: TerminalProviderSeverity\r\n  ): void {\r\n    const withColorText: { [eolChar: string]: string } = {};\r\n    const withoutColorText: { [eolChar: string]: string } = {};\r\n    let withColorLines: string[] | undefined;\r\n    let withoutColorLines: string[] | undefined;\r\n\r\n    this._providers.forEach((provider) => {\r\n      const eol: string = provider.eolCharacter;\r\n      let textToWrite: string;\r\n      if (provider.supportsColor) {\r\n        if (!withColorLines) {\r\n          withColorLines = this._serializeFormattableTextSegments(segments, true);\r\n        }\r\n\r\n        if (!withColorText[eol]) {\r\n          withColorText[eol] = withColorLines.join(eol);\r\n        }\r\n\r\n        textToWrite = withColorText[eol];\r\n      } else {\r\n        if (!withoutColorLines) {\r\n          withoutColorLines = this._serializeFormattableTextSegments(segments, false);\r\n        }\r\n\r\n        if (!withoutColorText[eol]) {\r\n          withoutColorText[eol] = withoutColorLines.join(eol);\r\n        }\r\n\r\n        textToWrite = withoutColorText[eol];\r\n      }\r\n\r\n      provider.write(textToWrite, severity);\r\n    });\r\n  }\r\n\r\n  private _serializeFormattableTextSegments(segments: (string | IColorableSequence)[], withColor: boolean): string[] {\r\n    const lines: string[] = [];\r\n    let segmentsToJoin: string[] = [];\r\n    let lastSegmentWasEol: boolean = false;\r\n    for (let i: number = 0; i < segments.length; i++) {\r\n      const segment: IColorableSequence = Colors._normalizeStringOrColorableSequence(segments[i]);\r\n      lastSegmentWasEol = !!segment.isEol;\r\n      if (lastSegmentWasEol) {\r\n        lines.push(segmentsToJoin.join(''));\r\n        segmentsToJoin = [];\r\n      } else {\r\n\r\n        if (withColor) {\r\n          const startColorCodes: number[] = [];\r\n          const endColorCodes: number[] = [];\r\n          switch (segment.foregroundColor) {\r\n            case ColorValue.Black: {\r\n              startColorCodes.push(30);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Red: {\r\n              startColorCodes.push(31);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Green: {\r\n              startColorCodes.push(32);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Yellow: {\r\n              startColorCodes.push(33);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Blue: {\r\n              startColorCodes.push(34);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Magenta: {\r\n              startColorCodes.push(35);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Cyan: {\r\n              startColorCodes.push(36);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.White: {\r\n              startColorCodes.push(37);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Gray: {\r\n              startColorCodes.push(90);\r\n              endColorCodes.push(39);\r\n              break;\r\n            }\r\n          }\r\n\r\n          switch (segment.backgroundColor) {\r\n            case ColorValue.Black: {\r\n              startColorCodes.push(40);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Red: {\r\n              startColorCodes.push(41);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Green: {\r\n              startColorCodes.push(42);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Yellow: {\r\n              startColorCodes.push(43);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Blue: {\r\n              startColorCodes.push(44);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Magenta: {\r\n              startColorCodes.push(45);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Cyan: {\r\n              startColorCodes.push(46);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.White: {\r\n              startColorCodes.push(47);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n\r\n            case ColorValue.Gray: {\r\n              startColorCodes.push(100);\r\n              endColorCodes.push(49);\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (segment.textAttributes) {\r\n            for (const textAttribute of segment.textAttributes) {\r\n              switch (textAttribute) {\r\n                case TextAttribute.Bold: {\r\n                  startColorCodes.push(1);\r\n                  endColorCodes.push(21);\r\n                  break;\r\n                }\r\n\r\n                case TextAttribute.Dim: {\r\n                  startColorCodes.push(2);\r\n                  endColorCodes.push(22);\r\n                  break;\r\n                }\r\n\r\n                case TextAttribute.Underline: {\r\n                  startColorCodes.push(4);\r\n                  endColorCodes.push(24);\r\n                  break;\r\n                }\r\n\r\n                case TextAttribute.Blink: {\r\n                  startColorCodes.push(5);\r\n                  endColorCodes.push(25);\r\n                  break;\r\n                }\r\n\r\n                case TextAttribute.InvertColor: {\r\n                  startColorCodes.push(7);\r\n                  endColorCodes.push(27);\r\n                  break;\r\n                }\r\n\r\n                case TextAttribute.Hidden: {\r\n                  startColorCodes.push(8);\r\n                  endColorCodes.push(28);\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          for (let j: number = 0; j < startColorCodes.length; j++) {\r\n            const code: number = startColorCodes[j];\r\n            segmentsToJoin.push(...[\r\n              '\\u001b[',\r\n              code.toString(),\r\n              'm'\r\n            ]);\r\n          }\r\n\r\n          segmentsToJoin.push(segment.text);\r\n\r\n          for (let j: number = endColorCodes.length - 1; j >= 0; j--) {\r\n            const code: number = endColorCodes[j];\r\n            segmentsToJoin.push(...[\r\n              '\\u001b[',\r\n              code.toString(),\r\n              'm'\r\n            ]);\r\n          }\r\n        } else {\r\n          segmentsToJoin.push(segment.text);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (segmentsToJoin.length > 0) {\r\n      lines.push(segmentsToJoin.join(''));\r\n    }\r\n\r\n    if (lastSegmentWasEol) {\r\n      lines.push('');\r\n    }\r\n\r\n    return lines;\r\n  }\r\n}\r\n"]}