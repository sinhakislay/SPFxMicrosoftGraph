{"version":3,"file":"MapExtensions.js","sourceRoot":"","sources":["../src/MapExtensions.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D;;;;GAIG;AACH,MAAa,aAAa;IACxB;;;;;;OAMG;IACI,MAAM,CAAC,YAAY,CAAO,SAAoB,EAAE,SAA4B;QACjF,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE;YACtC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;IACH,CAAC;CACF;AAbD,sCAaC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Helper functions for working with the `Map<K, V>` data type.\r\n *\r\n * @public\r\n */\r\nexport class MapExtensions {\r\n  /**\r\n   * Adds all the (key, value) pairs from the source map into the target map.\r\n   * @remarks\r\n   * This function modifies targetMap.  Any existing keys will be overwritten.\r\n   * @param targetMap - The map that entries will be added to\r\n   * @param sourceMap - The map containing the entries to be added\r\n   */\r\n  public static mergeFromMap<K, V>(targetMap: Map<K, V>, sourceMap: ReadonlyMap<K, V>): void {\r\n    for (const pair of sourceMap.entries()) {\r\n      targetMap.set(pair[0], pair[1]);\r\n    }\r\n  }\r\n}\r\n"]}