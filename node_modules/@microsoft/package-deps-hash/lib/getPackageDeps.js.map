{"version":3,"file":"getPackageDeps.js","sourceRoot":"","sources":["../src/getPackageDeps.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,oEAA0D;AAI1D;;GAEG;AACH,SAAgB,cAAc,CAAC,MAAc;IAC3C,MAAM,OAAO,GAAwB,IAAI,GAAG,EAAkB,CAAC;IAE/D,IAAI,MAAM,EAAE;QACV,mCAAmC;QACnC,+EAA+E;QAC/E,oEAAoE;QACpE,MAAM,QAAQ,GAAW,kDAAkD,CAAC;QAE5E,qEAAqE;QACrE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAEhC,IAAI,IAAI,EAAE;gBACR,+EAA+E;gBAC/E,MAAM,OAAO,GAA4B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC9D,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;oBACvC,MAAM,IAAI,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC;oBAChC,MAAM,QAAQ,GAAW,OAAO,CAAC,CAAC,CAAC,CAAC;oBAEpC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;iBAE7B;qBAAM;oBACL,MAAM,IAAI,KAAK,CAAC,oCAAoC,IAAI,GAAG,CAAC,CAAC;iBAC9D;aACF;QACH,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AA7BD,wCA6BC;AAED;;GAEG;AACH,SAAgB,cAAc,CAAC,MAAc,EAAE,WAAmB;IAChE,MAAM,OAAO,GAAwB,IAAI,GAAG,EAAkB,CAAC;IAE/D;;;;MAIE;IAEF,oGAAoG;IACpG,6BAA6B;IAC7B,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,OAAO,CAAC;KAChB;IAED,yEAAyE;IACzE,MAAM;SACH,IAAI,EAAE;SACN,KAAK,CAAC,IAAI,CAAC;SACX,OAAO,CAAC,IAAI,CAAC,EAAE;QACd;;;;;;;;;;UAUE;QACF,MAAM,CAAC,UAAU,EAAE,GAAG,SAAS,CAAC,GAAa,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAErG,IAAI,UAAU,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACnD,oGAAoG;YACpG,kGAAkG;YAClG,+FAA+F;YAC/F,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;SAC1D;IACH,CAAC,CAAC,CAAC;IAEL,OAAO,OAAO,CAAC;AACjB,CAAC;AA1CD,wCA0CC;AAED;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,WAAqB,EAAE,WAAmB;IAC3E,MAAM,OAAO,GAAwB,IAAI,GAAG,EAAkB,CAAC;IAE/D,IAAI,WAAW,CAAC,MAAM,EAAE;QACtB,MAAM,MAAM,GAA2C,8BAAU,CAAC,SAAS,CACzE,KAAK,EACL,CAAC,aAAa,EAAE,GAAG,WAAW,CAAC,EAC/B,EAAE,uBAAuB,EAAE,WAAW,EAAE,CACzC,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,sCAAsC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SAC1F;QAED,MAAM,UAAU,GAAW,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAEhD,sFAAsF;QACtF,MAAM,MAAM,GAAa,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEhD,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,UAAU,WAAW,CAAC,MAAM,4CAA4C,MAAM,CAAC,MAAM,UAAU,CAAC,CAAC;SAClH;QAED,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,IAAI,GAAW,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,QAAQ,GAAW,WAAW,CAAC,CAAC,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SAC7B;KAEF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAhCD,gDAgCC;AAED;;GAEG;AACH,SAAgB,SAAS,CAAC,IAAY;IACpC,MAAM,MAAM,GAA2C,8BAAU,CAAC,SAAS,CACzE,KAAK,EACL,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,EACzB;QACE,uBAAuB,EAAE,IAAI;KAC9B,CACF,CAAC;IAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,kCAAkC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;KACtF;IAED,OAAO,MAAM,CAAC,MAAM,CAAC;AACvB,CAAC;AAdD,8BAcC;AAED;;GAEG;AACH,SAAgB,SAAS,CAAC,IAAY;IACpC,MAAM,MAAM,GAA2C,8BAAU,CAAC,SAAS,CACzE,KAAK,EACL,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,EAC3B;QACE,uBAAuB,EAAE,IAAI;KAC9B,CACF,CAAC;IAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;KACrF;IAED,OAAO,MAAM,CAAC,MAAM,CAAC;AACvB,CAAC;AAdD,8BAcC;AAED;;;;;;;;;GASG;AACH,SAAgB,cAAc,CAAC,cAAsB,OAAO,CAAC,GAAG,EAAE,EAAE,aAAwB;IAC1F,MAAM,cAAc,GAA+B,EAAE,CAAC;IAEtD,IAAI,aAAa,EAAE;QACjB,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;KAC5D;IAED,MAAM,OAAO,GAAiB;QAC5B,KAAK,EAAE,EAAE;KACV,CAAC;IAEF,MAAM,WAAW,GAAW,SAAS,CAAC,WAAW,CAAC,CAAC;IAEnD,gCAAgC;IAChC,cAAc,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,QAAgB,EAAE,EAAE;QACrE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC7B,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;SAChC;IACH,CAAC,CAAC,CAAC;IAEH,4DAA4D;IAC5D,MAAM,eAAe,GAAW,SAAS,CAAC,WAAW,CAAC,CAAC;IACvD,MAAM,qBAAqB,GACzB,cAAc,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;IAE/C,MAAM,WAAW,GAAa,EAAE,CAAC;IACjC,qBAAqB,CAAC,OAAO,CAAC,CAAC,UAAkB,EAAE,QAAgB,EAAE,EAAE;QACrE,IAAI,UAAU,KAAK,GAAG,EAAE;YACtB,OAAO,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAChC;aAAM;YACL,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC7B,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;SACF;IACH,CAAC,CAAC,CAAC;IAEH,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,QAAgB,EAAE,EAAE;QACtF,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AAzCD,wCAyCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport { Executable } from '@microsoft/node-core-library';\r\n\r\nimport { IPackageDeps } from './IPackageDeps';\r\n\r\n/**\r\n * Parses the output of the \"git ls-tree\" command\r\n */\r\nexport function parseGitLsTree(output: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  if (output) {\r\n    // A line is expected to look like:\r\n    // 100644 blob 3451bccdc831cb43d7a70ed8e628dcf9c7f888c8    src/typings/tsd.d.ts\r\n    // 160000 commit c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac  rushstack\r\n    const gitRegex: RegExp = /([0-9]{6})\\s(blob|commit)\\s([a-f0-9]{40})\\s*(.*)/;\r\n\r\n    // Note: The output of git ls-tree uses \\n newlines regardless of OS.\r\n    output.split('\\n').forEach(line => {\r\n\r\n      if (line) {\r\n        // Take everything after the \"100644 blob\", which is just the hash and filename\r\n        const matches: RegExpMatchArray | null = line.match(gitRegex);\r\n        if (matches && matches[3] && matches[4]) {\r\n          const hash: string = matches[3];\r\n          const filename: string = matches[4];\r\n\r\n          changes.set(filename, hash);\r\n\r\n        } else {\r\n          throw new Error(`Cannot parse git ls-tree input: \"${line}\"`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Parses the output of the \"git status\" command\r\n */\r\nexport function parseGitStatus(output: string, packagePath: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  /*\r\n  * Typically, output will look something like:\r\n  * M temp_modules/rush-package-deps-hash/package.json\r\n  * D package-deps-hash/src/index.ts\r\n  */\r\n\r\n  // If there was an issue with `git ls-tree`, or there are no current changes, processOutputBlocks[1]\r\n  // will be empty or undefined\r\n  if (!output) {\r\n    return changes;\r\n  }\r\n\r\n  // Note: The output of git hash-object uses \\n newlines regardless of OS.\r\n  output\r\n    .trim()\r\n    .split('\\n')\r\n    .forEach(line => {\r\n      /*\r\n      * changeType is in the format of \"XY\" where \"X\" is the status of the file in the index and \"Y\" is the status of\r\n      * the file in the working tree. Some example statuses:\r\n      *   - 'D' == deletion\r\n      *   - 'M' == modification\r\n      *   - 'A' == addition\r\n      *   - '??' == untracked\r\n      *   - 'R' == rename\r\n      *   - 'RM' == rename with modifications\r\n      * filenames == path to the file, or files in the case of files that have been renamed\r\n      */\r\n      const [changeType, ...filenames]: string[] = line.trim().split(' ').filter((linePart) => !!linePart);\r\n\r\n      if (changeType && filenames && filenames.length > 0) {\r\n        // We always care about the last filename in the filenames array. In the case of non-rename changes,\r\n        // the filenames array only contains one item. In the case of rename changes, the last item in the\r\n        // array is the path to the file in the working tree, which is the only one that we care about.\r\n        changes.set(filenames[filenames.length - 1], changeType);\r\n      }\r\n    });\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Takes a list of files and returns the current git hashes for them\r\n *\r\n * @public\r\n */\r\nexport function getGitHashForFiles(filesToHash: string[], packagePath: string): Map<string, string> {\r\n  const changes: Map<string, string> = new Map<string, string>();\r\n\r\n  if (filesToHash.length) {\r\n    const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n      'git',\r\n      ['hash-object', ...filesToHash],\r\n      { currentWorkingDirectory: packagePath }\r\n    );\r\n\r\n    if (result.status !== 0) {\r\n      throw new Error(`git hash-object exited with status ${result.status}: ${result.stderr}`);\r\n    }\r\n\r\n    const hashStdout: string = result.stdout.trim();\r\n\r\n    // The result of \"git hash-object\" will be a list of file hashes delimited by newlines\r\n    const hashes: string[] = hashStdout.split('\\n');\r\n\r\n    if (hashes.length !== filesToHash.length) {\r\n      throw new Error(`Passed ${filesToHash.length} file paths to Git to hash, but received ${hashes.length} hashes.`);\r\n    }\r\n\r\n    for (let i: number = 0; i < hashes.length; i++) {\r\n      const hash: string = hashes[i];\r\n      const filePath: string = filesToHash[i];\r\n      changes.set(filePath, hash);\r\n    }\r\n\r\n  }\r\n\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Executes \"git ls-tree\" in a folder\r\n */\r\nexport function gitLsTree(path: string): string {\r\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n    'git',\r\n    ['ls-tree', 'HEAD', '-r'],\r\n    {\r\n      currentWorkingDirectory: path\r\n    }\r\n  );\r\n\r\n  if (result.status !== 0) {\r\n    throw new Error(`git ls-tree exited with status ${result.status}: ${result.stderr}`);\r\n  }\r\n\r\n  return result.stdout;\r\n}\r\n\r\n/**\r\n * Executes \"git status\" in a folder\r\n */\r\nexport function gitStatus(path: string): string {\r\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n    'git',\r\n    ['status', '-s', '-u', '.'],\r\n    {\r\n      currentWorkingDirectory: path\r\n    }\r\n  );\r\n\r\n  if (result.status !== 0) {\r\n    throw new Error(`git status exited with status ${result.status}: ${result.stderr}`);\r\n  }\r\n\r\n  return result.stdout;\r\n}\r\n\r\n/**\r\n * Builds an object containing hashes for the files under the specified `packagePath` folder.\r\n * @param packagePath - The folder path to derive the package dependencies from. This is typically the folder\r\n *                      containing package.json.  If omitted, the default value is the current working directory.\r\n * @param excludedPaths - An optional array of file path exclusions. If a file should be omitted from the list\r\n *                         of dependencies, use this to exclude it.\r\n * @returns the package-deps.json file content\r\n *\r\n * @public\r\n */\r\nexport function getPackageDeps(packagePath: string = process.cwd(), excludedPaths?: string[]): IPackageDeps {\r\n  const excludedHashes: { [key: string]: boolean } = {};\r\n\r\n  if (excludedPaths) {\r\n    excludedPaths.forEach(path => excludedHashes[path] = true);\r\n  }\r\n\r\n  const changes: IPackageDeps = {\r\n    files: {}\r\n  };\r\n\r\n  const gitLsOutput: string = gitLsTree(packagePath);\r\n\r\n  // Add all the checked in hashes\r\n  parseGitLsTree(gitLsOutput).forEach((hash: string, filename: string) => {\r\n    if (!excludedHashes[filename]) {\r\n      changes.files[filename] = hash;\r\n    }\r\n  });\r\n\r\n  // Update the checked in hashes with the current repo status\r\n  const gitStatusOutput: string = gitStatus(packagePath);\r\n  const currentlyChangedFiles: Map<string, string> =\r\n    parseGitStatus(gitStatusOutput, packagePath);\r\n\r\n  const filesToHash: string[] = [];\r\n  currentlyChangedFiles.forEach((changeType: string, filename: string) => {\r\n    if (changeType === 'D') {\r\n      delete changes.files[filename];\r\n    } else {\r\n      if (!excludedHashes[filename]) {\r\n        filesToHash.push(filename);\r\n      }\r\n    }\r\n  });\r\n\r\n  getGitHashForFiles(filesToHash, packagePath).forEach((hash: string, filename: string) => {\r\n    changes.files[filename] = hash;\r\n  });\r\n\r\n  return changes;\r\n}\r\n"]}