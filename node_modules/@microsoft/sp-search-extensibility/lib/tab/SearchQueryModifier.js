/// <reference types='@ms/sp-tab-tasklib' />
/**
 * Tests to verify Search Query Modifier behavior.
 */
var SearchQueryModifier = /** @class */ (function () {
    function SearchQueryModifier() {
    }
    SearchQueryModifier.prototype.TestName = function () {
        return 'Search Query Modifier Test';
    };
    SearchQueryModifier.prototype.TestOwner = function () {
        return 'mpasarin';
    };
    SearchQueryModifier.prototype.TestOwnerTeam = function () {
        return 'CSI\\Search';
    };
    /**
     * These scripts are required for the tests to run.
     */
    SearchQueryModifier.prototype.TestIncludeScripts = function () {
        return [
            '<ProductScriptsLocation>msajaxbundle.debug.js',
            '<ProductScriptsLocation>sp.runtime.debug.js',
            '<ProductScriptsLocation>sp.debug.js',
            '<TestLocation>/TabTaskLib.debug.js',
            '<AzureTaskLibLocation>/sp-tab-tasklib.js'
        ];
    };
    SearchQueryModifier.prototype.TestSetup = function () {
        var azurePath = TAB.Settings.Get('AzurePath');
        var loaderUrl = azurePath + "/sp-loader-assembly_default.js";
        SPTaskLib.PageUtil.SetDebugManifests({ loaderUrl: loaderUrl });
        this._dynamicDataConsumerWebPart = new SPTaskLib.DynamicDataConsumerWebPart();
        this._pageName = TAB.GetUniqueName('SearchQueryModifierTest');
        this._AddTaskSetupTestPage();
    };
    SearchQueryModifier.prototype.TestRun = function () {
        if (!SPTaskLib.SPFlightUtil.isEnabled(1626 /* CSISearchQueryExtension */)) {
            TAB.Log.DidNotRun('Did not run test because CSISearchQueryExtension flight is not enabled.');
            return;
        }
        this._AddTaskTestWithNoSearchQuery();
        this._AddTaskTestWithSearchQuery();
        this._AddTaskTestWithSearchQueryAndExtension();
    };
    SearchQueryModifier.prototype.TestTeardown = function () {
        SPTaskLib.TeamSitePage.AddRestTaskDeletePage();
        TAB.Log.AddTaskPass('Test completed.');
    };
    SearchQueryModifier.prototype._AddTaskSetupTestPage = function () {
        var _this = this;
        TAB.Log.AddTaskComment('Creating page for test.');
        SPTaskLib.PageUtil.AddTaskCreateSitePage();
        SPTaskLib.TeamSitePage.AddTaskAddPageTitle(this._pageName);
        TAB.AddTask(TAB.MakeTask(function () {
            if (SPTaskLib.SPFlightUtil.isEnabled(1626 /* CSISearchQueryExtension */)) {
                _this._AddTaskSetupDynamicDataWebPart();
            }
        }));
        SPTaskLib.TeamSitePage.AddTaskSavePage();
        TAB.Log.AddTaskComment('Created page for test.');
    };
    SearchQueryModifier.prototype._AddTaskSetupDynamicDataWebPart = function () {
        TAB.Log.AddTaskComment('Creating dynamic data web part.');
        this._dynamicDataConsumerWebPart.AddTaskSetDynamicDataSource('[PageContext:SearchData]');
        TAB.Log.AddTaskComment('Created dynamic data web part.');
    };
    SearchQueryModifier.prototype._AddTaskTestWithNoSearchQuery = function () {
        TAB.Log.AddTaskComment('Test: Check page with no search query.');
        // The page with no search query is already loaded.
        TAB.AddTask(undefined, this._dynamicDataConsumerWebPart.WaitForDynamicDataRendering());
        this._AddTaskValidateSearchQueryValue(undefined, 'Search query data without a search query should be undefined');
    };
    SearchQueryModifier.prototype._AddTaskTestWithSearchQuery = function () {
        TAB.Log.AddTaskComment('Test: Check page with search query and no extensions.');
        TAB.AddTask(TAB.LoadPage(this._getPageUrl('q=test')), SPTaskLib.TeamSitePage.PageReady());
        TAB.AddTask(undefined, this._dynamicDataConsumerWebPart.WaitForDynamicDataRendering());
        this._AddTaskValidateSearchQueryValue('test', 'Search query data with a search query should be the search query');
    };
    SearchQueryModifier.prototype._AddTaskTestWithSearchQueryAndExtension = function () {
        TAB.Log.AddTaskComment('Test: Check page with search query and a search query modifier.');
        var customActions = '{"124cf3a4-cd42-4f3d-a21f-8ae3d416859c":' +
            '{"location":"ClientSideExtension.SearchQueryModifier"}}';
        TAB.AddTask(TAB.LoadPage(this._getPageUrl('q=test', customActions)), SPTaskLib.TeamSitePage.PageReady());
        TAB.AddTask(undefined, this._dynamicDataConsumerWebPart.WaitForDynamicDataRendering());
        this._AddTaskValidateSearchQueryValue('test TAB TEST', 'Search query data with a search query and an extension should be the modified search query'); // tslint:disable-line: max-line-length
    };
    /**
     * Validates that the dynamic data web part has the expected value.
     * It waits until the value has been set. This avoids a possible race condition when the extensions haven't executed.
     */
    SearchQueryModifier.prototype._AddTaskValidateSearchQueryValue = function (value, message) {
        var _this = this;
        TAB.AddTask(undefined, // tslint:disable-line: no-any
        TAB.MakeWaiter(function () {
            var ddValue = _this._getDynamicDataValue(); // tslint:disable-line: no-any
            return ddValue && ddValue.searchQuery === value;
        }));
        TAB.AddTask(TAB.MakeTask(function () {
            var ddValue = _this._getDynamicDataValue(); // tslint:disable-line: no-any
            TAB.Log.Verify(ddValue && ddValue.searchQuery === value, message + " - The actual value was \"" + JSON.stringify(ddValue) + "\".");
        }));
    };
    SearchQueryModifier.prototype._getPageUrl = function (params, customActions) {
        return SPTaskLib.PageUtil.CreatePageUrl("/SitePages/" + this._pageName + ".aspx", { params: params, customActions: customActions });
    };
    /**
     * Returns the object stored in the dynamic data value as a JSON. Returns undefined when there is no value or
     * the data is not a JSON object.
     */
    SearchQueryModifier.prototype._getDynamicDataValue = function () {
        var stringValue = this._dynamicDataConsumerWebPart.GetDynamicDataValue();
        try {
            return JSON.parse(stringValue);
        }
        catch (e) {
            return undefined;
        }
    };
    return SearchQueryModifier;
}());
TabTest = SearchQueryModifier;
//# sourceMappingURL=SearchQueryModifier.js.map