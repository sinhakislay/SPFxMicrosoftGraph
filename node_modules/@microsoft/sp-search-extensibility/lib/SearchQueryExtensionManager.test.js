var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { ServiceScope } from '@microsoft/sp-core-library';
import BaseSearchQueryModifier from './BaseSearchQueryModifier';
import SearchQueryExtensionManager from './SearchQueryExtensionManager';
var TestExtension = /** @class */ (function (_super) {
    __extends(TestExtension, _super);
    function TestExtension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestExtension.prototype, "componentId", {
        get: function () { return '00000000-0000-0000-0000-000000000000'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestExtension.prototype, "manifest", {
        // tslint:disable-next-line: no-any
        get: function () {
            return {
                alias: 'TestExtension'
            };
        },
        enumerable: true,
        configurable: true
    });
    TestExtension.prototype.modifySearchQuery = function (query) {
        query.queryText = query.queryText + ' test';
        return Promise.resolve(query);
    };
    return TestExtension;
}(BaseSearchQueryModifier));
var SlowExtension = /** @class */ (function (_super) {
    __extends(SlowExtension, _super);
    function SlowExtension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SlowExtension.prototype, "componentId", {
        get: function () { return '00000000-0000-0000-0000-000000000000'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlowExtension.prototype, "manifest", {
        // tslint:disable-next-line: no-any
        get: function () {
            return {
                alias: 'SlowExtension'
            };
        },
        enumerable: true,
        configurable: true
    });
    SlowExtension.prototype.modifySearchQuery = function (query) {
        return new Promise(function (resolve) { setTimeout(function () { resolve(__assign({}, query, { queryText: 'BAD' })); }, 100); });
    };
    Object.defineProperty(SlowExtension.prototype, "timeout", {
        get: function () { return 1; },
        enumerable: true,
        configurable: true
    });
    return SlowExtension;
}(BaseSearchQueryModifier));
describe('SearchQueryExtensionManager', function () {
    test('getSearchQuery with two extensions', function (done) {
        var manager = new SearchQueryExtensionManager(ServiceScope.startNewRoot());
        // tslint:disable: no-any
        manager._extensions.push(new TestExtension());
        manager._extensions.push(new TestExtension());
        // tslint:enable: no-any
        var query = manager.getSearchQuery('aaa');
        query.then(function (q) {
            expect(q).toEqual('aaa test test');
            done();
        }).catch(function (e) {
            fail();
            done();
        });
    });
});
test('getSearchQuery with an extension that times out', function (done) {
    var manager = new SearchQueryExtensionManager(ServiceScope.startNewRoot());
    // tslint:disable: no-any
    manager._extensions.push(new SlowExtension());
    // tslint:enable: no-any
    var query = manager.getSearchQuery('aaa');
    query.then(function (q) {
        expect(q).toEqual('aaa');
        done();
    }).catch(function (e) {
        fail();
        done();
    });
});
//# sourceMappingURL=SearchQueryExtensionManager.test.js.map