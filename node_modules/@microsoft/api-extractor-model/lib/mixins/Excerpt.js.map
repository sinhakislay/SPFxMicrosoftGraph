{"version":3,"file":"Excerpt.js","sourceRoot":"","sources":["../../src/mixins/Excerpt.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,oEAAoD;AAuBpD,cAAc;AACd,MAAa,YAAY;IAKvB,YAAmB,IAAsB,EAAE,IAAY,EAAE,kBAAyC;QAChG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAElB,kGAAkG;QAClG,4FAA4F;QAC5F,kFAAkF;QAClF,IAAI,CAAC,KAAK,GAAG,wBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAChD,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;CACF;AA1BD,oCA0BC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,MAAa,OAAO;IAOlB,YAAmB,MAAmC,EAAE,UAA8B;QACpF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;eAC9E,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SACxC;IACH,CAAC;IAED,IAAW,IAAI;QACb,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;YAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;iBACnF,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC5B;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IACjE,CAAC;CACF;AA5BD,0BA4BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { DeclarationReference } from '@microsoft/tsdoc/lib/beta/DeclarationReference';\r\nimport { Text } from '@microsoft/node-core-library';\r\n\r\n/** @public */\r\nexport const enum ExcerptTokenKind {\r\n  Content = 'Content',\r\n\r\n  // Soon we will support hyperlinks to other API declarations\r\n  Reference = 'Reference'\r\n}\r\n\r\n/** @public */\r\nexport interface IExcerptTokenRange {\r\n  startIndex: number;\r\n  endIndex: number;\r\n}\r\n\r\n/** @public */\r\nexport interface IExcerptToken {\r\n  readonly kind: ExcerptTokenKind;\r\n  text: string;\r\n  canonicalReference?: string;\r\n}\r\n\r\n/** @public */\r\nexport class ExcerptToken {\r\n  private readonly _kind: ExcerptTokenKind;\r\n  private readonly _text: string;\r\n  private readonly _canonicalReference: DeclarationReference | undefined;\r\n\r\n  public constructor(kind: ExcerptTokenKind, text: string, canonicalReference?: DeclarationReference) {\r\n    this._kind = kind;\r\n\r\n    // Standardize the newlines across operating systems. Even though this may deviate from the actual\r\n    // input source file that was parsed, it's useful because the newline gets serialized inside\r\n    // a string literal in .api.json, which cannot be automatically normalized by Git.\r\n    this._text = Text.convertToLf(text);\r\n    this._canonicalReference = canonicalReference;\r\n  }\r\n\r\n  public get kind(): ExcerptTokenKind {\r\n    return this._kind;\r\n  }\r\n\r\n  public get text(): string {\r\n    return this._text;\r\n  }\r\n\r\n  public get canonicalReference(): DeclarationReference | undefined {\r\n    return this._canonicalReference;\r\n  }\r\n}\r\n\r\n/**\r\n * This class is used by {@link ApiDeclaredItem} to represent a source code excerpt containing\r\n * a TypeScript declaration.\r\n *\r\n * @remarks\r\n *\r\n * The main excerpt is parsed into an array of tokens, and the main excerpt's token range will span all of these\r\n * tokens.  The declaration may also have have \"captured\" excerpts, which are other subranges of tokens.\r\n * For example, if the main excerpt is a function declaration, it will also have a captured excerpt corresponding\r\n * to the return type of the function.\r\n *\r\n * An excerpt may be empty (i.e. a token range containing zero tokens).  For example, if a function's return value\r\n * is not explicitly declared, then the returnTypeExcerpt will be empty.  By contrast, a class constructor cannot\r\n * have a return value, so ApiConstructor has no returnTypeExcerpt property at all.\r\n *\r\n * @public\r\n */\r\nexport class Excerpt {\r\n  public readonly tokenRange: Readonly<IExcerptTokenRange>;\r\n\r\n  public readonly tokens: ReadonlyArray<ExcerptToken>;\r\n\r\n  private _text: string | undefined;\r\n\r\n  public constructor(tokens: ReadonlyArray<ExcerptToken>, tokenRange: IExcerptTokenRange) {\r\n    this.tokens = tokens;\r\n    this.tokenRange = tokenRange;\r\n\r\n    if (this.tokenRange.startIndex < 0 || this.tokenRange.endIndex > this.tokens.length\r\n      || this.tokenRange.startIndex > this.tokenRange.endIndex) {\r\n      throw new Error('Invalid token range');\r\n    }\r\n  }\r\n\r\n  public get text(): string {\r\n    if (this._text === undefined) {\r\n      this._text = this.tokens.slice(this.tokenRange.startIndex, this.tokenRange.endIndex)\r\n      .map(x => x.text).join('');\r\n    }\r\n    return this._text;\r\n  }\r\n\r\n  public get isEmpty(): boolean {\r\n    return this.tokenRange.startIndex === this.tokenRange.endIndex;\r\n  }\r\n}\r\n"]}