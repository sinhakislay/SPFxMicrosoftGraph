{"version":3,"file":"ReleaseTag.js","sourceRoot":"","sources":["../../src/aedoc/ReleaseTag.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D;;;;;;;;;;;;;IAaI;AACJ,IAAY,UA2BX;AA3BD,WAAY,UAAU;IACpB;;OAEG;IACH,2CAAQ,CAAA;IACR;;;;OAIG;IACH,mDAAY,CAAA;IACZ;;;OAGG;IACH,6CAAS,CAAA;IACT;;;;OAIG;IACH,2CAAQ,CAAA;IACR;;;OAGG;IACH,+CAAU,CAAA;AACZ,CAAC,EA3BW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QA2BrB;AAED;;;GAGG;AACH,WAAiB,UAAU;IACzB;;;;;OAKG;IACH,SAAgB,UAAU,CAAC,UAAsB;QAC/C,QAAQ,UAAU,EAAE;YAClB,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,QAAQ,CAAC;YACtC,KAAK,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,WAAW,CAAC;YAC7C,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,QAAQ,CAAC;YACvC,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,OAAO,CAAC;YACrC,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,OAAO,SAAS,CAAC;SAC1C;QACD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IATe,qBAAU,aASzB,CAAA;IAED;;;;;;;OAOG;IACH,SAAgB,OAAO,CAAC,CAAa,EAAE,CAAa;QAClD,OAAO,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAFe,kBAAO,UAEtB,CAAA;AAEH,CAAC,EA9BgB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QA8B1B","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n  * A \"release tag\" is a custom TSDoc tag that is applied to an API to communicate the level of support\r\n  * provided for third-party developers.\r\n  *\r\n  * @remarks\r\n  *\r\n  * The four release tags are: `@internal`, `@alpha`, `@beta`, and `@public`. They are applied to API items such\r\n  * as classes, member functions, enums, etc.  The release tag applies recursively to members of a container\r\n  * (e.g. class or interface). For example, if a class is marked as `@beta`, then all of its members automatically\r\n  * have this status; you DON'T need add the `@beta` tag to each member function. However, you could add\r\n  * `@internal` to a member function to give it a different release status.\r\n  *\r\n  * @public\r\n  */\r\nexport enum ReleaseTag {\r\n  /**\r\n   * No release tag was specified in the AEDoc summary.\r\n   */\r\n  None = 0,\r\n  /**\r\n   * Indicates that an API item is meant only for usage by other NPM packages from the same\r\n   * maintainer. Third parties should never use \"internal\" APIs. (To emphasize this, their\r\n   * names are prefixed by underscores.)\r\n   */\r\n  Internal = 1,\r\n  /**\r\n   * Indicates that an API item is eventually intended to be public, but currently is in an\r\n   * early stage of development. Third parties should not use \"alpha\" APIs.\r\n   */\r\n  Alpha = 2,\r\n  /**\r\n   * Indicates that an API item has been released in an experimental state. Third parties are\r\n   * encouraged to try it and provide feedback. However, a \"beta\" API should NOT be used\r\n   * in production.\r\n   */\r\n  Beta = 3,\r\n  /**\r\n   * Indicates that an API item has been officially released. It is part of the supported\r\n   * contract (e.g. SemVer) for a package.\r\n   */\r\n  Public = 4\r\n}\r\n\r\n/**\r\n * Helper functions for working with the `ReleaseTag` enum.\r\n * @public\r\n */\r\nexport namespace ReleaseTag {\r\n  /**\r\n   * Returns the TSDoc tag name for a `ReleaseTag` value.\r\n   *\r\n   * @remarks\r\n   * For example, `getTagName(ReleaseTag.Internal)` would return the string `@internal`.\r\n   */\r\n  export function getTagName(releaseTag: ReleaseTag): string {\r\n    switch (releaseTag) {\r\n      case ReleaseTag.None: return '(none)';\r\n      case ReleaseTag.Internal: return '@internal';\r\n      case ReleaseTag.Alpha: return '@alpha';\r\n      case ReleaseTag.Beta: return '@beta';\r\n      case ReleaseTag.Public: return '@public';\r\n    }\r\n    throw new Error('Unsupported release tag');\r\n  }\r\n\r\n  /**\r\n   * Compares two `ReleaseTag` values. Their values must not be `ReleaseTag.None`.\r\n   * @returns 0 if `a` and `b` are equal, a positive number if `a` is more public than `b`,\r\n   * and a negative number if `a` is less public than `b`.\r\n   * @remarks\r\n   * For example, `compareReleaseTag(ReleaseTag.Beta, ReleaseTag.Alpha)` will return a positive\r\n   * number because beta is more public than alpha.\r\n   */\r\n  export function compare(a: ReleaseTag, b: ReleaseTag): number {\r\n    return a - b;\r\n  }\r\n\r\n}\r\n"]}