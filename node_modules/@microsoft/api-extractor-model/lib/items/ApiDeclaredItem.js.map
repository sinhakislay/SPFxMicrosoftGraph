{"version":3,"file":"ApiDeclaredItem.js","sourceRoot":"","sources":["../../src/items/ApiDeclaredItem.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.s\r\n\r\nimport { DeclarationReference } from '@microsoft/tsdoc/lib/beta/DeclarationReference';\r\nimport { ApiDocumentedItem, IApiDocumentedItemJson, IApiDocumentedItemOptions } from './ApiDocumentedItem';\r\nimport { Excerpt, ExcerptToken, IExcerptTokenRange, IExcerptToken } from '../mixins/Excerpt';\r\nimport { DeserializerContext } from '../model/DeserializerContext';\r\n\r\n/**\r\n * Constructor options for {@link ApiDeclaredItem}.\r\n * @public\r\n */\r\nexport interface IApiDeclaredItemOptions extends IApiDocumentedItemOptions {\r\n  excerptTokens: IExcerptToken[];\r\n}\r\n\r\nexport interface IApiDeclaredItemJson extends IApiDocumentedItemJson {\r\n  excerptTokens: IExcerptToken[];\r\n}\r\n\r\n/**\r\n * The base class for API items that have an associated source code excerpt containing a TypeScript declaration.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * Most `ApiItem` subclasses have declarations and thus extend `ApiDeclaredItem`.  Counterexamples include\r\n * `ApiModel` and `ApiPackage`, which do not have any corresponding TypeScript source code.\r\n *\r\n * @public\r\n */\r\n// tslint:disable-next-line:interface-name\r\nexport class ApiDeclaredItem extends ApiDocumentedItem {\r\n  private _excerptTokens: ExcerptToken[];\r\n  private _excerpt: Excerpt;\r\n\r\n  /** @override */\r\n  public static onDeserializeInto(options: Partial<IApiDeclaredItemOptions>, context: DeserializerContext,\r\n    jsonObject: IApiDeclaredItemJson): void {\r\n\r\n    super.onDeserializeInto(options, context, jsonObject);\r\n\r\n    options.excerptTokens = jsonObject.excerptTokens;\r\n  }\r\n\r\n  public constructor(options: IApiDeclaredItemOptions) {\r\n    super(options);\r\n\r\n    this._excerptTokens = options.excerptTokens.map(x => {\r\n      const canonicalReference: DeclarationReference | undefined = x.canonicalReference === undefined ? undefined :\r\n        DeclarationReference.parse(x.canonicalReference);\r\n      return new ExcerptToken(x.kind, x.text, canonicalReference);\r\n    });\r\n    this._excerpt = new Excerpt(this.excerptTokens, { startIndex: 0, endIndex: this.excerptTokens.length });\r\n  }\r\n\r\n  /**\r\n   * The source code excerpt where the API item is declared.\r\n   */\r\n  public get excerpt(): Excerpt {\r\n    return this._excerpt;\r\n  }\r\n\r\n  /**\r\n   * The individual source code tokens that comprise the main excerpt.\r\n   */\r\n  public get excerptTokens(): ReadonlyArray<ExcerptToken> {\r\n    return this._excerptTokens;\r\n  }\r\n\r\n  /**\r\n   * If the API item has certain important modifier tags such as `@sealed`, `@virtual`, or `@override`,\r\n   * this prepends them as a doc comment above the excerpt.\r\n   */\r\n  public getExcerptWithModifiers(): string {\r\n    const excerpt: string = this.excerpt.text;\r\n    const modifierTags: string[] = [];\r\n\r\n    if (excerpt.length > 0) {\r\n      if (this instanceof ApiDocumentedItem) {\r\n        if (this.tsdocComment) {\r\n          if (this.tsdocComment.modifierTagSet.isSealed()) {\r\n            modifierTags.push('@sealed');\r\n          }\r\n          if (this.tsdocComment.modifierTagSet.isVirtual()) {\r\n            modifierTags.push('@virtual');\r\n          }\r\n          if (this.tsdocComment.modifierTagSet.isOverride()) {\r\n            modifierTags.push('@override');\r\n          }\r\n        }\r\n        if (modifierTags.length > 0) {\r\n          return '/** ' + modifierTags.join(' ') + ' */\\n'\r\n            + excerpt;\r\n        }\r\n      }\r\n    }\r\n\r\n    return excerpt;\r\n  }\r\n\r\n  /** @override */\r\n  public serializeInto(jsonObject: Partial<IApiDeclaredItemJson>): void {\r\n    super.serializeInto(jsonObject);\r\n    jsonObject.excerptTokens = this.excerptTokens.map(x => {\r\n      const excerptToken: IExcerptToken = { kind: x.kind, text: x.text };\r\n      if (x.canonicalReference !== undefined) {\r\n        excerptToken.canonicalReference = x.canonicalReference.toString();\r\n      }\r\n      return excerptToken;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Constructs a new {@link Excerpt} corresponding to the provided token range.\r\n   */\r\n  public buildExcerpt(tokenRange: IExcerptTokenRange): Excerpt {\r\n    return new Excerpt(this.excerptTokens, tokenRange);\r\n  }\r\n}\r\n"]}