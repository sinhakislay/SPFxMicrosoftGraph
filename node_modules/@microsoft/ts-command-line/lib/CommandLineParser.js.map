{"version":3,"file":"CommandLineParser.js","sourceRoot":"","sources":["../src/CommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as argparse from 'argparse';\r\nimport * as colors from 'colors';\r\n\r\nimport { CommandLineAction } from './CommandLineAction';\r\nimport { CommandLineParameterProvider, ICommandLineParserData } from './CommandLineParameterProvider';\r\n\r\n/**\r\n * Options for the {@link CommandLineParser} constructor.\r\n * @public\r\n */\r\nexport interface ICommandLineParserOptions {\r\n  /**\r\n   * The name of your tool when invoked from the command line\r\n   */\r\n  toolFilename: string;\r\n\r\n  /**\r\n   * General documentation that is included in the \"--help\" main page\r\n   */\r\n  toolDescription: string;\r\n}\r\n\r\nexport class CommandLineParserExitError extends Error {\r\n  public readonly exitCode: number;\r\n\r\n  constructor(exitCode: number, message: string) {\r\n    super(message);\r\n\r\n    // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc\r\n    // tslint:disable-next-line:max-line-length\r\n    // https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n    //\r\n    // Note: the prototype must also be set on any classes which extend this one\r\n    (this as any).__proto__ = CommandLineParserExitError.prototype; // tslint:disable-line:no-any\r\n\r\n    this.exitCode = exitCode;\r\n  }\r\n}\r\n\r\nclass CustomArgumentParser extends argparse.ArgumentParser {\r\n  public exit(status: number, message: string): void { // override\r\n    throw new CommandLineParserExitError(status, message);\r\n  }\r\n\r\n  public error(err: Error | string): void { // override\r\n    // Ensure the ParserExitError bubbles up to the top without any special processing\r\n    if (err instanceof CommandLineParserExitError) {\r\n      throw err;\r\n    }\r\n\r\n    super.error(err);\r\n  }\r\n}\r\n\r\n/**\r\n * The \"argparse\" library is a relatively advanced command-line parser with features such\r\n * as word-wrapping and intelligible error messages (that are lacking in other similar\r\n * libraries such as commander, yargs, and nomnom).  Unfortunately, its ruby-inspired API\r\n * is awkward to use.  The abstract base classes CommandLineParser and CommandLineAction\r\n * provide a wrapper for \"argparse\" that makes defining and consuming arguments quick\r\n * and simple, and enforces that appropriate documentation is provided for each parameter.\r\n *\r\n * @public\r\n */\r\nexport abstract class CommandLineParser extends CommandLineParameterProvider {\r\n  /** {@inheritDoc ICommandLineParserOptions.toolFilename} */\r\n  public readonly toolFilename: string;\r\n\r\n  /** {@inheritDoc ICommandLineParserOptions.toolDescription} */\r\n  public readonly toolDescription: string;\r\n\r\n  /**\r\n   * Reports which CommandLineAction was specified on the command line.\r\n   * @remarks\r\n   * The value will be assigned before onExecute() is invoked.\r\n   */\r\n  public selectedAction: CommandLineAction | undefined;\r\n\r\n  private _argumentParser: argparse.ArgumentParser;\r\n  private _actionsSubParser: argparse.SubParser;\r\n  private _options: ICommandLineParserOptions;\r\n  private _actions: CommandLineAction[];\r\n  private _actionsByName: Map<string, CommandLineAction>;\r\n  private _executed: boolean = false;\r\n\r\n  constructor(options: ICommandLineParserOptions) {\r\n    super();\r\n\r\n    this._options = options;\r\n    this._actions = [];\r\n    this._actionsByName = new  Map<string, CommandLineAction>();\r\n\r\n    this._argumentParser = new CustomArgumentParser({\r\n      addHelp: true,\r\n      prog: this._options.toolFilename,\r\n      description: this._options.toolDescription,\r\n      epilog: colors.bold('For detailed help about a specific command, use:'\r\n        + ` ${this._options.toolFilename} <command> -h`)\r\n    });\r\n\r\n    this._actionsSubParser = this._argumentParser.addSubparsers({\r\n      metavar: '<command>',\r\n      dest: 'action'\r\n    });\r\n\r\n    this.onDefineParameters();\r\n  }\r\n\r\n  /**\r\n   * Returns the list of actions that were defined for this CommandLineParser object.\r\n   */\r\n  public get actions(): ReadonlyArray<CommandLineAction> {\r\n    return this._actions;\r\n  }\r\n\r\n  /**\r\n   * Defines a new action that can be used with the CommandLineParser instance.\r\n   */\r\n  public addAction(action: CommandLineAction): void {\r\n    action._buildParser(this._actionsSubParser);\r\n    this._actions.push(action);\r\n    this._actionsByName.set(action.actionName, action);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the action with the specified name.  If no matching action is found,\r\n   * an exception is thrown.\r\n   */\r\n  public getAction(actionName: string): CommandLineAction {\r\n    const action: CommandLineAction | undefined = this.tryGetAction(actionName);\r\n    if (!action) {\r\n      throw new Error(`The action \"${actionName}\" was not defined`);\r\n    }\r\n    return action;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the action with the specified name.  If no matching action is found,\r\n   * undefined is returned.\r\n   */\r\n  public tryGetAction(actionName: string): CommandLineAction | undefined {\r\n    return this._actionsByName.get(actionName);\r\n  }\r\n\r\n  /**\r\n   * The program entry point will call this method to begin parsing command-line arguments\r\n   * and executing the corresponding action.\r\n   *\r\n   * @remarks\r\n   * The returned promise will never reject:  If an error occurs, it will be printed\r\n   * to stderr, process.exitCode will be set to 1, and the promise will resolve to false.\r\n   * This simplifies the most common usage scenario where the program entry point doesn't\r\n   * want to be involved with the command-line logic, and will discard the promise without\r\n   * a then() or catch() block.\r\n   *\r\n   * If your caller wants to trap and handle errors, use {@link CommandLineParser.executeWithoutErrorHandling}\r\n   * instead.\r\n   *\r\n   * @param args - the command-line arguments to be parsed; if omitted, then\r\n   *               the process.argv will be used\r\n   */\r\n  public execute(args?: string[]): Promise<boolean> {\r\n    return this.executeWithoutErrorHandling(args).then(() => {\r\n      return true;\r\n    }).catch((err) => {\r\n      if (err instanceof CommandLineParserExitError) {\r\n        // executeWithoutErrorHandling() handles the successful cases,\r\n        // so here we can assume err has a nonzero exit code\r\n        if (err.message) {\r\n          console.error(err.message);\r\n        }\r\n        if (!process.exitCode) {\r\n          process.exitCode = err.exitCode;\r\n        }\r\n      } else {\r\n        const message: string = (err.message || 'An unknown error occurred').trim();\r\n        console.error(colors.red('Error: ' + message));\r\n        if (!process.exitCode) {\r\n          process.exitCode = 1;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is similar to {@link CommandLineParser.execute}, except that execution errors\r\n   * simply cause the promise to reject.  It is the caller's responsibility to trap\r\n   */\r\n  public executeWithoutErrorHandling(args?: string[]): Promise<void> {\r\n    try {\r\n      if (this._executed) {\r\n        // In the future we could allow the same parser to be invoked multiple times\r\n        // with different arguments.  We'll do that work as soon as someone encounters\r\n        // a real world need for it.\r\n        throw new Error('execute() was already called for this parser instance');\r\n      }\r\n      this._executed = true;\r\n      if (!args) {\r\n        // 0=node.exe, 1=script name\r\n        args = process.argv.slice(2);\r\n      }\r\n      if (args.length === 0) {\r\n        this._argumentParser.printHelp();\r\n        return Promise.resolve();\r\n      }\r\n      const data: ICommandLineParserData = this._argumentParser.parseArgs(args);\r\n\r\n      this._processParsedData(data);\r\n\r\n      for (const action of this._actions) {\r\n        if (action.actionName === data.action) {\r\n          this.selectedAction = action;\r\n          action._processParsedData(data);\r\n          break;\r\n        }\r\n      }\r\n      if (!this.selectedAction) {\r\n        throw new Error('Unrecognized action');\r\n      }\r\n\r\n      return this.onExecute();\r\n    } catch (err) {\r\n      if (err instanceof CommandLineParserExitError) {\r\n        if (!err.exitCode) {\r\n          // non-error exit modeled using exception handling\r\n          if (err.message) {\r\n            console.log(err.message);\r\n          }\r\n          return Promise.resolve();\r\n        }\r\n      }\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameterProvider._getArgumentParser}\r\n   * @internal\r\n   */\r\n  protected _getArgumentParser(): argparse.ArgumentParser { // override\r\n    return this._argumentParser;\r\n  }\r\n\r\n  /**\r\n   * This hook allows the subclass to perform additional operations before or after\r\n   * the chosen action is executed.\r\n   */\r\n  protected onExecute(): Promise<void> {\r\n    return this.selectedAction!._execute();\r\n  }\r\n}\r\n"]}