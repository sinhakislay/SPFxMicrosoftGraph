{"version":3,"file":"CommandLineDefinition.js","sourceRoot":"","sources":["../src/CommandLineDefinition.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * For use with CommandLineParser, this interface represents a generic command-line parameter\r\n *\r\n * @public\r\n */\r\nexport interface IBaseCommandLineDefinition {\r\n  /**\r\n   * The long name of the flag including double dashes, e.g. \"--do-something\"\r\n   */\r\n  parameterLongName: string;\r\n\r\n  /**\r\n   * An optional short name for the flag including the dash, e.g. \"-d\"\r\n   */\r\n  parameterShortName?: string;\r\n\r\n  /**\r\n   * Documentation for the flag, that will be shown when invoking the tool with \"--help\"\r\n   */\r\n  description: string;\r\n\r\n  /**\r\n   * If true, then an error occurs if the parameter was not included on the command-line.\r\n   */\r\n  required?: boolean;\r\n\r\n  /**\r\n   * The name of an environment variable that the parameter value will be read from,\r\n   * if it was omitted from the command-line.  An error will be reported if the\r\n   * environment value cannot be parsed.\r\n   * @remarks\r\n   * The environment variable name must consist only of upper-case letters, numbers,\r\n   * and underscores. It may not start with a number.\r\n   *\r\n   * This feature cannot be used when {@link IBaseCommandLineDefinition.required} is true,\r\n   * because in that case the environmentVariable would never be used.\r\n   */\r\n  environmentVariable?: string;\r\n}\r\n\r\n/**\r\n * The common base interface for parameter types that accept an argument.\r\n *\r\n * @remarks\r\n * An argument is an accompanying command-line token, such as \"123\" in the\r\n * example \"--max-count 123\".\r\n * @public\r\n */\r\nexport interface IBaseCommandLineDefinitionWithArgument extends IBaseCommandLineDefinition {\r\n  /**\r\n   * The name of the argument, which will be shown in the command-line help.\r\n   *\r\n   * @remarks\r\n   * For example, if the parameter name is '--count\" and the argument name is \"NUMBER\",\r\n   * then the command-line help would display \"--count NUMBER\".  The argument name must\r\n   * be comprised of upper-case letters, numbers, and underscores.  It should be kept short.\r\n   */\r\n  argumentName: string;\r\n}\r\n\r\n/**\r\n * For use with CommandLineParser, this interface represents a parameter which is constrained to\r\n * a list of possible options\r\n *\r\n * @public\r\n */\r\nexport interface ICommandLineChoiceDefinition extends IBaseCommandLineDefinition {\r\n  /**\r\n   * A list of strings (which contain no spaces), of possible options which can be selected\r\n   */\r\n  alternatives: string[];\r\n\r\n  /**\r\n   * {@inheritDoc ICommandLineStringDefinition.defaultValue}\r\n   */\r\n  defaultValue?: string;\r\n}\r\n\r\n/**\r\n * For use with CommandLineParser, this interface represents a command line parameter\r\n * that is a boolean flag.\r\n *\r\n * @public\r\n */\r\nexport interface ICommandLineFlagDefinition extends IBaseCommandLineDefinition { }\r\n\r\n/**\r\n * For use with CommandLineParser, this interface represents a command line parameter\r\n * whose argument is an integer value.\r\n *\r\n * @public\r\n */\r\nexport interface ICommandLineIntegerDefinition extends IBaseCommandLineDefinitionWithArgument {\r\n  /**\r\n   * {@inheritDoc ICommandLineStringDefinition.defaultValue}\r\n   */\r\n  defaultValue?: number;\r\n}\r\n\r\n/**\r\n * For use with CommandLineParser, this interface represents a command line parameter\r\n * whose argument is a string value.\r\n *\r\n * @public\r\n */\r\nexport interface ICommandLineStringDefinition extends IBaseCommandLineDefinitionWithArgument {\r\n  /**\r\n   * The default value which will be used if the parameter is omitted from the command line.\r\n   *\r\n   * @remarks\r\n   * If a default value is specified, then {@link IBaseCommandLineDefinition.required}\r\n   * must not be true.  Instead, a custom error message should be used to report cases\r\n   * where a default value was not available.\r\n   */\r\n  defaultValue?: string;\r\n}\r\n\r\n/**\r\n * For use with CommandLineParser, this interface represents a command line parameter\r\n * whose argument is a list of strings.\r\n *\r\n * @public\r\n */\r\nexport interface ICommandLineStringListDefinition extends IBaseCommandLineDefinitionWithArgument { }\r\n"]}