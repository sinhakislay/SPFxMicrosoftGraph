{"version":3,"file":"CommandLineParameterProvider.js","sourceRoot":"","sources":["../src/CommandLineParameterProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAW3D,iEASgC;AAWhC;;;;;GAKG;AACH,MAAsB,4BAA4B;IAMhD,gBAAgB;IAChB,0EAA0E;IAC1E;QACE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,qBAAqB,GAAG,IAAI,GAAG,EAAgC,CAAC;IACvE,CAAC;IAED;;OAEG;IACH,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;;;;OAMG;IACI,qBAAqB,CAAC,UAAwC;QACnE,MAAM,SAAS,GAA+B,IAAI,iDAA0B,CAAC,UAAU,CAAC,CAAC;QACzF,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,kBAAkB,CAAC,iBAAyB;QACjD,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,+CAAwB,CAAC,MAAM,CAAC,CAAC;IAChF,CAAC;IAED;;;;;;OAMG;IACI,mBAAmB,CAAC,UAAsC;QAC/D,MAAM,SAAS,GAA6B,IAAI,+CAAwB,CAAC,UAAU,CAAC,CAAC;QACrF,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,gBAAgB,CAAC,iBAAyB;QAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,+CAAwB,CAAC,IAAI,CAAC,CAAC;IAC9E,CAAC;IAED;;;;;OAKG;IACI,sBAAsB,CAAC,UAAyC;QACrE,MAAM,SAAS,GAAgC,IAAI,kDAA2B,CAAC,UAAU,CAAC,CAAC;QAC3F,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,mBAAmB,CAAC,iBAAyB;QAClD,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,+CAAwB,CAAC,OAAO,CAAC,CAAC;IACjF,CAAC;IAED;;;;;OAKG;IACI,qBAAqB,CAAC,UAAwC;QACnE,MAAM,SAAS,GAA+B,IAAI,iDAA0B,CAAC,UAAU,CAAC,CAAC;QACzF,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,kBAAkB,CAAC,iBAAyB;QACjD,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,+CAAwB,CAAC,MAAM,CAAC,CAAC;IAChF,CAAC;IAED;;;;;OAKG;IACI,yBAAyB,CAAC,UAA4C;QAC3E,MAAM,SAAS,GAAmC,IAAI,qDAA8B,CAAC,UAAU,CAAC,CAAC;QACjG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,sBAAsB,CAAC,iBAAyB;QACrD,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,+CAAwB,CAAC,UAAU,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACI,cAAc;QACnB,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC;IAcD,gBAAgB;IACN,kBAAkB,CAAC,IAA4B;QACvD,wCAAwC;QACxC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;YACxC,MAAM,KAAK,GAAQ,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,6BAA6B;YAC5E,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC5B;IACH,CAAC;IAEO,YAAY;QAClB,OAAO,MAAM,GAAG,CAAC,4BAA4B,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC1E,CAAC;IAEO,aAAa,CAAiC,iBAAyB,EAC7E,YAAsC;QAEtC,MAAM,SAAS,GAAqC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACtG,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,kBAAkB,iBAAiB,kBAAkB,CAAC,CAAC;SACxE;QACD,IAAI,SAAS,CAAC,IAAI,KAAK,YAAY,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,kBAAkB,iBAAiB,iBAAiB,+CAAwB,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG;kBAC3G,sCAAsC,+CAAwB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACvF;QACD,OAAO,SAAc,CAAC;IACxB,CAAC;IAEO,gBAAgB,CAAC,SAA+B;QACtD,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,SAAS,CAAC,SAAS,EAAE;YACvB,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SACjC;QACD,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE/B,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAE3C,IAAI,gBAAgB,GAAW,SAAS,CAAC,WAAW,CAAC;QAErD,MAAM,kBAAkB,GAAa,EAAE,CAAC;QACxC,SAAS,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;QACrD,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,uEAAuE;YACvE,IAAI,gBAAgB,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;gBAC3C,gBAAgB,GAAG,gBAAgB,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC;aACvD;YACD,gCAAgC;YAChC,gBAAgB,IAAI,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACxD;QAED,2FAA2F;QAC3F,0CAA0C;QAC1C,MAAM,eAAe,GAA6B;YAChD,IAAI,EAAE,gBAAgB;YACtB,IAAI,EAAE,SAAS,CAAC,UAAU;YAC1B,OAAO,EAAG,SAA8C,CAAC,YAAY,IAAI,SAAS;YAClF,QAAQ,EAAE,SAAS,CAAC,QAAQ;SAC7B,CAAC;QAEF,QAAQ,SAAS,CAAC,IAAI,EAAE;YACtB,KAAK,+CAAwB,CAAC,MAAM;gBAClC,MAAM,eAAe,GAA+B,SAAuC,CAAC;gBAC5F,eAAe,CAAC,OAAO,GAAG,eAAe,CAAC,YAAwB,CAAC;gBACnE,MAAM;YACR,KAAK,+CAAwB,CAAC,IAAI;gBAChC,eAAe,CAAC,MAAM,GAAG,WAAW,CAAC;gBACrC,MAAM;YACR,KAAK,+CAAwB,CAAC,OAAO;gBACnC,eAAe,CAAC,IAAI,GAAG,KAAK,CAAC;gBAC7B,MAAM;YACR,KAAK,+CAAwB,CAAC,MAAM;gBAClC,MAAM;YACR,KAAK,+CAAwB,CAAC,UAAU;gBACtC,eAAe,CAAC,MAAM,GAAG,QAAQ,CAAC;gBAClC,MAAM;SACT;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAE9D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;;AAjOc,wCAAW,GAAW,CAAC,CAAC;AADzC,oEAmOC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as argparse from 'argparse';\r\nimport {\r\n  ICommandLineFlagDefinition,\r\n  ICommandLineStringDefinition,\r\n  ICommandLineStringListDefinition,\r\n  ICommandLineIntegerDefinition,\r\n  ICommandLineChoiceDefinition\r\n} from './CommandLineDefinition';\r\n\r\nimport {\r\n  CommandLineParameter,\r\n  CommandLineParameterWithArgument,\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineStringListParameter,\r\n  CommandLineIntegerParameter,\r\n  CommandLineChoiceParameter,\r\n  CommandLineParameterKind\r\n} from './CommandLineParameter';\r\n\r\n/**\r\n * This is the argparse result data object\r\n * @internal\r\n */\r\nexport interface ICommandLineParserData {\r\n  action: string;\r\n  [key: string]: any; // tslint:disable-line:no-any\r\n}\r\n\r\n/**\r\n * This is the common base class for CommandLineAction and CommandLineParser\r\n * that provides functionality for defining command-line parameters.\r\n *\r\n * @public\r\n */\r\nexport abstract class CommandLineParameterProvider {\r\n  private static _keyCounter: number = 0;\r\n\r\n  private _parameters: CommandLineParameter[];\r\n  private _parametersByLongName: Map<string, CommandLineParameter>;\r\n\r\n  /** @internal */\r\n  // Third party code should not inherit subclasses or call this constructor\r\n  constructor() {\r\n    this._parameters = [];\r\n    this._parametersByLongName = new Map<string, CommandLineParameter>();\r\n  }\r\n\r\n  /**\r\n   * Returns a collection of the parameters that were defined for this object.\r\n   */\r\n  public get parameters(): ReadonlyArray<CommandLineParameter> {\r\n    return this._parameters;\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value must be a string from a fixed set of\r\n   * allowable choices (similar to an enum).\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --log-level warn\r\n   */\r\n  public defineChoiceParameter(definition: ICommandLineChoiceDefinition): CommandLineChoiceParameter {\r\n    const parameter: CommandLineChoiceParameter = new CommandLineChoiceParameter(definition);\r\n    this._defineParameter(parameter);\r\n    return parameter;\r\n  }\r\n\r\n  /**\r\n   * Returns the CommandLineChoiceParameter with the specified long name.\r\n   * @remarks\r\n   * This method throws an exception if the parameter is not defined.\r\n   */\r\n  public getChoiceParameter(parameterLongName: string): CommandLineChoiceParameter {\r\n    return this._getParameter(parameterLongName, CommandLineParameterKind.Choice);\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line switch whose boolean value is true if the switch is provided,\r\n   * and false otherwise.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --debug\r\n   */\r\n  public defineFlagParameter(definition: ICommandLineFlagDefinition): CommandLineFlagParameter {\r\n    const parameter: CommandLineFlagParameter = new CommandLineFlagParameter(definition);\r\n    this._defineParameter(parameter);\r\n    return parameter;\r\n  }\r\n\r\n  /**\r\n   * Returns the CommandLineFlagParameter with the specified long name.\r\n   * @remarks\r\n   * This method throws an exception if the parameter is not defined.\r\n   */\r\n  public getFlagParameter(parameterLongName: string): CommandLineFlagParameter {\r\n    return this._getParameter(parameterLongName, CommandLineParameterKind.Flag);\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value is an integer.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --max-attempts 5\r\n   */\r\n  public defineIntegerParameter(definition: ICommandLineIntegerDefinition): CommandLineIntegerParameter {\r\n    const parameter: CommandLineIntegerParameter = new CommandLineIntegerParameter(definition);\r\n    this._defineParameter(parameter);\r\n    return parameter;\r\n  }\r\n\r\n  /**\r\n   * Returns the CommandLineIntegerParameter with the specified long name.\r\n   * @remarks\r\n   * This method throws an exception if the parameter is not defined.\r\n   */\r\n  public getIntegerParameter(parameterLongName: string): CommandLineIntegerParameter {\r\n    return this._getParameter(parameterLongName, CommandLineParameterKind.Integer);\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value is a single text string.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --message \"Hello, world!\"\r\n   */\r\n  public defineStringParameter(definition: ICommandLineStringDefinition): CommandLineStringParameter {\r\n    const parameter: CommandLineStringParameter = new CommandLineStringParameter(definition);\r\n    this._defineParameter(parameter);\r\n    return parameter;\r\n  }\r\n\r\n  /**\r\n   * Returns the CommandLineStringParameter with the specified long name.\r\n   * @remarks\r\n   * This method throws an exception if the parameter is not defined.\r\n   */\r\n  public getStringParameter(parameterLongName: string): CommandLineStringParameter {\r\n    return this._getParameter(parameterLongName, CommandLineParameterKind.String);\r\n  }\r\n\r\n  /**\r\n   * Defines a command-line parameter whose value is one or more text strings.\r\n   *\r\n   * @remarks\r\n   * Example:  example-tool --add file1.txt --add file2.txt --add file3.txt\r\n   */\r\n  public defineStringListParameter(definition: ICommandLineStringListDefinition): CommandLineStringListParameter {\r\n    const parameter: CommandLineStringListParameter = new CommandLineStringListParameter(definition);\r\n    this._defineParameter(parameter);\r\n    return parameter;\r\n  }\r\n\r\n  /**\r\n   * Returns the CommandLineStringListParameter with the specified long name.\r\n   * @remarks\r\n   * This method throws an exception if the parameter is not defined.\r\n   */\r\n  public getStringListParameter(parameterLongName: string): CommandLineStringListParameter {\r\n    return this._getParameter(parameterLongName, CommandLineParameterKind.StringList);\r\n  }\r\n\r\n  /**\r\n   * Generates the command-line help text.\r\n   */\r\n  public renderHelpText(): string {\r\n    return this._getArgumentParser().formatHelp();\r\n  }\r\n\r\n  /**\r\n   * The child class should implement this hook to define its command-line parameters,\r\n   * e.g. by calling defineFlagParameter().\r\n   */\r\n  protected abstract onDefineParameters(): void;\r\n\r\n  /**\r\n   * Retrieves the argparse object.\r\n   * @internal\r\n   */\r\n  protected abstract _getArgumentParser(): argparse.ArgumentParser;\r\n\r\n  /** @internal */\r\n  protected _processParsedData(data: ICommandLineParserData): void {\r\n    // Fill in the values for the parameters\r\n    for (const parameter of this._parameters) {\r\n      const value: any = data[parameter._parserKey]; // tslint:disable-line:no-any\r\n      parameter._setValue(value);\r\n    }\r\n  }\r\n\r\n  private _generateKey(): string {\r\n    return 'key_' + (CommandLineParameterProvider._keyCounter++).toString();\r\n  }\r\n\r\n  private _getParameter<T extends CommandLineParameter>(parameterLongName: string,\r\n    expectedKind: CommandLineParameterKind): T {\r\n\r\n    const parameter: CommandLineParameter | undefined = this._parametersByLongName.get(parameterLongName);\r\n    if (!parameter) {\r\n      throw new Error(`The parameter \"${parameterLongName}\" is not defined`);\r\n    }\r\n    if (parameter.kind !== expectedKind) {\r\n      throw new Error(`The parameter \"${parameterLongName}\" is of type \"${CommandLineParameterKind[parameter.kind]}\"`\r\n        + ` whereas the caller was expecting \"${CommandLineParameterKind[expectedKind]}\".`);\r\n    }\r\n    return parameter as T;\r\n  }\r\n\r\n  private _defineParameter(parameter: CommandLineParameter): void {\r\n    const names: string[] = [];\r\n    if (parameter.shortName) {\r\n      names.push(parameter.shortName);\r\n    }\r\n    names.push(parameter.longName);\r\n\r\n    parameter._parserKey = this._generateKey();\r\n\r\n    let finalDescription: string = parameter.description;\r\n\r\n    const supplementaryNotes: string[] = [];\r\n    parameter._getSupplementaryNotes(supplementaryNotes);\r\n    if (supplementaryNotes.length > 0) {\r\n      // If they left the period off the end of their sentence, then add one.\r\n      if (finalDescription.match(/[a-z0-9]\\s*$/i)) {\r\n        finalDescription = finalDescription.trimRight() + '.';\r\n      }\r\n      // Append the supplementary text\r\n      finalDescription += ' ' + supplementaryNotes.join(' ');\r\n    }\r\n\r\n    // NOTE: Our \"environmentVariable\" feature takes precedence over argparse's \"defaultValue\",\r\n    // so we have to reimplement that feature.\r\n    const argparseOptions: argparse.ArgumentOptions = {\r\n      help: finalDescription,\r\n      dest: parameter._parserKey,\r\n      metavar: (parameter as CommandLineParameterWithArgument).argumentName || undefined,\r\n      required: parameter.required\r\n    };\r\n\r\n    switch (parameter.kind) {\r\n      case CommandLineParameterKind.Choice:\r\n        const choiceParameter: CommandLineChoiceParameter = parameter as CommandLineChoiceParameter;\r\n        argparseOptions.choices = choiceParameter.alternatives as string[];\r\n        break;\r\n      case CommandLineParameterKind.Flag:\r\n        argparseOptions.action = 'storeTrue';\r\n        break;\r\n      case CommandLineParameterKind.Integer:\r\n        argparseOptions.type = 'int';\r\n        break;\r\n      case CommandLineParameterKind.String:\r\n        break;\r\n      case CommandLineParameterKind.StringList:\r\n        argparseOptions.action = 'append';\r\n        break;\r\n    }\r\n\r\n    this._getArgumentParser().addArgument(names, argparseOptions);\r\n\r\n    this._parameters.push(parameter);\r\n    this._parametersByLongName.set(parameter.longName, parameter);\r\n  }\r\n}\r\n"]}