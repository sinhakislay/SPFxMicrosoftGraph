import { Validate } from '@microsoft/sp-core-library';
import ComponentStore from '../stores/ComponentStore';
import ManifestStore from '../stores/ManifestStore';
import { react16Version, reactComponentId, reactDomComponentId } from './componentConstants';
var ComponentOverrider = /** @class */ (function () {
    function ComponentOverrider() {
    }
    /**
     * Given a component id and a component module, it sets the component in the loader, therefore being
     * available without the need of loading it separately.
     * Should only be used when initializing the loader.
     *
     * @param componentId - Id of the component to override. There should be only one version of the component.
     * @param componentModule - Component module.
     */
    ComponentOverrider.overrideComponent = function (componentId, componentModule, serviceScope, moduleLoaderServiceKey) {
        Validate.isNonemptyString(componentId, 'componentId');
        Validate.isNotNullOrUndefined(componentModule, 'componentModule');
        // Needed for React16 rollout. Should be removed with version aware assembly manifests.
        var version = ComponentOverrider.getReactVersionIfNecessary(componentId);
        var manifest = ManifestStore.instance.tryGetManifest(componentId, version);
        // VSO bug 295355 makes it possible that manifest for odspUtilitiesBundle may not exist.
        if (!manifest) {
            return;
        }
        serviceScope.consume(moduleLoaderServiceKey).ensure(manifest, componentModule);
        ComponentStore.instance.storeLoadedComponent(manifest.id, manifest.version, componentModule);
    };
    /**
     * This is necessary because assemblies don't advertise the component version, and it may be the case where the page
     * requires both React 15 and React 16 manifests, but assemblies never have React 15 anymore.  When assemblies have
     * a deeper understanding of the versions that are included in them, this can be removed.
     */
    ComponentOverrider.getReactVersionIfNecessary = function (componentId) {
        if (componentId === reactComponentId || componentId === reactDomComponentId) {
            return react16Version;
        }
        else {
            return undefined;
        }
    };
    return ComponentOverrider;
}());
export default ComponentOverrider;
//# sourceMappingURL=ComponentOverrider.js.map