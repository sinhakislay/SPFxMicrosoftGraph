var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Environment, EnvironmentType, Guid, ServiceScope, Validate, _BrowserUtilities, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _DynamicDataUtilities } from '@microsoft/sp-dynamic-data';
import { PageContext } from '@microsoft/sp-page-context';
import { HttpClient, SPHttpClient, _GraphHttpClientContext, AadTokenProvider, DigestCache, _AadTokenProviders, _AadConstants } from '@microsoft/sp-http';
import { _logSourceServiceKey, _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
/**
 * Builds a new root service scope, initialized with the preloaded data.
 *
 * @remarks
 * This should only be created once, at the initialization of SPFx.
 *
 * @internal
 */
var RootServiceScopeBuilder = /** @class */ (function () {
    function RootServiceScopeBuilder() {
    }
    /**
     * Creates a root service scope and it initializes with SPFx services (page context, http clients)
     */
    RootServiceScopeBuilder.build = function (preloadedData) {
        var serviceScope = ServiceScope.startNewRoot();
        serviceScope.provide(_logSourceServiceKey, RootServiceScopeBuilder._logSource);
        serviceScope.createDefaultAndProvide(PageContext.serviceKey);
        serviceScope.createDefaultAndProvide(HttpClient.serviceKey);
        var spHttpClient = serviceScope.createDefaultAndProvide(SPHttpClient.serviceKey);
        serviceScope.createDefaultAndProvide(_DynamicDataUtilities.IDynamicDataManagerServiceKey);
        var _graphContext = serviceScope.createDefaultAndProvide(_GraphHttpClientContext.serviceKey);
        var digestCache = serviceScope.createDefaultAndProvide(DigestCache.serviceKey);
        serviceScope.finish();
        this._initializeGraphHttpClient(_graphContext, preloadedData, spHttpClient);
        this._initializeDigestCache(digestCache, preloadedData);
        return serviceScope;
    };
    RootServiceScopeBuilder._initializeGraphHttpClient = function (graphContext, preloadedData, spHttpClient) {
        // We don't want to initialize AAD/Graph client assets for On-Prem/Workbench until
        // these scenarios are supported.
        if (DATACENTER && Environment.type !== EnvironmentType.Local) {
            graphContext.initialize(preloadedData.spPageContextInfo.webServerRelativeUrl, preloadedData.spPageContextInfo.msGraphEndpointUrl, preloadedData.spPageContextInfo.webAbsoluteUrl);
            try {
                var redirectUri = RootServiceScopeBuilder.FLUID_DOMAINS.indexOf(window.location.host) > -1 ?
                    window.location.origin + '/spfxsinglesignon' :
                    window.location.origin + '/_forms/' + _AadConstants.SPFX_SINGLE_SIGN_ON_REPLY_URL;
                var _a = preloadedData.spPageContextInfo, aadInstanceUrl = _a.aadInstanceUrl, aadTenantId = _a.aadTenantId, aadUserId = _a.aadUserId, isAnonymousGuestUser = _a.isAnonymousGuestUser, isExternalGuestUser = _a.isExternalGuestUser, spfxOBOFlowEnabled = _a.spfxOBOFlowEnabled, userPrincipalName = _a.userPrincipalName;
                var defaultAadConfiguration = {
                    aadInstanceUrl: aadInstanceUrl,
                    aadTenantId: aadTenantId,
                    aadUserId: aadUserId,
                    redirectUri: redirectUri,
                    servicePrincipalId: '',
                    userPrincipalName: userPrincipalName
                };
                // Guest and External Users won't be able to retrieve tokens if a UPN is provided
                if (isAnonymousGuestUser || isExternalGuestUser) {
                    defaultAadConfiguration.userPrincipalName = undefined;
                }
                // @todo [VSO:SPPLAT:770273] [ADAL] Deprecate userPrincipalName property and add loginHint property
                if (!_SPKillSwitch.isActivated(RootServiceScopeBuilder.upnGuestUserGuid, '9/4/19', 'Provide user email for guest and external users') &&
                    isAnonymousGuestUser || isExternalGuestUser) {
                    defaultAadConfiguration.userPrincipalName = preloadedData.spPageContextInfo.userEmail;
                }
                var preconfiguredAppConfiguration = __assign({}, defaultAadConfiguration, { servicePrincipalId: _AadConstants.PRE_AUTHORIZED_APP_PRINCIPAL_ID });
                if (spfxOBOFlowEnabled &&
                    _BrowserUtilities.isMobileWebView() ||
                    _BrowserUtilities.isWebViewHosted()) {
                    _AadTokenProviders._initialize(new AadTokenProvider(__assign({}, defaultAadConfiguration, { servicePrincipalId: preloadedData.spPageContextInfo.spfx3rdPartyServicePrincipalId }), {
                        serverRelativeUrl: preloadedData.spPageContextInfo.webAbsoluteUrl,
                        spHttpClient: spHttpClient
                    }), preconfiguredAppConfiguration);
                }
                else {
                    _AadTokenProviders._initialize(new AadTokenProvider(__assign({}, defaultAadConfiguration, { servicePrincipalId: preloadedData.spPageContextInfo.spfx3rdPartyServicePrincipalId })), preconfiguredAppConfiguration);
                }
            }
            catch (e) {
                _TraceLogger.logVerbose(this._logSource, 'AadTokenProviders: Failed to initialize');
            }
        }
    };
    RootServiceScopeBuilder._initializeDigestCache = function (digestCache, preloadedData) {
        Validate.isNotNullOrUndefined(preloadedData, 'preloadedData');
        Validate.isNotNullOrUndefined(preloadedData.spPageContextInfo, 'preloadedData.spPageContextInfo');
        _TraceLogger.logVerbose(this._logSource, 'ServiceScopeBuilder: Added preloaded FormDigestValue to cache');
        if (preloadedData.spPageContextInfo) {
            var expirationTimestamp = void 0;
            // Value of serverTime is same as what comes as part of formDigestValue
            // but is in locale neutral ISO 8601 format. So it will get correctly
            // parsed by Date class irrespective of client locale.
            // serverTime is accurate to the order of ms, while DateTime which comes
            // as part of formDigestValue is trimmed to order of seconds. Subtract
            // 30s from expirationTimeStamp to avoid any timing errors b/w server and client
            var serverTimeInMs = new Date(preloadedData.spPageContextInfo.serverTime).getTime();
            expirationTimestamp = serverTimeInMs +
                (1000 * preloadedData.spPageContextInfo.formDigestTimeoutSeconds) -
                this.PRELOAD_DIGEST_EXPIRATION_SLOP_MS;
            digestCache.addDigestToCache(preloadedData.spPageContextInfo.webServerRelativeUrl, preloadedData.spPageContextInfo.formDigestValue, expirationTimestamp);
            digestCache.addDigestToCache(preloadedData.spPageContextInfo.webAbsoluteUrl, preloadedData.spPageContextInfo.formDigestValue, expirationTimestamp);
        }
    };
    /**
     * Log source for the root service scope
     */
    RootServiceScopeBuilder._logSource = _LogSource.create('RootServiceScope');
    RootServiceScopeBuilder.upnGuestUserGuid = Guid.parse('411f7ef9-c165-45db-b054-7a4692612643');
    // Estimates the lag between when the server generated the form digest, and when
    // performance.now() started measuring the browser page
    RootServiceScopeBuilder.PRELOAD_DIGEST_EXPIRATION_SLOP_MS = 30000; // 30 secs
    RootServiceScopeBuilder.FLUID_DOMAINS = [
        'dev.fluid.office.com',
        'dev.fluidpreview.office.net',
        'fluidpreview.office.net'
    ];
    return RootServiceScopeBuilder;
}());
export default RootServiceScopeBuilder;
//# sourceMappingURL=RootServiceScopeBuilder.js.map