/**
 * @file PerformanceDisplayStore.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
import { Text } from '@microsoft/sp-core-library';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import strings from './../Components/DeveloperModules/PerformanceDisplay/PerformanceDisplay.resx';
var PerformanceDisplayStateProvider = /** @class */ (function () {
    function PerformanceDisplayStateProvider() {
    }
    /**
     * This function parses through performance data and puts together some performance data (_IPerfItem) objects for the
     * component to display. If errors are encountered, the _errorMessage variable is set and the function returns an
     * empty array. The component checks for the presence of an error message to determine if something went wrong.
     */
    PerformanceDisplayStateProvider.getState = function () {
        var perfItems = [];
        var toReturn = {
            perfItems: perfItems,
            startTime: 0,
            eupl: 0
        };
        // Wrap in a try/catch block to ensure we don't break the page if this throws
        try {
            // @todo VSO:237921 - use the correct typings
            var data = _PerformanceLogger.getPerformanceData(); // tslint:disable-line:no-any
            if (!data || !data.W3cNavigationStart || !data.EUPL) {
                toReturn.errorMessage = strings.ErrorAccessingPerfDataErrorMessage;
                console.debug(toReturn.errorMessage); // tslint:disable-line:no-console
                return toReturn;
            }
            // We are using performance API so start is always 0 corresponding to W3cNavigationStart
            toReturn.startTime = 0;
            toReturn.eupl = data.EUPL;
            // Would be really nice if JSON.tryParse existed ...
            var euplBreakdown = void 0;
            try {
                euplBreakdown = JSON.parse(data.EUPLBreakdown);
            }
            catch (error) { /* no-op */ }
            if (!euplBreakdown) {
                toReturn.errorMessage = strings.ErrorParsingPercievedLatencyErrorMessage;
                console.debug(toReturn.errorMessage); // tslint:disable-line:no-console
                return toReturn;
            }
            var apiCallsData = void 0;
            try {
                apiCallsData = JSON.parse(data.APICalls);
            }
            catch (error) { /* no-op */ }
            if (!apiCallsData) {
                toReturn.errorMessage = strings.ErrorParsingApiDataErrorMessage;
                console.debug(toReturn.errorMessage); // tslint:disable-line:no-console
                return toReturn;
            }
            if (data.W3cRedirectStart && data.W3cRedirectEnd) {
                perfItems.push({
                    id: 'RedirectResponse',
                    name: strings.RedirectResponseLabel,
                    startVal: data.W3cRedirectStart - data.W3cNavigationStart,
                    duration: (data.W3cRedirectEnd - data.W3cRedirectStart),
                    breakdown: undefined
                });
            }
            perfItems.push({
                id: 'w3cResponseEnd',
                name: strings.ServerResponseLabel,
                startVal: data.W3cRequestStart - data.W3cNavigationStart,
                duration: data.W3cResponseEnd - data.W3cRequestStart,
                breakdown: undefined
            });
            if (euplBreakdown.appStart) {
                perfItems.push({
                    id: 'appStart',
                    name: strings.ApplicationInitializationLabel,
                    startVal: data.W3cResponseEnd - data.W3cNavigationStart,
                    duration: euplBreakdown.appStart - (data.W3cResponseEnd - data.W3cNavigationStart),
                    breakdown: undefined
                });
            }
            if (euplBreakdown.spLoaderStart) {
                perfItems.push({
                    id: 'scriptFetchEval',
                    name: strings.ScriptFetchEvalLabel,
                    startVal: data.W3cResponseEnd - data.W3cNavigationStart,
                    duration: euplBreakdown.spLoaderStart - (data.W3cResponseEnd - data.W3cNavigationStart),
                    breakdown: undefined
                });
            }
            if (euplBreakdown.spLoaderStart && euplBreakdown.appStart) {
                perfItems.push({
                    id: 'spLoaderStart',
                    name: strings.SpLoaderStartLabel,
                    startVal: euplBreakdown.spLoaderStart,
                    duration: euplBreakdown.appStart - euplBreakdown.spLoaderStart,
                    breakdown: undefined
                });
            }
            /**
             * Check if any web parts made API calls, and store them in a data structure per web part
             */
            var apiCalls = {};
            var endVals = {};
            for (var _i = 0, apiCallsData_1 = apiCallsData; _i < apiCallsData_1.length; _i++) {
                var apiCall = apiCallsData_1[_i];
                if (apiCall.name && apiCall.name.indexOf('WebPart') > -1) {
                    if (!apiCalls[apiCall.name]) {
                        apiCalls[apiCall.name] = [];
                        endVals[apiCall.name] = 0;
                    }
                    apiCalls[apiCall.name].push({
                        startVal: apiCall.startTime,
                        duration: apiCall.duration
                    });
                    // Find the latest ending API call for total duration calculation later on
                    endVals[apiCall.name] = Math.max(apiCall.startTime + apiCall.duration, endVals[apiCall.name]);
                }
            }
            /**
             * Get loading breakdown for each web part. Web parts have their loading times broken down further, so an
             * _IWebPartBreakdown object is put together for each one.
             */
            for (var i = 1; i <= 10; i++) {
                var webPart = data["Control" + i + "Id"];
                var renderEnd = data["Control" + i + "RenderTime"];
                var renderStart = euplBreakdown[webPart + ".start"];
                if (!webPart || isNaN(renderStart) || isNaN(renderEnd)) {
                    continue;
                }
                var initTime = euplBreakdown[webPart + ".init"];
                var moduleLoadedTime = euplBreakdown[webPart + ".modulesLoaded"];
                var loadingDelayed = euplBreakdown[webPart + ".loadingDelayed"];
                var inViewportLoading = euplBreakdown[webPart + ".inViewportLoading"];
                var wpBreakdown = {
                    dataFetch: apiCalls[webPart] || [],
                    render: {
                        startVal: inViewportLoading || initTime || moduleLoadedTime || renderStart,
                        duration: renderEnd - (inViewportLoading || initTime || moduleLoadedTime || renderStart)
                    }
                };
                if (moduleLoadedTime && initTime) {
                    // Get breakdown of loading data for web parts
                    if (!isNaN(moduleLoadedTime)) {
                        wpBreakdown.modulesLoaded = {
                            startVal: renderStart,
                            duration: moduleLoadedTime - renderStart
                        };
                    }
                    if (!isNaN(initTime)) {
                        wpBreakdown.init = {
                            startVal: inViewportLoading || moduleLoadedTime,
                            duration: initTime - (inViewportLoading || moduleLoadedTime)
                        };
                    }
                    if (!isNaN(inViewportLoading) && !isNaN(loadingDelayed)) {
                        wpBreakdown.lazyLoading = {
                            startVal: loadingDelayed,
                            duration: inViewportLoading - loadingDelayed
                        };
                    }
                }
                perfItems.push({
                    id: webPart,
                    name: "" + PerformanceDisplayStateProvider._getReadableWebpartName(webPart.replace('Load.', '')),
                    startVal: renderStart,
                    duration: renderEnd - renderStart,
                    breakdown: wpBreakdown
                });
            }
            return toReturn;
        }
        catch (error) {
            toReturn.errorMessage = Text.format(strings.UnknownPerformanceDataErrorMessage, error);
            console.debug(toReturn.errorMessage); // tslint:disable-line:no-console
            return toReturn;
        }
    };
    /**
     * Splits the WebPart id to access the alias.
     */
    PerformanceDisplayStateProvider._getReadableWebpartName = function (id) {
        if (id.indexOf('WebPart.') === -1) {
            return id;
        }
        /**
         * idString is in the format of WebPart.manifestID.instanceID
         * Example: WebPart.QuickLinksWebPart.a3deb5fc-2f96-4621-9dfe-985955a33833
         * If there is a failure in getting a readable name from the id
         * (change in web parts manifest) log the error and display the
         * generic name 'web part' so data can still be shown.
         */
        try {
            var readableWebPartName = id.split('.')[1];
            return readableWebPartName;
        }
        catch (error) {
            return id;
        }
    };
    return PerformanceDisplayStateProvider;
}());
export { PerformanceDisplayStateProvider };
//# sourceMappingURL=PerformanceDisplayStateProvider.js.map