{"version":3,"file":"CertificateStore.js","sourceRoot":"","sources":["../src/CertificateStore.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { homedir } from 'os';\r\n\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\n\r\nexport class CertificateStore {\r\n  private static _instance: CertificateStore;\r\n\r\n  public static get instance(): CertificateStore {\r\n    if (!CertificateStore._instance) {\r\n      CertificateStore._instance = new CertificateStore();\r\n      CertificateStore._instance._initialize();\r\n    }\r\n\r\n    return CertificateStore._instance;\r\n  }\r\n\r\n  private _userProfilePath: string;\r\n  private _gcbServeDataPath: string;\r\n  private _certificatePath: string;\r\n  private _keyPath: string;\r\n\r\n  private _certificateData: string;\r\n  private _keyData: string;\r\n\r\n  public get certificatePath(): string {\r\n    return this._certificatePath;\r\n  }\r\n\r\n  public get certificateData(): string {\r\n    if (!this._certificateData) {\r\n      if (FileSystem.exists(this._certificatePath)) {\r\n        this._certificateData = FileSystem.readFile(this._certificatePath);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return this._certificateData;\r\n  }\r\n\r\n  public set certificateData(certificate: string) {\r\n    if (certificate) {\r\n      FileSystem.writeFile(this._certificatePath, certificate);\r\n    } else if (FileSystem.exists(this._certificatePath)) {\r\n      FileSystem.deleteFile(this._certificatePath);\r\n    }\r\n\r\n    this._certificateData = certificate;\r\n  }\r\n\r\n  public get keyData(): string {\r\n    if (!this._keyData) {\r\n      if (FileSystem.exists(this._keyPath)) {\r\n        this._keyData = FileSystem.readFile(this._keyPath);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return this._keyData;\r\n  }\r\n\r\n  public set keyData(key: string) {\r\n    if (key) {\r\n      FileSystem.writeFile(this._keyPath, key);\r\n    } else if (FileSystem.exists(this._keyPath)) {\r\n      FileSystem.deleteFile(this._keyPath);\r\n    }\r\n\r\n    this._keyData = key;\r\n  }\r\n\r\n  private _initialize(): void {\r\n    const unresolvedUserFolder: string = homedir();\r\n    this._userProfilePath = path.resolve(unresolvedUserFolder);\r\n    if (!FileSystem.exists(this._userProfilePath)) {\r\n      throw new Error('Unable to determine the current user\\'s home directory');\r\n    }\r\n\r\n    this._gcbServeDataPath = path.join(this._userProfilePath, '.gcb-serve-data');\r\n    FileSystem.ensureFolder(this._gcbServeDataPath);\r\n\r\n    this._certificatePath = path.join(this._gcbServeDataPath, 'gcb-serve.cer');\r\n    this._keyPath = path.join(this._gcbServeDataPath, 'gcb-serve.key');\r\n  }\r\n}\r\n"]}