{"version":3,"file":"ServeTask.js","sourceRoot":"","sources":["../src/ServeTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport { IBuildConfig } from '@microsoft/gulp-core-build/lib/IBuildConfig';\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\nimport * as Gulp from 'gulp';\r\nimport * as colors from 'colors';\r\nimport * as HttpType from 'http';\r\nimport * as HttpsType from 'https';\r\nimport * as pathType from 'path';\r\nimport * as ExpressType from 'express';\r\n\r\nimport {\r\n  ICertificate\r\n} from './certificates';\r\n\r\n/**\r\n * @remarks\r\n * If this schema is updated, dependant schemas MUST also be updated, including the spfx-serve.schema.json.\r\n * The spfx-serve.schema.json is the serve.schema.json file with the spfx-specific properties included. The\r\n * merge is simple, but must be done manually whenever the serve.schema.json file is changed.\r\n */\r\nexport interface IServeTaskConfig {\r\n  /**\r\n   * API server configuration\r\n   */\r\n  api?: {\r\n    /**\r\n     * The port on which to run the API server\r\n     */\r\n    port: number,\r\n\r\n    /**\r\n     * The path to the script to run as the API server\r\n     */\r\n    entryPath: string\r\n  };\r\n\r\n  /**\r\n   * The path to the page which should open automatically after this task completes. If you prefer no page to be\r\n   * launched, run the build with the \"--nobrowser\" flag\r\n   */\r\n  initialPage?: string;\r\n\r\n  /**\r\n   * The port on which to host the file server.\r\n   */\r\n  port?: number;\r\n\r\n  /**\r\n   * The name of the host on which serve is running. Defaults to 'localhost'\r\n   */\r\n  hostname?: string;\r\n\r\n  /**\r\n   * If true, the server should run on HTTPS\r\n   */\r\n  https?: boolean;\r\n\r\n  /**\r\n   * Path to the HTTPS key\r\n   */\r\n  keyPath?: string;\r\n\r\n  /**\r\n   * Path to the HTTPS cert\r\n   */\r\n  certPath?: string;\r\n\r\n  /**\r\n   * Path to the HTTPS PFX cert\r\n   */\r\n  pfxPath?: string;\r\n\r\n  /**\r\n   * Path relative to the server root to base the server in.\r\n   */\r\n  rootFolder?: string;\r\n\r\n  /**\r\n   * If true, when gulp-core-build-serve is initialized and a dev certificate doesn't already exist and hasn't been\r\n   *  specified, attempt to generate one and trust it automatically.\r\n   *\r\n   * @default false\r\n   */\r\n  tryCreateDevCertificate?: boolean;\r\n}\r\n\r\ninterface IApiMap {\r\n  [ route: string ]: Function;\r\n}\r\n\r\nexport class ServeTask<TExtendedConfig = {}> extends GulpTask<IServeTaskConfig & TExtendedConfig> {\r\n  constructor(extendedName?: string, extendedConfig?: TExtendedConfig) {\r\n    super(\r\n      extendedName || 'serve',\r\n      {\r\n        api: undefined,\r\n        https: false,\r\n        initialPage: '/index.html',\r\n        port: 4321,\r\n        hostname: 'localhost',\r\n        tryCreateDevCertificate: false,\r\n        ...(extendedConfig as Object)\r\n      } as IServeTaskConfig & TExtendedConfig\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./serve.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback?: (error?: string) => void): void {\r\n\r\n    /* tslint:disable:typedef */\r\n    const gulpConnect = require('gulp-connect');\r\n    const open = require('gulp-open');\r\n    const http = require('http');\r\n    const https = require('https');\r\n    /* tslint:enable:typedef */\r\n\r\n    const path: typeof pathType = require('path');\r\n    const openBrowser: boolean = (process.argv.indexOf('--nobrowser') === -1);\r\n    const portArgumentIndex: number = process.argv.indexOf('--port');\r\n    let { port, initialPage }: IServeTaskConfig = this.taskConfig;\r\n    const { api, hostname }: IServeTaskConfig = this.taskConfig;\r\n    const { rootPath }: IBuildConfig = this.buildConfig;\r\n    const httpsServerOptions: HttpsType.ServerOptions = this._loadHttpsServerOptions();\r\n\r\n    if (portArgumentIndex >= 0 && process.argv.length > (portArgumentIndex + 1)) {\r\n      port = Number(process.argv[portArgumentIndex + 1]);\r\n    }\r\n\r\n    // Spin up the connect server\r\n    gulpConnect.server({\r\n      https: httpsServerOptions,\r\n      livereload: true,\r\n      middleware: (): Function[] => [this._logRequestsMiddleware, this._enableCorsMiddleware],\r\n      port: port,\r\n      root: path.join(rootPath, this.taskConfig.rootFolder || ''),\r\n      preferHttp1: true,\r\n      host: hostname\r\n    });\r\n\r\n    // If an api is provided, spin it up.\r\n    if (api) {\r\n      let apiMap: IApiMap | { default: IApiMap };\r\n\r\n      try {\r\n        apiMap = require(path.join(rootPath, api.entryPath));\r\n\r\n        if (apiMap && (apiMap as { default: IApiMap }).default) {\r\n          apiMap = (apiMap as { default: IApiMap }).default;\r\n        }\r\n      } catch (e) {\r\n        this.logError(`The api entry could not be loaded: ${api.entryPath}`);\r\n      }\r\n\r\n      if (apiMap) {\r\n        console.log(`Starting api server on port ${api.port}.`);\r\n\r\n        const express: typeof ExpressType = require('express');\r\n        const app: ExpressType.Express = express();\r\n\r\n        app.use(this._logRequestsMiddleware);\r\n        app.use(this._enableCorsMiddleware);\r\n        app.use(this._setJSONResponseContentTypeMiddleware);\r\n\r\n        // Load the apis.\r\n        for (const apiMapEntry in apiMap) {\r\n          if (apiMap.hasOwnProperty(apiMapEntry)) {\r\n            console.log(`Registring api: ${ colors.green(apiMapEntry) }`);\r\n            app.get(apiMapEntry, apiMap[apiMapEntry]);\r\n          }\r\n        }\r\n\r\n        const apiPort: number = api.port || 5432;\r\n        if (this.taskConfig.https) {\r\n          https.createServer(httpsServerOptions, app).listen(apiPort);\r\n        } else {\r\n          http.createServer(app).listen(apiPort);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Spin up the browser.\r\n    if (openBrowser) {\r\n      let uri: string = initialPage;\r\n      if (!initialPage.match(/^https?:\\/\\//)) {\r\n        if (!initialPage.match(/^\\//)) {\r\n          initialPage = `/${initialPage}`;\r\n        }\r\n\r\n        uri = `${this.taskConfig.https ? 'https' : 'http'}://${this.taskConfig.hostname}:${port}${initialPage}`;\r\n      }\r\n\r\n      gulp.src('')\r\n        .pipe(open({\r\n          uri: uri\r\n        }));\r\n    }\r\n\r\n    completeCallback();\r\n  }\r\n\r\n  private _logRequestsMiddleware(req: HttpType.IncomingMessage, res: HttpType.ServerResponse, next?: () => void): void {\r\n    /* tslint:disable:no-any */\r\n    const ipAddress: string = (req as any).ip;\r\n    /* tslint:enable:no-any */\r\n    let resourceColor: (text: string) => string = colors.cyan;\r\n\r\n    if (req && req.url) {\r\n      if (req.url.indexOf('.bundle.js') >= 0) {\r\n        resourceColor = colors.green;\r\n      } else if (req.url.indexOf('.js') >= 0) {\r\n        resourceColor = colors.magenta;\r\n      }\r\n\r\n      console.log(\r\n        [\r\n          `  Request: `,\r\n          `${ ipAddress ? `[${ colors.cyan(ipAddress) }] ` : `` }`,\r\n          `'${ resourceColor(req.url) }'`\r\n        ].join(''));\r\n    }\r\n\r\n    next();\r\n  }\r\n\r\n  private _enableCorsMiddleware(req: HttpType.IncomingMessage, res: HttpType.ServerResponse, next?: () => void): void {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n    next();\r\n  }\r\n\r\n  private _setJSONResponseContentTypeMiddleware(req: HttpType.IncomingMessage,\r\n                                                res: HttpType.ServerResponse,\r\n                                                next?: () => void): void {\r\n    res.setHeader('content-type', 'application/json');\r\n    next();\r\n  }\r\n\r\n  private _loadHttpsServerOptions(): HttpsType.ServerOptions {\r\n    if (this.taskConfig.https) {\r\n      const result: HttpsType.ServerOptions = {};\r\n\r\n      // We're configuring an HTTPS server, so we need a certificate\r\n      if (this.taskConfig.pfxPath) {\r\n        // There's a PFX path in the config, so try that\r\n        this.logVerbose(`Trying PFX path: ${this.taskConfig.pfxPath}`);\r\n        if (FileSystem.exists(this.taskConfig.pfxPath)) {\r\n          try {\r\n            result.pfx = FileSystem.readFile(this.taskConfig.pfxPath);\r\n            this.logVerbose(`Loaded PFX certificate.`);\r\n          } catch (e) {\r\n            this.logError(`Error loading PFX file: ${e}`);\r\n          }\r\n        } else {\r\n          this.logError(`PFX file not found at path \"${this.taskConfig.pfxPath}\"`);\r\n        }\r\n      } else if (this.taskConfig.keyPath && this.taskConfig.certPath) {\r\n        this.logVerbose(`Trying key path \"${this.taskConfig.keyPath}\" and cert path \"${this.taskConfig.certPath}\".`);\r\n        const certExists: boolean = FileSystem.exists(this.taskConfig.certPath);\r\n        const keyExists: boolean = FileSystem.exists(this.taskConfig.keyPath);\r\n\r\n        if (keyExists && certExists) {\r\n          try {\r\n            result.cert = FileSystem.readFile(this.taskConfig.certPath);\r\n            result.key = FileSystem.readFile(this.taskConfig.keyPath);\r\n          } catch (e) {\r\n            this.logError(`Error loading key or cert file: ${e}`);\r\n          }\r\n        } else {\r\n          if (!keyExists) {\r\n            this.logError(`Key file not found at path \"${this.taskConfig.keyPath}`);\r\n          }\r\n\r\n          if (!certExists) {\r\n            this.logError(`Cert file not found at path \"${this.taskConfig.certPath}`);\r\n          }\r\n        }\r\n      } else {\r\n        const { ensureCertificate } = require('./certificates'); // tslint:disable-line\r\n        const devCertificate: ICertificate = ensureCertificate(this.taskConfig.tryCreateDevCertificate, this);\r\n        if (devCertificate.pemCertificate && devCertificate.pemKey) {\r\n          result.cert = devCertificate.pemCertificate;\r\n          result.key = devCertificate.pemKey;\r\n        } else {\r\n          this.logWarning('When serving in HTTPS mode, a PFX cert path or a cert path and a key path must be ' +\r\n                          'provided, or a dev certificate must be generated and trusted. If a SSL certificate isn\\'t ' +\r\n                          'provided, a default, self-signed certificate will be used. Expect browser security ' +\r\n                          'warnings.');\r\n        }\r\n      }\r\n\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"]}