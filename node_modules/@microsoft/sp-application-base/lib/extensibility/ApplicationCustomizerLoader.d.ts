import { ServiceScope } from '@microsoft/sp-core-library';
import { _IPreloadedCustomAction } from '@microsoft/sp-loader';
/**
 * This is just an empty interface to represent the type of the extension properties
 */
export interface IGenericExtensionProperties {
}
/**
 * A helper class for loading ApplicationCustomizer extensions.
 */
export default class ApplicationCustomizerLoader {
    private static readonly _logSource;
    private _extensionManager;
    private _placeholderManager;
    private _customActionFromPreloadedData;
    private _debugCustomActions;
    private _currentCustomActions;
    private _debugCustomizerLoaded;
    private _applicationCustomizerContextFactory;
    private _serviceScope;
    private _currentCustomActionsWithContext;
    constructor(serviceScope: ServiceScope);
    /**
     * This method is called when the client-side application is initializing and before it has
     * rendered. It loads the associated client-side extensions. It may perform asynchronous
     * operations.
     */
    loadExtensions(preloadedCustomActions?: _IPreloadedCustomAction[]): Promise<void>;
    /**
     * This method is called when the client-side application is initializing and before it has
     * rendered. It creates the contexts for the extensions and cache them without loading the extensions' components.
     * As part of creating the context, placeholders will be created and rendered.
     */
    initializeExtensionsContext(preloadedCustomActions?: _IPreloadedCustomAction[]): void;
    /**
     * Disposes all existing application customizers and their associated placeholder contents.
     */
    disposeExtensions(): void;
    private readonly _customActions;
    /**
     * If the debugging flight is enabled, automatically add the debug application customizer.
     */
    private _loadDebugCustomizerIfEnabled;
    private _loadExtensions;
    private _createApplicationCustomizer;
    private _addExtensionsInitAsKeyMetric;
    private _createQosExtraData;
    /**
     * Loads custom actions from both the preloaded data and the query parameter.
     */
    private _loadCustomActions;
    /**
     * Reads the custom actions from the preloaded data and creates ClientSideCustomAction objects for them.
     * @param customActions - Custom actions from the preloaded data.
     * @returns Array with the processed custom actions.
     */
    private _loadCustomActionsFromPreloadedData;
    private _hasDebugCustomActions;
    private _isDebugModeOn;
    private _loadCustomActionsFromQueryParameter;
    private _processMissingManifestsErrors;
    private _processQueryParamParseErrors;
}
//# sourceMappingURL=ApplicationCustomizerLoader.d.ts.map