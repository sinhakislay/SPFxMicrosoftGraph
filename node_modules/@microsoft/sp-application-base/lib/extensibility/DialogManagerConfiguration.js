import { Validate } from '@microsoft/sp-core-library';
/**
 * A singleton class that allows the application to configure the behavior of dialog manager. If `@microsoft/sp-dialog`
 * package is loaded on the page and a dialog manager is instantiated on the page, it will look for this singleton
 * as its configuration.
 *
 * @internal
 */
var DialogManagerConfiguration = /** @class */ (function () {
    function DialogManagerConfiguration() {
    }
    Object.defineProperty(DialogManagerConfiguration, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DialogManagerConfiguration();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManagerConfiguration.prototype, "allowDialogs", {
        /**
         * If the application allows showing dialogs. Application can change this configuration in runtime. For example,
         * the application can decide to set this to false to block all dialogs based on its current state. If this property
         * is false, the dialog manager will deny all requests to show dialogs.
         *
         * Throws an error if allowDialogs is undefined.
         */
        get: function () {
            Validate.isNotNullOrUndefined(this._allowDialogs, 'allowDialogs');
            return this._allowDialogs;
        },
        /**
         * Sets the allowDialogs.
         * Throws an error in the parameter value is undefined.
         */
        set: function (value) {
            Validate.isNotNullOrUndefined(value, 'value');
            this._allowDialogs = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManagerConfiguration.prototype, "domElement", {
        /**
         * The container div that the dialog manager will use to render the dialogs in.
         *
         * Throws an error if domElement is undefined.
         */
        get: function () {
            Validate.isNotNullOrUndefined(this._domElement, 'domElement');
            return this._domElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * initialize dialog manager configuration.
     *
     * @param domElement - The container element for dialogs
     * @param allowDialogs - Whether the dialogs should be allowed. This defaults to true and can be updated later using
     * allowDialogs property.
     */
    DialogManagerConfiguration.prototype.initialize = function (domElement, allowDialogs) {
        if (allowDialogs === void 0) { allowDialogs = true; }
        this._allowDialogs = allowDialogs;
        this._domElement = domElement;
    };
    /**
     * Disposes the current configuration. Use this when the application is being disposed. This will make sure that
     * this config is not re-used in case another application is loaded on the same page.
     * IMPORTANT NOTE: SPFx assumption is that there is only one active application on the page at a given time.
     */
    DialogManagerConfiguration.prototype.dispose = function () {
        this._allowDialogs = undefined;
        this._domElement = undefined;
    };
    return DialogManagerConfiguration;
}());
export default DialogManagerConfiguration;
//# sourceMappingURL=DialogManagerConfiguration.js.map