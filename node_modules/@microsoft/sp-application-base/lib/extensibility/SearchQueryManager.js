import { ServiceKey } from '@microsoft/sp-core-library';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import { SPComponentLoader } from '@microsoft/sp-loader';
import CustomActionLocations from './customAction/CustomActionLocations';
/**
 * Search query manager is used to get the search query in SPFx.
 * It supports Search query modifier extensions that can enrich the search query, and supports cases where the user
 * comes from classic pages to modern.
 *
 * @internal
 */
var SearchQueryManager = /** @class */ (function () {
    function SearchQueryManager(serviceScope) {
        this._isInitialized = false;
        this._serviceScope = serviceScope;
    }
    SearchQueryManager.prototype.initialize = function (preloadedData) {
        var _this = this;
        var qosMonitor = new _QosMonitor('SearchQueryManager.initialize');
        this._preloadedData = preloadedData;
        this._queryParameters = new URL(window.location.href).searchParams;
        if (this._getUrlSearchQuery() && this._hasExtensions()) {
            return this._getExtensionManager().then(function (extensionManager) {
                return extensionManager.initializeExtensions(preloadedData.customActions)
                    .then(function (numberOfExtensions) {
                    _this._isInitialized = true;
                    qosMonitor.writeSuccess({ numberOfExtensions: numberOfExtensions });
                });
            })
                .catch(function (e) {
                qosMonitor.writeUnexpectedFailure(undefined, e, { numberOfExtensions: 0 });
                throw e;
            });
        }
        else {
            this._isInitialized = true;
            qosMonitor.writeSuccess({ numberOfExtensions: 0 });
            return Promise.resolve();
        }
    };
    SearchQueryManager.prototype.isInitialized = function () {
        return this._isInitialized;
    };
    /**
     * Get the search query from the current URL.
     */
    SearchQueryManager.prototype.getSearchQuery = function () {
        if (!this._isInitialized) {
            return Promise.reject(new Error('SearchQueryManager is not initialized'));
        }
        var qosMonitor = new _QosMonitor('SearchQueryManager.getSearchQuery');
        this._queryParameters = new URL(window.location.href).searchParams;
        var searchQuery = this._getUrlSearchQuery();
        if (searchQuery && this._hasExtensions()) {
            return this._getExtensionManager()
                .then(function (extensionManager) { return extensionManager.getSearchQuery(searchQuery); })
                .then(function (q) { qosMonitor.writeSuccess(); return q; })
                .catch(function (e) { qosMonitor.writeUnexpectedFailure(undefined, e); throw e; });
        }
        else {
            qosMonitor.writeSuccess();
            return Promise.resolve(searchQuery);
        }
    };
    SearchQueryManager.prototype._getUrlSearchQuery = function () {
        // If ?q is not present, ?k can be used (support cases coming from classic pages)
        return this._queryParameters.get('q') || this._queryParameters.get('k') || undefined;
    };
    /**
     * Returns true if there is any SearchQueryModifier extension.
     * When using query params, it just checks if there is any custom action regardless of type.
     * This is exclusively a debug scenario and it's faster and smaller code, considering this runs in a core scenario.
     */
    SearchQueryManager.prototype._hasExtensions = function () {
        return this._queryParameters.has('customActions') ||
            (!!this._preloadedData.customActions &&
                this._preloadedData.customActions.some(function (customAction) { return customAction.location === CustomActionLocations.SEARCH_QUERY_MODIFIER; }));
    };
    SearchQueryManager.prototype._getExtensionManager = function () {
        var _this = this;
        if (!this._extensionManagerPromise) {
            this._extensionManagerPromise = SPComponentLoader.loadComponentById('4958ea79-6ff3-4480-8291-0932dd010869')
                .then(function (spSearchExtensibility) {
                return new spSearchExtensibility._SearchQueryExtensionManager(_this._serviceScope);
            });
        }
        return this._extensionManagerPromise;
    };
    SearchQueryManager.serviceKey = ServiceKey.create('sp-application-base:SearchQueryManager', SearchQueryManager);
    return SearchQueryManager;
}());
export default SearchQueryManager;
//# sourceMappingURL=SearchQueryManager.js.map