import { ServiceKey, Validate } from '@microsoft/sp-core-library';
import { SPEvent, SPEventArgs, _SPEventManager } from '@microsoft/sp-core-library';
import Placeholder from './Placeholder';
import PlaceholderName from './PlaceholderName';
/**
 * PlaceholderManager is a service registered with the application's root ServiceScope.
 * The host application uses this object to define the placeholders which will
 * be consumed by third-party extensions.  The PlaceholderCollection then obtains its
 * data from the PlaceholderManager.
 *
 * @internal
 */
var PlaceholderManager = /** @class */ (function () {
    function PlaceholderManager(serviceScope) {
        this._isEnabled = false;
        this._changedEvent = new SPEvent(PlaceholderManager.placeholdersChangedEventName);
        this._placeholders = new Map();
        // Create the placeholders for all the names
        this._placeholders.set(PlaceholderName.Top, this._createPlaceholder(PlaceholderName.Top));
        this._placeholders.set(PlaceholderName.Bottom, this._createPlaceholder(PlaceholderName.Bottom));
    }
    Object.defineProperty(PlaceholderManager.prototype, "changedEvent", {
        /**
         * The event raised when the application changes placeholder definitions
         * @eventproperty
         */
        get: function () {
            return this._changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes the collection of placeholders for use by application customizers.
     */
    PlaceholderManager.prototype.initializePlaceholders = function (definitions) {
        var _this = this;
        Validate.isNotNullOrUndefined(definitions, 'definitions');
        definitions.forEach(function (def) { return _this.addPlaceholder(def.name, def.domElement); });
    };
    /**
     * Adds a placeholder.
     * If a placeholder already existed for the same name, it replaces it.
     */
    PlaceholderManager.prototype.addPlaceholder = function (name, domElement) {
        Validate.isTrue(this.placeholders.has(name), 'placeholder exists');
        this._placeholders.get(name).attachToApplication(domElement);
        _SPEventManager.instance.raiseStickyEvent(PlaceholderManager.placeholdersChangedEventName, new SPEventArgs());
    };
    /**
     * Removes a placeholder.
     */
    PlaceholderManager.prototype.removePlaceholder = function (name) {
        Validate.isTrue(this.placeholders.has(name), 'placeholder exists');
        this._placeholders.get(name).detachFromApplication();
        _SPEventManager.instance.raiseStickyEvent(PlaceholderManager.placeholdersChangedEventName, new SPEventArgs());
    };
    Object.defineProperty(PlaceholderManager.prototype, "isEnabled", {
        /**
         * Returns true if the placeholders are enabled for the current application
         */
        get: function () {
            return this._isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Allows the application to set if placeholders are enabled for the current application
     * @internal
     */
    PlaceholderManager.prototype._enable = function () {
        this._isEnabled = true;
    };
    Object.defineProperty(PlaceholderManager.prototype, "placeholders", {
        /**
         * Returns a map from PlaceholderName to Placeholder for all active placeholders.
         */
        get: function () {
            return this._placeholders;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.prototype._createPlaceholder = function (name) {
        return new Placeholder({ name: name, domElement: document.createElement('div') }, this);
    };
    /**
     * The service key for PlaceholderManager.
     */
    PlaceholderManager.serviceKey = ServiceKey.create('sp-application-base:PlaceholderManager', PlaceholderManager);
    /**
     * SPEvent name for placeholders change
     */
    PlaceholderManager.placeholdersChangedEventName = 'placeholders.changedEvent';
    return PlaceholderManager;
}());
export default PlaceholderManager;
//# sourceMappingURL=PlaceholderManager.js.map