import { ServiceScope, ServiceKey } from '@microsoft/sp-core-library';
import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
import Placeholder, { IPlaceholderDefinition } from './Placeholder';
import PlaceholderName from './PlaceholderName';
/**
 * PlaceholderManager is a service registered with the application's root ServiceScope.
 * The host application uses this object to define the placeholders which will
 * be consumed by third-party extensions.  The PlaceholderCollection then obtains its
 * data from the PlaceholderManager.
 *
 * @internal
 */
export default class PlaceholderManager {
    /**
     * The service key for PlaceholderManager.
     */
    static readonly serviceKey: ServiceKey<PlaceholderManager>;
    /**
     * SPEvent name for placeholders change
     */
    private static readonly placeholdersChangedEventName;
    /**
     * undefined regions means they are not initialized yet, but empty array means there are none
     */
    private _placeholders;
    private _changedEvent;
    private _isEnabled;
    constructor(serviceScope: ServiceScope);
    /**
     * The event raised when the application changes placeholder definitions
     * @eventproperty
     */
    readonly changedEvent: SPEvent<SPEventArgs>;
    /**
     * Initializes the collection of placeholders for use by application customizers.
     */
    initializePlaceholders(definitions: IPlaceholderDefinition[]): void;
    /**
     * Adds a placeholder.
     * If a placeholder already existed for the same name, it replaces it.
     */
    addPlaceholder(name: PlaceholderName, domElement: HTMLDivElement): void;
    /**
     * Removes a placeholder.
     */
    removePlaceholder(name: PlaceholderName): void;
    /**
     * Returns true if the placeholders are enabled for the current application
     */
    readonly isEnabled: boolean;
    /**
     * Allows the application to set if placeholders are enabled for the current application
     * @internal
     */
    _enable(): void;
    /**
     * Returns a map from PlaceholderName to Placeholder for all active placeholders.
     */
    readonly placeholders: Map<PlaceholderName, Placeholder>;
    private _createPlaceholder;
}
//# sourceMappingURL=PlaceholderManager.d.ts.map