import { BaseExtension } from '@microsoft/sp-extension-base';
import ApplicationCustomizerContext from './ApplicationCustomizerContext';
import PlaceholderProvider from './placeholder/PlaceholderProvider';
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that runs when an application is first starting.
 *
 * @remarks
 * In the component manifest, the "extensionType" should be set to "ApplicationCustomizer".
 *
 * Example usage scenarios for an application customizer might include: rendering custom
 * UI elements inside a SharePoint content placeholder, tracking page load statistics,
 * or automatically logging the user out after a certain time period.
 *
 * @public
 */
export default abstract class BaseApplicationCustomizer<TProperties> extends BaseExtension<TProperties> {
    /**
     * {@inheritDoc @microsoft/sp-extension-base#BaseExtension.context}
     */
    protected readonly context: ApplicationCustomizerContext;
    private _placeholdersChangedCallback?;
    /**
     * Initialization code for all the application customizers.
     * Sets up the placeholder setup virtual function with the placeholder changed event.
     *
     * @internal
     */
    _initializeExtensionType(): void;
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.dispose}
     */
    dispose(): void;
    /**
     * This event method is called when the placeholders of the host application change, come into
     * existence, or disappear.
     */
    protected onPlaceholdersChanged(placeholderProvider: PlaceholderProvider): void;
}
//# sourceMappingURL=BaseApplicationCustomizer.d.ts.map