import { SPEvent } from '@microsoft/sp-core-library';
import BaseApplication from '../BaseApplication';
/**
 * Provides access to the client-side application that is currently running.
 *
 * @remarks
 * The client-side application determines the user experience for an entire web page.
 * (It is a client-side component with a manifest; however, the SharePoint Framework
 * does not enable third parties to create their own client-side applications at this time.)
 * Within a web page, at most one client-side application will be running at a time.
 * Certain in-place navigation transitions can cause the application to be unloaded
 * and replaced by a different application.
 *
 * The ApplicationAccessor class enables extensibility components such as extensions
 * and web parts to interact with the currently running application.  It acts as
 * a proxy for the real application object (the BaseApplication subclass), to ensure
 * that extensibility components only rely on interactions that would be portable
 * across all applications.
 *
 * @public
 */
var ApplicationAccessor = /** @class */ (function () {
    /**
     * Constructs a new instance of the {@link ApplicationAccessor} class.
     * @remarks
     * Third parties should not call this constructor.  Instead, use the ApplicationAccessor
     * instance from the component context, for example {@link BaseApplicationCustomizer.context}.
     */
    function ApplicationAccessor(serviceScope) {
        this._navigatedEvent = new SPEvent(BaseApplication._navigatedEventName);
        this._privateLayoutChangedEvent = new SPEvent(BaseApplication._layoutChangedEventName);
    }
    Object.defineProperty(ApplicationAccessor.prototype, "navigatedEvent", {
        /**
         * An event that is fired when the application's top-level page context navigates
         * to a new page.
         * @remarks
         * This event fires after the top-level {@link @microsoft/sp-page-context#PageContext} has navigated
         * to a new page.
         * @eventproperty
         */
        get: function () {
            return this._navigatedEvent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationAccessor.prototype, "_layoutChangedEvent", {
        /**
         * Event that gets raised every time the layout changes in a page
         * @eventproperty
         * @internal
         */
        get: function () {
            return this._privateLayoutChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    return ApplicationAccessor;
}());
export default ApplicationAccessor;
//# sourceMappingURL=ApplicationAccessor.js.map