import { Guid, ServiceScope } from '@microsoft/sp-core-library';
import { _IPreloadedData } from '@microsoft/sp-loader';
import BaseApplication from './BaseApplication';
import Navigator from './navigator/Navigator';
import ISPPageChrome from './pageChrome/ISPPageChrome';
/**
 * Application manager. Includes logic to load SPFX client-side applications.
 * @internal
 */
export default class ApplicationManager {
    private static _logSource;
    private _serviceScope;
    private _navigator;
    private _currentApplication;
    private _previousApplication;
    /**
     * Returns true if the current application is a chromeless application.
     *
     * @privateRemarks
     * PageChrome, SuiteNav and application render do not apply to chromeless applications, like
     * Classic pages and ListView application, and should not be called.
     * This is a temporary fix to prevent page chrome DOM and styles from getting inserted into
     * the list view host application.
     *
     * @internal
     */
    static _isChromelessApplication(componentId: string): boolean;
    /**
     * Creates an application manager.
     * @param serviceScope - Root service scope.
     */
    constructor(serviceScope: ServiceScope, navigator?: Navigator);
    /**
     * Returns the currently loaded application.
     * Returns Guid.empty if no application is currently loaded.
     */
    readonly currentApplicationId: Guid;
    /**
     * Returns the currently loaded application.
     * Returns Guid.empty if no application is currently loaded.
     */
    readonly currentApplication: BaseApplication;
    /**
     * Loads an application and starts its execution.
     *
     * @param preloadedData - Application preloaded data. Must include the application id.
     * @param pageChrome - Page Chrome in which the application will be rendered.
     */
    startApplication<TApplication extends BaseApplication>(preloadedData: _IPreloadedData, pageChrome?: ISPPageChrome): Promise<TApplication>;
    private _raiseOnBeforeNavigationEventName;
    private readonly _applicationLoadType;
    private _shouldRaiseOnBeforeNavigationEvent;
    private _initializeApplicationWithTelemetry;
    /**
     * Loads the application, defined by the application id passed as input.
     * Rejects the promise if the application can't be loaded.
     */
    private _loadApplicationComponent;
    private _isChromelessApplication;
    /**
     * Initializes the application.
     * It sets up the PageChrome and SuiteNav if necessary, initializes the application context
     * and renders the application if necessary.
     *
     * @param application - Application to initialize.
     * @param applicationId - Application component Id.
     * @param pageChrome - Application Page Chrome
     *
     * @returns A promise
     */
    private _initializeApplication;
}
//# sourceMappingURL=ApplicationManager.d.ts.map