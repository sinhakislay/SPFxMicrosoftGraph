// Copyright (c) Microsoft. All rights reserved.
import { Validate } from '@microsoft/sp-core-library';
import { SPHttpClient } from '@microsoft/sp-http';
import { _SPLoaderFlights } from '@microsoft/sp-loader';
import NavigationDataError, { NavigationErrorCode } from './NavigationDataError';
/**
 * Navigation Data Provider for SPFx applications.
 * It fetches data required to initiate an SPFx Navigation operation. It also caches the navigation
 * data when appropriate
 *
 * @internal
 */
var NavigationDataProvider = /** @class */ (function () {
    function NavigationDataProvider(serviceScope, validator) {
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        Validate.isNotNullOrUndefined(validator, 'validator');
        this._spHttpClient = serviceScope.consume(SPHttpClient.serviceKey);
        this._dataValidator = validator;
    }
    Object.defineProperty(NavigationDataProvider.prototype, "buildId", {
        get: function () {
            return this._buildId;
        },
        /**
         * Keeps track of the build id the application is bootstrapped with.
         * Used to detect when the build id change while the app is
         * running, and to invalidate manifest caches containing the old build id.
         *
         * @param buildId - Build id the application was bootstrapped with.
         */
        set: function (buildId) {
            this._buildId = buildId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Issues a request to get data association with a given url
     *
     * @param url - URL of the page to fetch data for
     * @param requestType - The request type
     * @param props - Optional Navigation property bag
     *
     * @returns - A navigation data response promise
     */
    NavigationDataProvider.prototype.getData = function (url, props) {
        Validate.isNonemptyString(url, 'url');
        return _SPLoaderFlights._useNewBootSequence() ?
            this._getStore().then(function (store) { return store.getData(url, props); }) :
            Promise.resolve({
                preloadedData: this._fetchData(url)
            });
    };
    /**
     * Invalidates a cached resource by its URL. Any subsequent request for the resource
     * will be fetched from its origin and recached.
     *
     * @param url - URL to invalidate
     */
    NavigationDataProvider.prototype.invalidate = function (url) {
        return this._getStore().then(function (store) {
            store.remove(url);
        });
    };
    NavigationDataProvider.prototype._getStore = function () {
        var _this = this;
        if (this._navigationStore) {
            return Promise.resolve(this._navigationStore);
        }
        return this._navigationStorePromise || (this._navigationStorePromise = import('./NavigationDataStore' /* webpackChunkName: 'sp-navigation-datastore' */)
            .then(function (dataStore) {
            _this._navigationStore = new dataStore.default(NavigationDataProvider.storeKey, NavigationDataProvider.storeBuildIdKey, _this._buildId, function (url, headers) {
                return _this._fetchData(url, headers);
            }, _this._dataValidator);
            return _this._navigationStore;
        }));
    };
    /**
     * Loads a page from SharePoint.
     *
     * @param url - URL of the page to load.
     * @param requestHeaders - Optional request headers
     * @return Promise with the pertinent data for the request.
     */
    NavigationDataProvider.prototype._fetchData = function (url, requestHeaders) {
        // Using ?as=json to ensure that the browser doesn't return a cached request for the HTML
        return this._spHttpClient.get(url + (url.indexOf('?') === -1 ? '?' : '&') + 'as=json', SPHttpClient.configurations.v1, requestHeaders ? { headers: requestHeaders } : undefined).then(function (response) {
            if (!response.ok) {
                throw NavigationDataError.createNavigationError(NavigationErrorCode.fetchData, new Error(response.statusMessage));
            }
            else {
                return response.json().catch(function (error) {
                    throw NavigationDataError.createNavigationError(NavigationErrorCode.parseData, error);
                });
            }
        });
    };
    NavigationDataProvider.storeKey = 'sp-application-base:NavigationDataStore';
    NavigationDataProvider.storeBuildIdKey = 'sp-application-base:NavigationDataStore:buildId';
    return NavigationDataProvider;
}());
export default NavigationDataProvider;
//# sourceMappingURL=NavigationDataProvider.js.map