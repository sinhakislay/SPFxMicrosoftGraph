import { _IPreloadedData } from '@microsoft/sp-loader';
import BaseApplication from '../BaseApplication';
/**
 * Operation that gets executed from a navigation request.
 * This is used by SPFx applications to understand what are their next operations after navigating to a different page.
 *
 * @internal
 */
export declare enum NavigationOperation {
    /**
     * This operation updates the SPFx context but doesn't act on the application.
     * This includes extensions lifecycle operations, changing the PageContext object, etc.
     */
    UpdateContext = 0,
    /**
     * This operation loads a new SPFx application.
     * This implies that the previous application will be disposed.
     */
    LoadApplication = 1,
    /**
     * This operation happens when the URL doesn't map to a SPFx application or the preloaded data is in a corrupted
     * state.
     * The current application is responsible for handling this case.
     * This can mean open the URL in a different tab/window, going to error.aspx, or displaying an error in the console.
     */
    Unsupported = 2
}
/**
 * Specific reasons navigations may be unsupported.
 *
 * @internal
 */
export declare enum NavigationUnsupportedReason {
    /**
     * Navigation was unsupported because the target url was not an SPFX application.
     */
    NonSPFX = 0,
    /**
     * Since our applications aren't fully optimized to cleanup resources
     * we have a cap on the number of transitions before we should trigger
     * a full reload in order to flush the memory.
     */
    TransitionsExceeded = 1,
    /**
     * The target url points to a valid SPFX app however the locale is different
     * and we need to do a full reload to get scripts in the new locale.
     */
    LocaleChange = 2,
    /**
     * App to App transitions have not yet been enabled for this user.
     */
    AppTransitionNotEnabled = 3
}
/**
 * Result of a navigation operation.
 *
 * @internal
 */
export interface INavigationResult {
    /**
     * Preloaded data of the new context.
     */
    preloadedData: _IPreloadedData;
    /**
     * Operation that is being performed as part of the navigation.
     * Unsupported when the destination doesn't map to a SPFx application.
     */
    operation: NavigationOperation;
    /**
     * If a navigation operation is unsupported, this is the specific reason.
     */
    unsupportedReason?: NavigationUnsupportedReason;
}
/**
 * Optional property bag provided to the Navigator
 *
 * @internal
 */
export interface INavigationProperties {
    /**
     * Determines whether caching is enabled
     */
    enableCache: boolean;
    /**
     * Determines whether to prefetch application data
     */
    enableDataPrefetch: boolean;
    /**
    * Determines whether to redirect to the url when navigation fails
    */
    suppressReloadOnError?: boolean;
}
/**
 * Internal property bag used by the Navigator to ensure prefetch
 * requests are marked accordingly.
 *
 * @internal
 */
export interface INavigationPropertiesWithPrefetch extends Partial<INavigationProperties> {
    /**
     * Marks the request as a prefetch request so that
     * the visit is not marked as a view on the server side.
     * Defaults to true when calling navigator.prefetch
     */
    isPrefetchRequest?: boolean;
}
export interface IExtendedNavigationResult<TApplication extends BaseApplication> extends INavigationResult {
    application: TApplication;
}
//# sourceMappingURL=INavigationResult.d.ts.map