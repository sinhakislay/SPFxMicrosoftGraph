import { ServiceScope } from '@microsoft/sp-core-library';
import { _IPreloadedData } from '@microsoft/sp-loader';
import ApplicationManager from '../ApplicationManager';
import BaseApplication from '../BaseApplication';
import { INavigationResult, INavigationProperties } from './INavigationResult';
/**
 * Navigator for SPFx applications.
 * It allows to navigate to a different URL that is backed by an SPFx application.
 *
 * Updates all SPFx-internal data structures with the information from the new URL.
 * This includes the page context, the manifest store, the session, telemetry and the themes.
 *
 * @internal
 */
export default class Navigator {
    private _navigationOrchestrator;
    private _navigationDataProvider;
    private _preloadedData;
    constructor(serviceScope: ServiceScope, applicationManager?: ApplicationManager);
    /**
     * Returns the preloaded data used by the current page.
     * Throws if it hasn't navigated to a page yet.
     */
    readonly preloadedData: _IPreloadedData;
    /**
     * Navigates to a new page.
     * Requests a JSON to SharePoint server and updates all SPFx related data with the new information.
     * This includes new manifests, page context, theme, telemetry settings.
     *
     * @param url - Destination URL
     * @param props - Optional Navigation properties
     */
    navigate(url: string, props?: INavigationProperties): Promise<INavigationResult>;
    /**
     * Prefetches page navigation data
     *
     * @remarks
     * This is a required optimization that allows applications to pre-emptively fetch navigation data
     * so as to allow faster transitions between spfx-based applications.
     *
     * @param url - Destination URL
     * @param props - Optional Navigation properties
     *
     * @returns A promise
     */
    prefetch(url: string, props?: INavigationProperties): Promise<void>;
    /**
     * Given a preloaded data object, it sets up all SPFx related data with the new information from the preloaded data.
     *
     * @remarks
     * This is necessary because ListView has its own router and will give us only the object itself.
     *
     * @param preloadedData - Preloaded data object
     */
    navigateToPreloadedData(preloadedData: _IPreloadedData): Promise<INavigationResult>;
    /**
     * Given a preloaded data object, it sets up all SPFx related data with the new information from the preloaded data.
     * It returns a promise with the loaded application.
     *
     * @remarks
     * This is used by the PlatformLoader to bootstrap an application.
     *
     * @param preloadedData - Preloaded data object
     */
    navigateToApplication<TApplication extends BaseApplication>(preloadedData: _IPreloadedData): Promise<TApplication>;
    /**
     * This is an API used in the old boot sequence to load the application customizers after the application
     * has rendered. Once flight #182 (SppplatCrossAppNavigation) has been graduated this API should be removed.
     *
     * @internal
     */
    _loadApplicationCustomizers(preloadedData: _IPreloadedData): Promise<void>;
    /**
     * Invalidates a cached resource by its URL. Any subsequent request for the resource
     * will be fetched from its origin and recached.
     *
     * @param url - URL to invalidate
     */
    invalidate(url: string): Promise<void>;
    private _validatePreloadedData;
    private _raisePrefetchDataEvent;
    /**
     * Extracts the current build id from a string in the first manifest.
     * This is a temporary solution until a better solution is arrived at
     * such as including the build id at the root of the preload data.
     *
     * @param preloadedData - preload data for a given application
     */
    private _getBuildId;
}
//# sourceMappingURL=Navigator.d.ts.map