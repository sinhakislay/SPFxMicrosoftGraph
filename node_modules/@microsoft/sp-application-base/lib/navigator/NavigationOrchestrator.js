import { Guid, Session, Validate, _SPEventManager, _SPFlight } from '@microsoft/sp-core-library';
import { _Diagnostics, _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _ManifestStore, _SPLoaderFlights } from '@microsoft/sp-loader';
import { PageContext, SharePointPageContextDataProvider } from '@microsoft/sp-page-context';
import SearchQueryManager from '../extensibility/SearchQueryManager';
import { _PerformanceLogger, _Telemetry } from '@ms/sp-telemetry';
import ApplicationManager from '../ApplicationManager';
import BaseApplication from '../BaseApplication';
import { Flights } from '../common/Flights';
import { Killswitches } from '../common/Killswitches';
import ApplicationCustomizerLoader from '../extensibility/ApplicationCustomizerLoader';
import SPMasterChrome from '../pageChrome/SPMasterChrome';
import SPPageChrome from '../pageChrome/SPPageChrome';
import SPThemeProvider from '../pageChrome/SPThemeProvider';
import { NavigationOperation, NavigationUnsupportedReason } from './INavigationResult';
/**
 * It orchestrates all different steps to navigate to an SPFx application.
 *
 * This includes updating the Page Context, loading the application customizers, initializing the application, etc.
 */
var NavigationOrchestrator = /** @class */ (function () {
    /**
     * Creates a NavigationOrchestrator.
     *
     * @param serviceScope - Root service scope
     * @param applicationManager - Depending on the bootstrapping sequence, application manager is
     *                             injected or created inside.
     */
    function NavigationOrchestrator(serviceScope, applicationManager, navigator) {
        this._numAppsInitializedInSession = 0;
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._serviceScope = serviceScope;
        this._applicationManager = applicationManager || new ApplicationManager(serviceScope, navigator);
        this._pageContext = serviceScope.consume(PageContext.serviceKey);
        this._searchQueryManager = serviceScope.consume(SearchQueryManager.serviceKey);
        this._applicationCustomizerLoader = new ApplicationCustomizerLoader(serviceScope);
    }
    /**
     * Raises an event for a page navigation.
     */
    NavigationOrchestrator.raiseNavigatedEvent = function () {
        _SPEventManager.instance.raiseStickyEvent(BaseApplication._navigatedEventName, {});
    };
    /**
     * Does all the operation to navigate to a new preloaded data.
     *
     * @remarks
     * It assumes the preloaded data has already been validated. Not null, with a spPageContextInfo and an application id.
     */
    NavigationOrchestrator.prototype.navigate = function (preloadedData) {
        var _this = this;
        var currentAppId = this._applicationManager.currentApplicationId;
        var appLoaded = !currentAppId.equals(Guid.empty);
        var isSameApp = currentAppId.equals(Guid.tryParse(preloadedData.clientSideApplicationId) || Guid.empty);
        if (Killswitches.isInplaceNavigationKSActive()) {
            // Cross-app navigation is not supported without the new boot sequence. Return Unsupported.
            if (!_SPLoaderFlights._useNewBootSequence()) {
                if (appLoaded && !isSameApp) {
                    return Promise.resolve({
                        preloadedData: preloadedData,
                        application: undefined,
                        operation: NavigationOperation.Unsupported
                    });
                }
            }
        }
        else {
            var isAppIdSameOrEmpty = isSameApp || !appLoaded;
            var unsupportedReason = this._isNavigationSupportedWithReason(preloadedData, this._pageContext, isAppIdSameOrEmpty);
            if (unsupportedReason !== undefined) {
                return Promise.resolve({
                    preloadedData: preloadedData,
                    application: undefined,
                    operation: NavigationOperation.Unsupported,
                    unsupportedReason: unsupportedReason
                });
            }
        }
        this._fixPreloadedDataItem(preloadedData);
        var isCrossSite = this._isCrossSite(preloadedData, this._pageContext);
        // TODO: demyren: VSO:428542 - clean up when moving to new PageContext
        this._pageContext.initialize(SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo), preloadedData.spPageContextInfo);
        _ManifestStore.instance.replaceManifests(preloadedData.manifests);
        // Before initializing application customizers we should make sure that the page chrome is initialized.
        // Page chrome initializes the dialog manager.
        if (!ApplicationManager._isChromelessApplication(preloadedData.clientSideApplicationId)) {
            if (Flights.useNewChromeSequence() && !this._masterChrome) {
                this._masterChrome = new SPMasterChrome();
            }
            if (Flights.useNextGenSPA) {
                if (!this._pageChrome) {
                    this._pageChrome = new SPPageChrome(this._serviceScope, this._masterChrome);
                }
            }
            else {
                this._pageChrome = new SPPageChrome(this._serviceScope, this._masterChrome);
            }
        }
        if (isCrossSite && !ApplicationManager._isChromelessApplication(preloadedData.clientSideApplicationId)) {
            if (Killswitches.themeProviderOverrideKSActive()) {
                var themeProvider = new SPThemeProvider(this._serviceScope);
                themeProvider.loadThemedStyles();
            }
            else if (appLoaded && isSameApp) {
                this._applicationManager.currentApplication._loadTheme();
            }
        }
        this._updateTelemetry(preloadedData);
        // Discouraging application developers to use spPageContextInfo and instead to use the Page Context API.
        preloadedData.spPageContextInfo = undefined;
        Session._changePage();
        NavigationOrchestrator.raiseNavigatedEvent();
        if (_SPLoaderFlights._useNewBootSequence()) {
            // If it's the same application, just return with the result.
            if (isSameApp) {
                this._initializeSearchQuery(preloadedData);
                // The application doesn't change, but the preloaded data has. We need to re-load the app customizers.
                if (this._applicationManager.currentApplication.delayExtensionsLoading()) {
                    this._initializeExtensionsContext(preloadedData);
                }
                else {
                    this._loadApplicationCustomizers(preloadedData);
                }
                return Promise.resolve({
                    preloadedData: preloadedData,
                    application: this._applicationManager.currentApplication,
                    operation: NavigationOperation.UpdateContext
                });
            }
            else {
                _PerformanceLogger.markCrossAppNavigationStart();
                return this._applicationManager.startApplication(preloadedData, this._pageChrome).then(function (application) {
                    _this._numAppsInitializedInSession++;
                    _this._initializeSearchQuery(preloadedData);
                    // Load app customizers after the application has rendered to )ensure placeholders have been set up.
                    if (_this._applicationManager.currentApplication.delayExtensionsLoading()) {
                        _this._initializeExtensionsContext(preloadedData);
                    }
                    else {
                        _this._loadApplicationCustomizers(preloadedData);
                    }
                    return Promise.resolve({
                        preloadedData: preloadedData,
                        application: application,
                        operation: NavigationOperation.LoadApplication
                    });
                });
            }
        }
        else {
            // In the old boot sequence, ApplicationManager calls Navigator, not the other way around
            // In this case, nobody will read the application property so it can be left undefined
            return Promise.resolve({
                preloadedData: preloadedData,
                application: undefined,
                operation: NavigationOperation.UpdateContext
            });
        }
    };
    NavigationOrchestrator.prototype._initializeExtensionsContext = function (preloadedData) {
        if (this._appSupportsExtensions(preloadedData)) {
            this._applicationCustomizerLoader.initializeExtensionsContext(preloadedData.customActions);
        }
    };
    /**
     * Loads the application customizers for the current page.
     *
     * @remarks
     * This function is internal, and not private, because it needs to be used by the ApplicationManager when the
     * flight #182 (SppplatCrossAppNavigation) is off. Once the flight is graduated this function should be private.
     *
     * @param preloadedData - Preloaded data for the current page.
     *
     * @internal
     */
    NavigationOrchestrator.prototype._loadApplicationCustomizers = function (preloadedData) {
        if (this._appSupportsExtensions(preloadedData)) {
            _TraceLogger.logVerbose(NavigationOrchestrator._logSource, 'Loading application customizers');
            return this._applicationCustomizerLoader.loadExtensions(preloadedData.customActions);
        }
        else {
            _TraceLogger.logVerbose(NavigationOrchestrator._logSource, 'Application Customizer is not supported for classic pages and workbench.');
            return Promise.resolve();
        }
    };
    /**
     * Every time the URL gets updated (and there is a navigation) the search query needs to be updated
     * in the page context.
     * It's done in an async way to include loading SearchQueryModifier extensions when necessary.
     *
     * Setting up the search query is disabled for applications that don't have this scenario.
     * If that situation changes (like SPHome supporting search scenario) the check will need to be revisited.
     */
    NavigationOrchestrator.prototype._initializeSearchQuery = function (preloadedData) {
        var _this = this;
        if (_SPFlight.isEnabled(1626 /* CSISearchQueryExtension */) &&
            preloadedData.clientSideApplicationId !== NavigationOrchestrator.classicPagesComponentId &&
            preloadedData.clientSideApplicationId !== NavigationOrchestrator.workbenchComponentId &&
            preloadedData.clientSideApplicationId !== NavigationOrchestrator.spHomeComponentId) {
            return this._searchQueryManager.initialize(preloadedData)
                .then(function () { return _this._searchQueryManager.getSearchQuery(); })
                .then(function (query) { return _this._pageContext._setSearchQuery(query); });
        }
        return Promise.resolve();
    };
    NavigationOrchestrator.prototype._appSupportsExtensions = function (preloadedData) {
        if (preloadedData.clientSideApplicationId !== NavigationOrchestrator.classicPagesComponentId &&
            preloadedData.clientSideApplicationId !== NavigationOrchestrator.workbenchComponentId) {
            return true;
        }
        return false;
    };
    NavigationOrchestrator.prototype._updateTelemetry = function (preloadedData) {
        var _a = this._pageContext.legacyPageContext, correlationId = _a.correlationId, siteId = _a.siteId, webId = _a.webId;
        var emptyIdValueForMerge = ''; // merge inside updateSettings doesn't overwrite if undefined
        var listId = (this._pageContext.list && this._pageContext.list.id.toString()) ||
            emptyIdValueForMerge;
        var uniqueId = (preloadedData.item && preloadedData.item.UniqueId) ||
            emptyIdValueForMerge;
        // This will eventually be removed when the migration to Diagnostics is complete
        var manifestAlias = preloadedData && preloadedData.manifests && preloadedData.manifests.length > 0 ?
            preloadedData.manifests[0].alias :
            '';
        _Telemetry.updateSettings({
            siteId: siteId,
            webId: webId,
            listId: listId,
            listItemUniqueId: uniqueId,
            correlationId: correlationId
        }, manifestAlias /** used for workload name */);
        _Diagnostics.updateSettings({
            siteId: siteId,
            webId: webId,
            listId: listId,
            listItemUniqueId: uniqueId,
            correlationId: correlationId
        });
    };
    /**
     * Returns true if a navigator from the page context to the new preloaded data is a cross-site navigation.
     * This operation needs to happen before updating the page context with the new preloaded data.
     */
    NavigationOrchestrator.prototype._isCrossSite = function (preloadedData, pageContext) {
        if (!pageContext.isInitialized) { // This happens in the first load.
            return false;
        }
        return !Guid.parse(preloadedData.spPageContextInfo.webId).equals(pageContext.web.id) ||
            !Guid.parse(preloadedData.spPageContextInfo.siteId).equals(pageContext.site.id);
    };
    NavigationOrchestrator.prototype._fixPreloadedDataItem = function (preloadedData) {
        var INVALID_PAGE_ITEM_ID = -1;
        // Use the preloadedData's item id if the spPageContextInfo item id is unavailable
        // The workbench can provide a list item via query string which will not be reflected in the
        // spPageContextInfo variable.
        if (preloadedData.spPageContextInfo.pageItemId === INVALID_PAGE_ITEM_ID &&
            preloadedData.item &&
            preloadedData.item.ID !== INVALID_PAGE_ITEM_ID) {
            preloadedData.spPageContextInfo.pageItemId = preloadedData.item.ID;
        }
        return preloadedData;
    };
    /**
     * Determines whether inplace navigation is supported.
     *
     * @param preloadedData - Application preloaded data
     * @param pageContext - Application context
     * @param isSameAppId - Whether the navigation is happening within the same app
     *
     * @returns True if navigation is supported else false
     */
    NavigationOrchestrator.prototype._isNavigationSupportedWithReason = function (preloadedData, pageContext, isSameAppId) {
        if (!_SPLoaderFlights._useNewBootSequence()) {
            return isSameAppId ? undefined : NavigationUnsupportedReason.AppTransitionNotEnabled;
        }
        var isDifferentLocale = pageContext.isInitialized &&
            pageContext.cultureInfo.currentUICultureName !== preloadedData.spPageContextInfo.currentUICultureName;
        // Navigation is supported if the target locale is the same and the target application id is same as current
        // application Id or the number of in-place navigations are within the threshold.
        if (isDifferentLocale) {
            return NavigationUnsupportedReason.LocaleChange;
        }
        if (!isSameAppId && this._numAppsInitializedInSession > NavigationOrchestrator.maxSupportedAppsInSession) {
            return NavigationUnsupportedReason.TransitionsExceeded;
        }
        return undefined;
    };
    NavigationOrchestrator.classicPagesComponentId = 'eb4b666b-5c29-4dad-9a99-23613f21a2b7';
    NavigationOrchestrator.workbenchComponentId = '8be81a5c-af38-4bb2-af97-afa3b64dfbed';
    NavigationOrchestrator.spHomeComponentId = '1f019ae1-2de1-4f44-b723-00a6ec1d7445';
    NavigationOrchestrator._logSource = _LogSource.create('NavigationOrchestrator');
    NavigationOrchestrator.maxSupportedAppsInSession = 15;
    return NavigationOrchestrator;
}());
export default NavigationOrchestrator;
//# sourceMappingURL=NavigationOrchestrator.js.map