import { BaseComponentContext, _IComponentContextParameters } from '@microsoft/sp-component-base';
import { SPEvent } from '@microsoft/sp-core-library';
import { _IPreloadedData } from '@microsoft/sp-loader';
import { ISuiteNavManager } from '@ms/sp-suite-nav';
import { ApplicationLoadType } from './ApplicationLoadType';
import ISPPageChrome from './pageChrome/ISPPageChrome';
import Navigator from './navigator/Navigator';
import PrefetchedDataEventArgs from './navigator/PrefetchedDataEventArgs';
/**
 * Constructor parameters for BaseApplicationContext.
 *
 * @internal
 */
export interface IApplicationContextParameters extends _IComponentContextParameters {
    /**
     * Controller that allows application to navigate to a different url
     */
    navigator: Navigator;
    /**
     * The application chrome
     */
    chrome: ISPPageChrome | undefined;
    /**
     * The application load type
     */
    loadType: ApplicationLoadType;
}
/**
 * Context object for a client-side applications.
 *
 * @alpha
 */
export default class BaseApplicationContext extends BaseComponentContext {
    private _preloadedData;
    private _suiteNavManager;
    private _navigator;
    private _chrome;
    private _loadType;
    private _prefetchedDataEvent;
    private _disposed;
    private _delayExtensionsLoading;
    /** @internal */
    constructor(parameters: IApplicationContextParameters);
    /**
     * Diposes the application context
     */
    dispose(): void;
    /**
     * Sets the SuiteNav manager in the application context.
     */
    initializeSuiteNavManager(suiteNavManager: ISuiteNavManager): void;
    /**
     * The preloaded data used by SPFx
     */
    readonly preloadedData: _IPreloadedData;
    /**
     * The application navigator
     */
    readonly navigator: Navigator | undefined;
    /**
     * The application page chrome
     */
    readonly chrome: ISPPageChrome | undefined;
    /**
     * The application load type
     */
    readonly loadType: ApplicationLoadType;
    /**
     * An event that gets fired when the application prefetched data is available.
     */
    readonly prefetchedDataEvent: SPEvent<PrefetchedDataEventArgs>;
    /**
     * The SuiteNav manager
     *
     * @remarks
     * The SuiteNav manager is defined only after the application starts rendering.
     * Chromeless application do not have a SuiteNav manager.
     */
    readonly suiteNavManager: ISuiteNavManager | undefined;
    /**
     * Gets a value indicating whether or not extensions loading should be delayed.
     */
    /**
    * Sets a value to indicate whether or not extensions loading should be delayed.
    */
    delayExtensionsLoading: boolean;
}
//# sourceMappingURL=BaseApplicationContext.d.ts.map