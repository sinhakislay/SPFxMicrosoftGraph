import { _AadTokenProviders } from '@microsoft/sp-http';
import strings from '../SPApplicationBase.resx';
import PlaceholderProvider from '../extensibility/placeholder/PlaceholderProvider';
import PlaceholderName from '../extensibility/placeholder/PlaceholderName';
import PlaceholderManager from '../extensibility/placeholder/PlaceholderManager';
/**
 * This class sets up an a placeholder for scenarios that token acquisition fails and will require
 * end user interaction.
 * @internal
 */
var AadPlaceholderManager = /** @class */ (function () {
    function AadPlaceholderManager() {
    }
    /**
     * Sets up a placeholder (or alert if unavailable) for the token acquisition failure event.
     */
    AadPlaceholderManager.prototype.setUpTokenAcquistionFailurePlaceholder = function (application, serviceScope) {
        var _this = this;
        var tokenProvider = _AadTokenProviders.configurable;
        var placeHolderProvider = new PlaceholderProvider(serviceScope, {
            sequence: 0,
            preAllocatedApplicationCustomizerBottomHeight: 0,
            preAllocatedApplicationCustomizerTopHeight: 0
        }, 'AAD Failure Placeholder'
        /* This placeholder should render over any other placeholder */ );
        var placeholderManager = serviceScope.consume(PlaceholderManager.serviceKey);
        placeHolderProvider.changedEvent.add(application, function () {
            if (!_this._aadPlaceHolderContent) {
                _this._aadPlaceHolderContent = placeHolderProvider.tryCreateContent(PlaceholderName.Top);
            }
        });
        tokenProvider.tokenAcquisitionEvent.add(application, function (eventArgs) {
            if (!placeholderManager.isEnabled) {
                _this._renderTokenAcquistionAlert(eventArgs);
            }
            else {
                if (_this._aadPlaceHolderContent) {
                    _this._renderTokenAcquistionPlaceholder(_this._aadPlaceHolderContent, eventArgs);
                }
                else {
                    _this._renderTokenAcquistionAlert(eventArgs);
                }
            }
        });
    };
    AadPlaceholderManager.prototype._renderTokenAcquistionPlaceholder = function (placeholderContent, eventArgs) {
        placeholderContent.domElement.setAttribute('style', 'text-align: center; padding: 10px; background-color:#fff4ce;');
        var errorMessageElement = document.createElement('span');
        errorMessageElement.innerText = eventArgs.message;
        placeholderContent.domElement.appendChild(errorMessageElement);
        if (eventArgs.redirectUrl) {
            var resolveLinkElement = document.createElement('a');
            resolveLinkElement.href = eventArgs.redirectUrl;
            resolveLinkElement.innerText = strings.clickToResolveIssueLinkText;
            placeholderContent.domElement.appendChild(resolveLinkElement);
        }
    };
    AadPlaceholderManager.prototype._renderTokenAcquistionAlert = function (eventArgs) {
        if (confirm(eventArgs.message) && eventArgs.redirectUrl) {
            window.location.href = eventArgs.redirectUrl;
        }
    };
    return AadPlaceholderManager;
}());
export default AadPlaceholderManager;
//# sourceMappingURL=AadPlaceholderManager.js.map