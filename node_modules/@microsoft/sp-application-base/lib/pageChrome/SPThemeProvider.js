import { PageContext } from '@microsoft/sp-page-context';
import { WebThemeProvider } from '@ms/odsp-datasources/lib/providers/theming/WebThemeProvider';
import { ThemeInitializer } from '@ms/odsp-datasources/lib/providers/theming/ThemeInitializer';
import WebThemeDataSource from '@ms/odsp-datasources/lib/dataSources/theming/spList/WebThemeDataSource';
import { Promise as ODSPPromise } from '@ms/odsp-utilities-bundle';
/**
 * The class controls applying a theme to the current Page.
 * The theme is a web level setting, if a theme is applied this class with call loadThemedStyles
 * which will update the styles that are registered with load-themed-styles.
 *
 * @internal
 */
var SPThemeProvider = /** @class */ (function () {
    function SPThemeProvider(serviceScope) {
        var _this = this;
        serviceScope.whenFinished(function () {
            _this._pageContext = serviceScope.consume(PageContext.serviceKey);
            _this._themeFactoryProvider = {
                webThemeProvider: function (pageContext) { return _this._getThemeProvider(pageContext); }
            };
        });
    }
    SPThemeProvider.prototype.loadThemedStyles = function (forceUpdate) {
        return ThemeInitializer.initializeTheme(this._themeFactoryProvider, this._pageContext.legacyPageContext, forceUpdate);
    };
    SPThemeProvider.prototype._getThemeProvider = function (pageContext) {
        var _this = this;
        return new WebThemeProvider({
            pageContext: pageContext,
            getThemeDataSource: function () { return _this._getThemeDataSource(); }
        });
    };
    SPThemeProvider.prototype._getThemeDataSource = function () {
        var themeDataSource = new WebThemeDataSource(this._pageContext.legacyPageContext);
        return ODSPPromise.resolve(themeDataSource);
    };
    return SPThemeProvider;
}());
export default SPThemeProvider;
//# sourceMappingURL=SPThemeProvider.js.map