{"version":3,"file":"DtsEmitHelpers.js","sourceRoot":"","sources":["../../src/generators/DtsEmitHelpers.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AAEjC,oEAA6D;AAE7D,qDAAiE;AAIjE;;GAEG;AACH,MAAa,cAAc;IAClB,MAAM,CAAC,UAAU,CAAC,YAA0B,EAAE,eAAgC,EAAE,SAAoB;QACzG,QAAQ,SAAS,CAAC,UAAU,EAAE;YAC5B,KAAK,yBAAa,CAAC,aAAa;gBAC9B,YAAY,CAAC,SAAS,CAAC,UAAU,SAAS,CAAC,UAAU,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBACzF,MAAM;YACR,KAAK,yBAAa,CAAC,WAAW;gBAC5B,IAAI,eAAe,CAAC,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE;oBACxD,YAAY,CAAC,KAAK,CAAC,YAAY,SAAS,CAAC,UAAU,OAAO,eAAe,CAAC,WAAW,IAAI,CAAC,CAAC;iBAC5F;qBAAM;oBACL,YAAY,CAAC,KAAK,CAAC,YAAY,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;iBAC1D;gBACD,YAAY,CAAC,SAAS,CAAC,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBAC3D,MAAM;YACR,KAAK,yBAAa,CAAC,UAAU;gBAC3B,YAAY,CAAC,SAAS,CAAC,eAAe,eAAe,CAAC,WAAW,UAAU,SAAS,CAAC,UAAU,IAAI,CAAC,CAAC;gBACrG,MAAM;YACR,KAAK,yBAAa,CAAC,YAAY;gBAC7B,YAAY,CAAC,SAAS,CAAC,UAAU,eAAe,CAAC,WAAW,eAAe,SAAS,CAAC,UAAU,KAAK,CAAC,CAAC;gBACtG,MAAM;YACR;gBACE,MAAM,IAAI,iCAAa,CAAC,6BAA6B,CAAC,CAAC;SAC1D;IACH,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,YAA0B,EAAE,UAAkB,EAC1E,eAAgC;QAEhC,IAAI,UAAU,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE;YAChD,YAAY,CAAC,SAAS,CAAC,kBAAkB,eAAe,CAAC,WAAW,GAAG,CAAC,CAAC;SAC1E;aAAM,IAAI,eAAe,CAAC,WAAW,KAAK,UAAU,EAAE;YACrD,YAAY,CAAC,SAAS,CAAC,YAAY,eAAe,CAAC,WAAW,OAAO,UAAU,IAAI,CAAC,CAAC;SACtF;aAAM;YACL,YAAY,CAAC,SAAS,CAAC,YAAY,UAAU,IAAI,CAAC,CAAC;SACpD;IACH,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,YAA0B,EAAE,SAAoB;QAC5E,IAAI,SAAS,CAAC,+BAA+B,CAAC,MAAM,GAAG,CAAC,EAAE;YACxD,YAAY,CAAC,SAAS,EAAE,CAAC;YACzB,KAAK,MAAM,8BAA8B,IAAI,SAAS,CAAC,+BAA+B,EAAE;gBACtF,YAAY,CAAC,SAAS,CAAC,kBAAkB,8BAA8B,IAAI,CAAC,CAAC;aAC9E;SACF;IACH,CAAC;CACF;AA7CD,wCA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nimport { InternalError } from '@microsoft/node-core-library';\r\nimport { CollectorEntity } from '../collector/CollectorEntity';\r\nimport { AstImport, AstImportKind } from '../analyzer/AstImport';\r\nimport { StringWriter } from './StringWriter';\r\nimport { Collector } from '../collector/Collector';\r\n\r\n/**\r\n * Some common code shared between DtsRollupGenerator and ApiReportGenerator.\r\n */\r\nexport class DtsEmitHelpers {\r\n  public static emitImport(stringWriter: StringWriter, collectorEntity: CollectorEntity, astImport: AstImport): void {\r\n    switch (astImport.importKind) {\r\n      case AstImportKind.DefaultImport:\r\n        stringWriter.writeLine(`import ${astImport.exportName} from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.NamedImport:\r\n        if (collectorEntity.nameForEmit !== astImport.exportName) {\r\n          stringWriter.write(`import { ${astImport.exportName} as ${collectorEntity.nameForEmit} }`);\r\n        } else {\r\n          stringWriter.write(`import { ${astImport.exportName} }`);\r\n        }\r\n        stringWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.StarImport:\r\n        stringWriter.writeLine(`import * as ${collectorEntity.nameForEmit} from '${astImport.modulePath}';`);\r\n        break;\r\n      case AstImportKind.EqualsImport:\r\n        stringWriter.writeLine(`import ${collectorEntity.nameForEmit} = require('${astImport.modulePath}');`);\r\n        break;\r\n      default:\r\n        throw new InternalError('Unimplemented AstImportKind');\r\n    }\r\n  }\r\n\r\n  public static emitNamedExport(stringWriter: StringWriter, exportName: string,\r\n    collectorEntity: CollectorEntity): void {\r\n\r\n    if (exportName === ts.InternalSymbolName.Default) {\r\n      stringWriter.writeLine(`export default ${collectorEntity.nameForEmit};`);\r\n    } else if (collectorEntity.nameForEmit !== exportName) {\r\n      stringWriter.writeLine(`export { ${collectorEntity.nameForEmit} as ${exportName} }`);\r\n    } else {\r\n      stringWriter.writeLine(`export { ${exportName} }`);\r\n    }\r\n  }\r\n\r\n  public static emitStarExports(stringWriter: StringWriter, collector: Collector): void {\r\n    if (collector.starExportedExternalModulePaths.length > 0) {\r\n      stringWriter.writeLine();\r\n      for (const starExportedExternalModulePath of collector.starExportedExternalModulePaths) {\r\n        stringWriter.writeLine(`export * from \"${starExportedExternalModulePath}\";`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}