import * as ts from 'typescript';
import { IExcerptToken, IExcerptTokenRange } from '@microsoft/api-extractor-model';
import { DeclarationReferenceGenerator } from './DeclarationReferenceGenerator';
/**
 * Used to provide ExcerptBuilder with a list of nodes whose token range we want to capture.
 */
export interface IExcerptBuilderNodeToCapture {
    /**
     * The node to capture
     */
    node: ts.Node | undefined;
    /**
     * The token range whose startIndex/endIndex will be overwritten with the indexes for the
     * tokens corresponding to IExcerptBuilderNodeToCapture.node
     */
    tokenRange: IExcerptTokenRange;
}
/**
 * Options for ExcerptBuilder
 */
export interface ISignatureBuilderOptions {
    referenceGenerator: DeclarationReferenceGenerator;
    /**
     * The AST node that we will traverse to extract tokens
     */
    startingNode: ts.Node;
    /**
     * Normally, the excerpt will include all child nodes for `startingNode`; whereas if `childKindToStopBefore`
     * is specified, then the node traversal will stop before (i.e. excluding) the first immediate child
     * of `startingNode` with the specified syntax kind.
     *
     * @remarks
     * For example, suppose the signature is `interface X: Y { z: string }`.  The token `{` has syntax kind
     * `ts.SyntaxKind.FirstPunctuation`, so we can specify that to truncate the excerpt to `interface X: Y`.
     */
    stopBeforeChildKind?: ts.SyntaxKind;
    /**
     * A list of child nodes whose token ranges we want to capture
     */
    nodesToCapture?: IExcerptBuilderNodeToCapture[];
}
export declare class ExcerptBuilder {
    static build(options: ISignatureBuilderOptions): IExcerptToken[];
    static createEmptyTokenRange(): IExcerptTokenRange;
    private static _buildSpan;
    private static _appendToken;
}
//# sourceMappingURL=ExcerptBuilder.d.ts.map