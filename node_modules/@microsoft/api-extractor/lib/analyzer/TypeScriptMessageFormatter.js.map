{"version":3,"file":"TypeScriptMessageFormatter.js","sourceRoot":"","sources":["../../src/analyzer/TypeScriptMessageFormatter.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAI3D,MAAa,0BAA0B;IACrC;;OAEG;IACI,MAAM,CAAC,MAAM,CAAC,WAA+C;QAClE,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,KACE,IAAI,kBAAkB,GAAmD,WAAW,EACpF,kBAAkB,KAAK,SAAS,EAChC,kBAAkB,GAAI,kBAAgD,CAAC,IAAI,EAC3E;YACA,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;gBAC1C,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;aAC1C;iBAAM;gBACL,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;aACtD;SACF;QAED,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,uBAAuB,CAAC,IAAa;QACjD,MAAM,UAAU,GAAkB,IAAI,CAAC,aAAa,EAAE,CAAC;QACvD,MAAM,gBAAgB,GAAwB,UAAU,CAAC,6BAA6B,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxG,OAAO,IAAI,UAAU,CAAC,QAAQ,IAAI,gBAAgB,CAAC,IAAI,GAAG,CAAC;IAC7D,CAAC;CACF;AA9BD,gEA8BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\n\r\nexport class TypeScriptMessageFormatter {\r\n  /**\r\n   * Format a TypeScript diagnostic message or message chain.\r\n   */\r\n  public static format(messageText: string | ts.DiagnosticMessageChain): string {\r\n    const formattedErrors: string[] = [];\r\n    for (\r\n      let wrappedMessageText: string | ts.DiagnosticMessageChain | undefined = messageText;\r\n      wrappedMessageText !== undefined;\r\n      wrappedMessageText = (wrappedMessageText as ts.DiagnosticMessageChain).next\r\n    ) {\r\n      if (typeof wrappedMessageText === 'string') {\r\n        formattedErrors.push(wrappedMessageText);\r\n      } else {\r\n        formattedErrors.push(wrappedMessageText.messageText);\r\n      }\r\n    }\r\n\r\n    return formattedErrors.join('; ');\r\n  }\r\n\r\n  /**\r\n   * Returns a string such as this, based on the context information in the provided node:\r\n   *   \"[C:\\Folder\\File.ts#123]\"\r\n   */\r\n  public static formatFileAndLineNumber(node: ts.Node): string {\r\n    const sourceFile: ts.SourceFile = node.getSourceFile();\r\n    const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(node.getStart());\r\n    return `[${sourceFile.fileName}#${lineAndCharacter.line}]`;\r\n  }\r\n}\r\n"]}