{"version":3,"file":"Extractor.js","sourceRoot":"","sources":["../../src/api/Extractor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport {\r\n  FileSystem,\r\n  NewlineKind,\r\n  PackageJsonLookup,\r\n  IPackageJson\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { ExtractorConfig } from './ExtractorConfig';\r\nimport { Collector } from '../collector/Collector';\r\nimport { DtsRollupGenerator, DtsRollupKind } from '../generators/DtsRollupGenerator';\r\nimport { ApiModelGenerator } from '../generators/ApiModelGenerator';\r\nimport { ApiPackage } from '@microsoft/api-extractor-model';\r\nimport { ApiReportGenerator } from '../generators/ApiReportGenerator';\r\nimport { PackageMetadataManager } from '../analyzer/PackageMetadataManager';\r\nimport { ValidationEnhancer } from '../enhancers/ValidationEnhancer';\r\nimport { DocCommentEnhancer } from '../enhancers/DocCommentEnhancer';\r\nimport { CompilerState } from './CompilerState';\r\nimport { ExtractorMessage } from './ExtractorMessage';\r\nimport { MessageRouter } from '../collector/MessageRouter';\r\nimport { ConsoleMessageId } from './ConsoleMessageId';\r\n\r\n/**\r\n * Runtime options for Extractor.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorInvokeOptions {\r\n  /**\r\n   * An optional TypeScript compiler state.  This allows an optimization where multiple invocations of API Extractor\r\n   * can reuse the same TypeScript compiler analysis.\r\n   */\r\n  compilerState?: CompilerState;\r\n\r\n  /**\r\n   * Indicates that API Extractor is running as part of a local build, e.g. on developer's\r\n   * machine.\r\n   *\r\n   * @remarks\r\n   * This disables certain validation that would normally be performed for a ship/production build. For example,\r\n   * the *.api.md report file is automatically updated in a local build.\r\n   *\r\n   * The default value is false.\r\n   */\r\n  localBuild?: boolean;\r\n\r\n  /**\r\n   * If true, API Extractor will include {@link ExtractorLogLevel.Verbose} messages in its output.\r\n   */\r\n  showVerboseMessages?: boolean;\r\n\r\n  /**\r\n   * If true, API Extractor will print diagnostic information used for troubleshooting problems.\r\n   * These messages will be included as {@link ExtractorLogLevel.Verbose} output.\r\n   *\r\n   * @remarks\r\n   * Setting `showDiagnostics=true` forces `showVerboseMessages=true`.\r\n   */\r\n  showDiagnostics?: boolean;\r\n\r\n  /**\r\n   * Specifies an alternate folder path to be used when loading the TypeScript system typings.\r\n   *\r\n   * @remarks\r\n   * API Extractor uses its own TypeScript compiler engine to analyze your project.  If your project\r\n   * is built with a significantly different TypeScript version, sometimes API Extractor may report compilation\r\n   * errors due to differences in the system typings (e.g. lib.dom.d.ts).  You can use the \"--typescriptCompilerFolder\"\r\n   * option to specify the folder path where you installed the TypeScript package, and API Extractor's compiler will\r\n   * use those system typings instead.\r\n   */\r\n  typescriptCompilerFolder?: string;\r\n\r\n  /**\r\n   * An optional callback function that will be called for each `ExtractorMessage` before it is displayed by\r\n   * API Extractor.  The callback can customize the message, handle it, or discard it.\r\n   *\r\n   * @remarks\r\n   * If a `messageCallback` is not provided, then by default API Extractor will print the messages to\r\n   * the STDERR/STDOUT console.\r\n   */\r\n  messageCallback?: (message: ExtractorMessage) => void;\r\n}\r\n\r\n/**\r\n * This object represents the outcome of an invocation of API Extractor.\r\n *\r\n * @public\r\n */\r\nexport class ExtractorResult {\r\n  /**\r\n   * The TypeScript compiler state that was used.\r\n   */\r\n  public readonly compilerState: CompilerState;\r\n\r\n  /**\r\n   * The API Extractor configuration that was used.\r\n   */\r\n  public readonly extractorConfig: ExtractorConfig;\r\n\r\n  /**\r\n   * Whether the invocation of API Extractor was successful.  For example, if `succeeded` is false, then the build task\r\n   * would normally return a nonzero process exit code, indicating that the operation failed.\r\n   *\r\n   * @remarks\r\n   *\r\n   * Normally the operation \"succeeds\" if `errorCount` and `warningCount` are both zero.  However if\r\n   * {@link IExtractorInvokeOptions.localBuild} is `true`, then the operation \"succeeds\" if `errorCount` is zero\r\n   * (i.e. warnings are ignored).\r\n   */\r\n  public readonly succeeded: boolean;\r\n\r\n  /**\r\n   * Returns true if the API report was found to have changed.\r\n   */\r\n  public readonly apiReportChanged: boolean;\r\n\r\n  /**\r\n   * Reports the number of errors encountered during analysis.\r\n   *\r\n   * @remarks\r\n   * This does not count exceptions, where unexpected issues prematurely abort the operation.\r\n   */\r\n  public readonly errorCount: number;\r\n\r\n  /**\r\n   * Reports the number of warnings encountered during analysis.\r\n   *\r\n   * @remarks\r\n   * This does not count warnings that are emitted in the API report file.\r\n   */\r\n  public readonly warningCount: number;\r\n\r\n  /** @internal */\r\n  public constructor(properties: ExtractorResult) {\r\n    this.compilerState = properties.compilerState;\r\n    this.extractorConfig = properties.extractorConfig;\r\n    this.succeeded = properties.succeeded;\r\n    this.apiReportChanged = properties.apiReportChanged;\r\n    this.errorCount = properties.errorCount;\r\n    this.warningCount = properties.warningCount;\r\n  }\r\n}\r\n\r\n/**\r\n * The starting point for invoking the API Extractor tool.\r\n * @public\r\n */\r\nexport class Extractor {\r\n  /**\r\n   * Returns the version number of the API Extractor NPM package.\r\n   */\r\n  public static get version(): string {\r\n    return Extractor._getPackageJson().version;\r\n  }\r\n\r\n  /**\r\n   * Returns the package name of the API Extractor NPM package.\r\n   */\r\n  public static get packageName(): string {\r\n    return Extractor._getPackageJson().name;\r\n  }\r\n\r\n  private static _getPackageJson(): IPackageJson {\r\n    return PackageJsonLookup.loadOwnPackageJson(__dirname);\r\n  }\r\n\r\n  /**\r\n   * Load the api-extractor.json config file from the specified path, and then invoke API Extractor.\r\n   */\r\n  public static loadConfigAndInvoke(configFilePath: string, options?: IExtractorInvokeOptions): ExtractorResult {\r\n    const extractorConfig: ExtractorConfig = ExtractorConfig.loadFileAndPrepare(configFilePath);\r\n\r\n    return Extractor.invoke(extractorConfig, options);\r\n  }\r\n\r\n  /**\r\n   * Invoke API Extractor using an already prepared `ExtractorConfig` object.\r\n   */\r\n  public static invoke(extractorConfig: ExtractorConfig, options?: IExtractorInvokeOptions): ExtractorResult {\r\n\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    const localBuild: boolean = options.localBuild || false;\r\n\r\n    let compilerState: CompilerState | undefined;\r\n    if (options.compilerState) {\r\n      compilerState = options.compilerState;\r\n    } else {\r\n      compilerState = CompilerState.create(extractorConfig, options);\r\n    }\r\n\r\n    const messageRouter: MessageRouter = new MessageRouter({\r\n      workingPackageFolder: extractorConfig.packageFolder,\r\n      messageCallback: options.messageCallback,\r\n      messagesConfig: extractorConfig.messages || { },\r\n      showVerboseMessages: !!options.showVerboseMessages,\r\n      showDiagnostics: !!options.showDiagnostics\r\n    });\r\n\r\n    if (messageRouter.showDiagnostics) {\r\n      messageRouter.logDiagnosticHeader('Final prepared ExtractorConfig');\r\n      messageRouter.logDiagnostic(extractorConfig.getDiagnosticDump());\r\n      messageRouter.logDiagnosticFooter();\r\n\r\n      messageRouter.logDiagnosticHeader('Compiler options');\r\n      const serializedOptions: object = MessageRouter.buildJsonDumpObject(compilerState.program.getCompilerOptions());\r\n      messageRouter.logDiagnostic(JSON.stringify(serializedOptions, undefined, 2));\r\n      messageRouter.logDiagnosticFooter();\r\n    }\r\n\r\n    const collector: Collector = new Collector({\r\n      program: compilerState.program,\r\n      messageRouter,\r\n      extractorConfig: extractorConfig\r\n    });\r\n\r\n    collector.analyze();\r\n\r\n    DocCommentEnhancer.analyze(collector);\r\n    ValidationEnhancer.analyze(collector);\r\n\r\n    const modelBuilder: ApiModelGenerator = new ApiModelGenerator(collector);\r\n    const apiPackage: ApiPackage = modelBuilder.buildApiPackage();\r\n\r\n    if (extractorConfig.docModelEnabled) {\r\n      messageRouter.logVerbose(ConsoleMessageId.WritingDocModelFile, 'Writing: ' + extractorConfig.apiJsonFilePath);\r\n      apiPackage.saveToJsonFile(extractorConfig.apiJsonFilePath, {\r\n        toolPackage: Extractor.packageName,\r\n        toolVersion: Extractor.version,\r\n\r\n        newlineConversion: NewlineKind.CrLf,\r\n        ensureFolderExists: true,\r\n        testMode: extractorConfig.testMode\r\n      });\r\n    }\r\n\r\n    let apiReportChanged: boolean = false;\r\n\r\n    if (extractorConfig.apiReportEnabled) {\r\n      const actualApiReportPath: string = extractorConfig.reportTempFilePath;\r\n      const actualApiReportShortPath: string = extractorConfig._getShortFilePath(extractorConfig.reportTempFilePath);\r\n\r\n      const expectedApiReportPath: string = extractorConfig.reportFilePath;\r\n      const expectedApiReportShortPath: string = extractorConfig._getShortFilePath(extractorConfig.reportFilePath);\r\n\r\n      const actualApiReportContent: string = ApiReportGenerator.generateReviewFileContent(collector);\r\n\r\n      // Write the actual file\r\n      FileSystem.writeFile(actualApiReportPath, actualApiReportContent, {\r\n        ensureFolderExists: true,\r\n        convertLineEndings: NewlineKind.CrLf\r\n      });\r\n\r\n      // Compare it against the expected file\r\n      if (FileSystem.exists(expectedApiReportPath)) {\r\n        const expectedApiReportContent: string = FileSystem.readFile(expectedApiReportPath);\r\n\r\n        if (!ApiReportGenerator.areEquivalentApiFileContents(actualApiReportContent, expectedApiReportContent)) {\r\n          apiReportChanged = true;\r\n\r\n          if (!localBuild) {\r\n            // For a production build, issue a warning that will break the CI build.\r\n            messageRouter.logWarning(ConsoleMessageId.ApiReportNotCopied,\r\n              'You have changed the public API signature for this project.'\r\n              + ` Please copy the file \"${actualApiReportShortPath}\" to \"${expectedApiReportShortPath}\",`\r\n              + ` or perform a local build (which does this automatically).`\r\n              + ` See the Git repo documentation for more info.`);\r\n          } else {\r\n            // For a local build, just copy the file automatically.\r\n            messageRouter.logWarning(ConsoleMessageId.ApiReportCopied,\r\n              'You have changed the public API signature for this project.'\r\n              + ` Updating ${expectedApiReportShortPath}`);\r\n\r\n            FileSystem.writeFile(expectedApiReportPath, actualApiReportContent, {\r\n              ensureFolderExists: true,\r\n              convertLineEndings: NewlineKind.CrLf\r\n            });\r\n          }\r\n       } else {\r\n          messageRouter.logVerbose(ConsoleMessageId.ApiReportUnchanged,\r\n            `The API report is up to date: ${actualApiReportShortPath}`);\r\n        }\r\n      } else {\r\n        // The target file does not exist, so we are setting up the API review file for the first time.\r\n        //\r\n        // NOTE: People sometimes make a mistake where they move a project and forget to update the \"reportFolder\"\r\n        // setting, which causes a new file to silently get written to the wrong place.  This can be confusing.\r\n        // Thus we treat the initial creation of the file specially.\r\n        apiReportChanged = true;\r\n\r\n        if (!localBuild) {\r\n          // For a production build, issue a warning that will break the CI build.\r\n          messageRouter.logWarning(ConsoleMessageId.ApiReportNotCopied,\r\n            'The API report file is missing.'\r\n            + ` Please copy the file \"${actualApiReportShortPath}\" to \"${expectedApiReportShortPath}\",`\r\n            + ` or perform a local build (which does this automatically).`\r\n            + ` See the Git repo documentation for more info.`);\r\n        } else {\r\n          const expectedApiReportFolder: string = path.dirname(expectedApiReportPath);\r\n          if (!FileSystem.exists(expectedApiReportFolder)) {\r\n            messageRouter.logError(ConsoleMessageId.ApiReportFolderMissing,\r\n              'Unable to create the API report file. Please make sure the target folder exists:\\n'\r\n              + expectedApiReportFolder\r\n            );\r\n          } else {\r\n            FileSystem.writeFile(expectedApiReportPath, actualApiReportContent, {\r\n              convertLineEndings: NewlineKind.CrLf\r\n            });\r\n            messageRouter.logWarning(ConsoleMessageId.ApiReportCreated,\r\n              'The API report file was missing, so a new file was created. Please add this file to Git:\\n'\r\n              + expectedApiReportPath\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (extractorConfig.rollupEnabled) {\r\n      Extractor._generateRollupDtsFile(collector, extractorConfig.publicTrimmedFilePath, DtsRollupKind.PublicRelease);\r\n      Extractor._generateRollupDtsFile(collector, extractorConfig.betaTrimmedFilePath, DtsRollupKind.BetaRelease);\r\n      Extractor._generateRollupDtsFile(collector, extractorConfig.untrimmedFilePath, DtsRollupKind.InternalRelease);\r\n    }\r\n\r\n    if (extractorConfig.tsdocMetadataEnabled) {\r\n      // Write the tsdoc-metadata.json file for this project\r\n      PackageMetadataManager.writeTsdocMetadataFile(extractorConfig.tsdocMetadataFilePath);\r\n    }\r\n\r\n    // Show all the messages that we collected during analysis\r\n    messageRouter.handleRemainingNonConsoleMessages();\r\n\r\n    // Determine success\r\n    let succeeded: boolean;\r\n    if (localBuild) {\r\n      // For a local build, fail if there were errors (but ignore warnings)\r\n      succeeded = messageRouter.errorCount === 0;\r\n    } else {\r\n      // For a production build, fail if there were any errors or warnings\r\n      succeeded = messageRouter.errorCount + messageRouter.warningCount === 0;\r\n    }\r\n\r\n    return new ExtractorResult({\r\n      compilerState,\r\n      extractorConfig,\r\n      succeeded,\r\n      apiReportChanged,\r\n      errorCount: messageRouter.errorCount,\r\n      warningCount: messageRouter.warningCount\r\n    });\r\n  }\r\n\r\n  private static _generateRollupDtsFile(collector: Collector, outputPath: string, dtsKind: DtsRollupKind): void {\r\n    if (outputPath !== '') {\r\n      collector.messageRouter.logVerbose(ConsoleMessageId.WritingDtsRollup, `Writing package typings: ${outputPath}`);\r\n      DtsRollupGenerator.writeTypingsFile(collector, outputPath, dtsKind);\r\n    }\r\n  }\r\n}\r\n"]}