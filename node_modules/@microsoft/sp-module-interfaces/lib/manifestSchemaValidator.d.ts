export import ZSchema = require('z-schema');
import { IClientSideApplicationManifest } from './manifestSchemas/IClientSideApplicationManifest';
import { IClientSideAssemblyManifest } from './manifestSchemas/IClientSideAssemblyManifest';
import { IClientSideComponentManifest } from './manifestSchemas/IClientSideComponentManifest';
import { IClientSideExtensionManifest } from './manifestSchemas/IClientSideExtensionManifest';
import { IClientSideLibraryManifest } from './manifestSchemas/IClientSideLibraryManifest';
import { IClientSideMultiVersionManifest } from './manifestSchemas/IClientSideMultiVersionManifest';
import { IClientSideWebPartManifest } from './manifestSchemas/IClientSideWebPartManifest';
import { ICommandSetExtensionManifest } from './manifestSchemas/ICommandSetExtensionManifest';
export declare const zSchemaOptions: ZSchema.Options;
export interface IManifestValidatorResult {
    result: boolean;
    errors: ZSchema.SchemaErrorDetail[];
}
export default class ManifestValidator {
    static validateApplicationManifest(manifest: string | IClientSideApplicationManifest): IManifestValidatorResult;
    static validateCommandSetManifest(manifest: string | ICommandSetExtensionManifest): IManifestValidatorResult;
    static validateExtensionManifest(manifest: string | IClientSideExtensionManifest): IManifestValidatorResult;
    static validateWebPartManifest(manifest: string | IClientSideWebPartManifest<any>): IManifestValidatorResult;
    static validateLibraryManifest(manifest: string | IClientSideLibraryManifest): IManifestValidatorResult;
    static validateAssemblyManifest(manifest: string | IClientSideAssemblyManifest): IManifestValidatorResult;
    static validateMultiVersionManifest(manifest: string | IClientSideMultiVersionManifest<any>): IManifestValidatorResult;
    static validateManifest(manifest: string | IClientSideComponentManifest): IManifestValidatorResult;
    static extractInnerErrorMessages(errors: ZSchema.SchemaErrorDetail[]): string[];
    static getFormattedErrorMessage(errors: ZSchema.SchemaErrorDetail[]): string;
    private static _validateManifest;
}
//# sourceMappingURL=manifestSchemaValidator.d.ts.map