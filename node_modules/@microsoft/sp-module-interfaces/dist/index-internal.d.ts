
/**
 * Type of client-side component.
 * @public
 */
export declare type ComponentType = 'Application' | 'WebPart' | 'Library' | 'Extension';

/**
 * The type of client-side extension.  Used by IClientSideExtensionManifest.extensionType.
 *
 * @public
 */
export declare type ExtensionType = 'Unknown' | 'ApplicationCustomizer' | 'FieldCustomizer' | 'ListViewCommandSet' | 'SearchQueryModifier';

/* Excluded from this release type: ICapabilityCollection */

/* Excluded from this release type: IClientSideApplicationManifest */

/**
 * A library is defined by this manifest. Libraries currently do not have any additional properties.
 *
 * @public
 */
export declare interface IClientSideAssemblyManifest extends IClientSideComponentManifest {
    /**
     * The ID of the component from which the assembly is built.
     *
     * @remarks
     *
     * Supported values: any GUID
     *
     * Example: "dbef608d-3ad5-4f8f-b139-d916f2f0a294"
     */
    rootComponentId: string;
}

/* Excluded from this release type: IClientSideComponentLoaderConfiguration */

/**
 * All client-side components built on the SharePoint framework need a valid component manifest. This interface
 * represents properties that are required by all types of client-side components like Applications and Web Parts.
 * Component specific manifests will extend this interface to add properties required by that component type.
 *
 * @remarks
 *
 * The schema of this manifest is owned and versioned by Microsoft. Following rules should be followed while changing
 * this schema. This set of rules can also be called the "manifest upgrade rules".
 *
 * - For minor changes, new properties can be added to this schema in a backwards-compatible way. i.e. the code
 *   that processes the manifest should be able to handle the absence of those new properties.
 *
 * - Try to model your changes as minor SemVer increments.  Major version changes should be avoided because they
 *   impose a migration cost on developers.
 *
 * - The `'manifestVersion'` should be bumped for all small or big changes.
 *
 * @privateRemarks
 *
 * This schema should be at all times kept in sync with the server-side code file
 * SPClientSideComponentManifest.cs.
 *
 * @public
 */
export declare interface IClientSideComponentManifest extends IClientSideManifestBase {
    /**
     * Type of client-side component. Components with the "Application" type are defined by the
     * "IClientSideApplicationManifest" interface. Components with the "WebPart" type are defined by the
     * "IClientSideWebPartManifest" interface. Components with the "Library" type are defined by the
     * "IClientSideLibraryManifest" interface.
     *
     * @remarks
     *
     * Usage: To help bundling, loading, enumeration, and initialization of components based on their contents.
     *
     * Supported values: `"Application"`, `"WebPart"`, `"Library"`, `"Extension"`
     */
    componentType: ComponentType;
    /**
     * A short name usually given by developer. It does not need to be localized and is expected to stay
     * the same through the lifetime of the component. If an application overrides the `ClientSideApplication.alias`
     * property, `ClientSideApplication.alias` is given precedence over the value provided in the manifest.
     *
     * @remarks
     *
     * Usage: A short name to identify a client-side component by developer.
     *
     * Supported values: Allowed characters are a-z, A-Z, and '-'. Not longer than 40 characters.
     *
     * Example: `"NewFeed"`
     *
     * @privateRemarks
     * telemetry data is categorized based on alias. If alias changes, new telemetry date for this
     * component will be put in a new category. It breaks history data if alias changes.
     */
    alias: string;
    /* Excluded from this release type: isInternal */
    /* Excluded from this release type: _isDebug */
    /**
     * Client-side component version. The value of this field is expected to be controlled by the developer
     * of the client-side component.
     *
     * @remarks
     *
     * The purpose of this field is to help client-side component developers upgrade their client-side components
     * in a managed way. This helps the consumers of the client-side component make decisions about when and how
     * to upgrade the client-side component. As the developer evolves the code for their client-side
     * component, they can decide to bump the MAJOR, MINOR or PATCH version of the component.
     *
     * All incompatible API changes should result in a MAJOR version bump. Backwards compatible functionality
     * changes should result in a MINOR version bump, and backwards compatible bug fixes should result in a
     * PATCH version bump. Please see {@link http://semver.org} for more details on how to manage the version
     * of your components.
     *
     * Usage: Versioning and evolving a client-side component safely in a controlled way.
     *
     * Supported values: string representing a {@link http://semver.org | semantic version} i.e. MAJOR.MINOR.PATCH
     *
     * Example: `"1.0.0"`
     */
    version: string;
    /* Excluded from this release type: preloadComponents */
    /**
     * This property is used to keep older components that don't explicitly use fabric CSS.
     * For the most part, webparts build after using spfx 1.1 don't need this.
     */
    loadLegacyFabricCss?: boolean;
    /**
     * This property is provided for backwards compatibility.  It no longer has any effect.
     *
     * @deprecated Use requiresCustomScript instead of safeWithCustomScriptDisabled.
     */
    safeWithCustomScriptDisabled?: boolean;
    /**
     * If true, the component can only be installed on sites where Custom Script is enabled.
     * This should be set to true if the component allows authors to execute arbitrary scripts on the page.
     *
     * @remarks
     * Defaults to false.  See
     * https://support.office.com/en-us/article/Turn-scripting-capabilities-on-or-off-1f2c515f-5d7e-448a-9fd7-835da935584f
     * for more information.
     *
     * Usage: Requires Custom Script to be allowed in order for this component to be installed and run.
     */
    requiresCustomScript?: boolean;
    /* Excluded from this release type: loaderConfig */
    /* Excluded from this release type: isolatedDomain */
    /* Excluded from this release type: properties */
}

/**
 * This is the manifest for a client-side extension.
 *
 * @public
 */
export declare interface IClientSideExtensionManifest extends IClientSideComponentManifest {
    /**
     * Specifies the type of client-side extension.  Some extension types support additional manifest
     * fields beyond SPClientSideExtensionManifest.
     */
    extensionType: ExtensionType;
}

/**
 * A library is defined by this manifest. Libraries currently do not have any additional properties.
 *
 * @public
 */
export declare interface IClientSideLibraryManifest extends IClientSideComponentManifest {
}

/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
/**
 * This interface defines members that are common between all deployable manifests.
 *
 * @public
 */
export declare interface IClientSideManifestBase {
    /**
     * Version of the component manifest schema. The value of this field is controlled by Microsoft. The
     * purpose of this field is to help manage upgrades of the component manifest schema.
     *
     * @remarks
     *
     * A component developer needs to only confirm that they are using the correct value per the
     * manifest schema. Please read the "manifest upgrade rules" for more details on when the schema
     * could change. Note, manifest schema version upgrade will be considered a big API change event
     * and will be advertised broadly.
     *
     * Usage: To help support multiple manifest schema versions.
     *
     * Supported values: A positive integer.
     *
     * Example: `1`
     */
    manifestVersion: number;
    /**
     * A universally unique component id. Each client-side component is required to have this id.
     * Once an id has been used for a component, it cannot be changed. A change in this value is
     * treated same as the creation of a new component. Two components are never expected to have
     * the same id.
     *
     * Usage: Uniquely identify a client-side component.
     *
     * Supported values: a GUID string
     *
     * Example: `"dbef608d-3ad5-4f8f-b139-d916f2f0a294"`
     */
    id: string;
}

/* Excluded from this release type: IClientSideMultiVersionManifest */

/**
 * The client-side SharePoint framework identifies a Web Part by its manifest. All Web Parts are expected to have a
 * manifest.
 *
 * @remarks
 *
 * The manifest is a schematized JSON blob that is used in multiple parts of the SharePoint infrastructure
 * to identify, load and process a Web Part. The schema for this manifest is completely owned and versioned by
 * Microsoft. There are some required properties in the manifest and some optional properties. Optional properties
 * need to be provided only if the Web Part needs the specific functionality. An invalid manifest could lead to issues
 * with Web Part loading and functionality problems.
 *
 * @public
 */
export declare interface IClientSideWebPartManifest<TProperties> extends IClientSideComponentManifest {
    /**
     * Indicates whether the web part uses the property pane to update the configuration
     * of the web part.
     *
     * @remarks
     * Default value is `true` if the property is not explicitly defined.
     */
    canUpdateConfiguration?: boolean;
    /**
     * If true, this web part is disabled on SharePoint classic pages
     *
     * @remarks
     *
     * Certain web parts may not be required on or apply to SharePoint classic pages. This flag helps control
     * that. If this flag is true, the web part will not appear in the classic page web part gallery.
     */
    disabledOnClassicSharepoint?: boolean;
    /* Excluded from this release type: experimentalData */
    /**
     * If true, this web part should not be displayed in the modern SharePoint toolbox.
     *
     * @remarks
     * Usage: Use this flag if it is not appropriate to display a web part in the modern toolbox. This property
     * is not used in  Classic SharePoint. By default, all web parts are enabled to be displayed in the toolbox.
     * Such web parts can be provisioned on pages though API or be added to the page in a pre configured way.
     */
    hiddenFromToolbox?: boolean;
    /**
     * Definition: If true, this web part supports and has been tested for full bleed experience.
     *
     * @remarks
     * Usage: Use this flag if a web part supports full bleed experience and has been tested as such. In this context,
     * full bleed is a term used to denote that the web part takes the whole width of the containing page. Full bleed
     * experiences require special treatment and testing. By default no web parts support full bleed experiences.
     */
    supportsFullBleed?: boolean;
    /* Excluded from this release type: requiredCapabilities */
    /* Excluded from this release type: isolationLevel */
    /**
     * Definition: If true, this web part supports and has been tested for theme variants experience.
     *
     * @remarks
     * Usage: Use this flag if a web part supports theme variants and has been tested as such.
     * In order to support theme variants, web parts must have the capability to render correctly in the context
     * of a theme variant. A web part may or may not need to be updated to support theme variants, but should
     * always be tested before enabling this flag. By default no web parts support theme variants.
     *
     */
    supportsThemeVariants?: boolean;
    /* Excluded from this release type: useFallbackWhenPropertiesUpdatedExternally */
    /**
     * A Web Part can have pre-configured properties like the title, description, toolbox group name and Web
     * Part specific custom properties. And there can be multiple instances of these pre-configured properties.
     *
     * @remarks
     * This helps support scenarios where an organization may want to present multiple pre-configured entries
     * for a Web Part in the Toolbox. Each entry is expected to configure the Web Part with a different set
     * of pre-configured properties. A developer may decide to seed some initial values for these properties
     * but an organization admin can go ahead and customize these properties per the needs of his/her organization.
     * The properties can also be modified by the author of the page.
     *
     * Usage: help display a Web Part in the Toolbox, PropertyPane and the initial rendering of the Web Part.
     *
     * Type: JSON object
     *
     * Supported values: Array of `IClientSideWebPartManifestEntry` objects.
     *
     * Example:
     * ```
     *   [{
     *      title:"Image Web Part",
     *      description: "This Web Part displays an image",
     *      group: "Media",
     *      iconFontName: "image",
     *      properties: {
     *        imageSource: "https://contoso.akamaihd.net/files/mountRainier.jpg",
     *        captionText: "Mount Rainier"
     *      }
     *    }]
     * ```
     */
    preconfiguredEntries: IClientSideWebPartManifestEntry<TProperties>[];
    /**
     * Definition: An array defining what host types are supported
     *
     * @remarks
     * Usage: Use this array to define all hosts that are supported. The default
     * value is SharePointWebPart if nothing is provided.  If SharePointFullPage is
     * added the solution will be available when adding full page apps.  If
     * SharePointWebPart is added the solution will be available when adding webparts
     * to a page.  If TeamsTab or TeamsPersonalApp is added the solution will be
     * available when using teams.
     *
     */
    supportedHosts?: Array<'SharePointFullPage' | 'SharePointWebPart' | 'TeamsTab' | 'TeamsPersonalApp'>;
    /**
     * Definition: Url of the image image used for preview
     *
     * @remarks
     * Usage: Use this string to specify that a preview image should be used instead
     * of a preview rendering of the web part.  This can either be a absolute url
     * or a relative URL which will be resolved based on the internal base module
     * url
     */
    imagePreviewUrl?: string;
}

/**
 * This interface specifies the set of properties that can be pre-configured by a Web Part developer. Each
 * pre-configured instance of the Web Part will need a copy of these properties. Organization admins and
 * content authors can modify these properties on a need basis.
 *
 * @public
 */
export declare interface IClientSideWebPartManifestEntry<TProperties> {
    /**
     * Title of the web part represented as a single a dictionary of locale keys to title values. This
     * value will be displayed to the user in the toolbox.
     *
     * @remarks
     * This title should be used in the Toolbox and other display areas. The Web Part developer may give
     * an initial title to the web part. The organization admin and page author will have the ability to
     * change this title as per need.
     *
     * Usage: display the name of the web part in the toolbox, web part gallery and the page.
     *
     * Supported values: a dictionary of locale keys to strings. Should always have a `'default'` key.
     *
     * Example: `"My Webpart"`
     * ```
     *          {
     *            "default": "My WebPart"
     *            "en-us": "My WebPart",
     *            "fr-fr": "Ma WebPart",
     *            "zh": "我的 web 部件"
     *          }
     * ```
     */
    title: ILocalizedString;
    /**
     * Description of the web part represented as a dictionary of locale keys to description values. This
     * value will be displayed to the user in the toolbox. This description should be used in the Toolbox tooltip and
     * other display areas.
     *
     * @remarks
     * The Web Part developer may give an initial description to the web part. The organization
     * admin and page author will have the ability to change this description as per need.
     *
     * Usage: display the description of the web part in the toolbox tooltip, web part gallery and the page.
     *
     * Supported values: a dictionary of locale keys to strings. Should always have a `'default'` key.
     *
     * Example: `"A tool for displaying neat information."`
     *
     * ```
     *          {
     *            "default": "A tool for displaying neat information.",
     *            "en-us": "A tool for displaying neat information.",
     *            "fr-fr": "Un outil d’affichage des informations soignées.",
     *            "zh": "用於顯示整潔資訊的工具。"
     *          }
     * ```
     */
    description: ILocalizedString;
    /**
     * The icon for the Web Part, to be displayed in the toolbox, represented as a character name in the
     * Office 365 icon font file.
     *
     * @remarks
     * The icon font is specified here: {@link https://aka.ms/uifabric-icons}  If this field has
     * a value, the {@link IClientSideWebPartManifestEntry.iconImageUrl} field will be ignored.
     *
     * Supported values: Any character name in the Office 365 Icon Font.
     *
     * Example: "graph"
     */
    officeFabricIconFontName?: string;
    /**
     * The icon for the web part, to be displayed in the toolbox, represented an image URL. The image at the
     * URL must be exactly 40x28 px (SPPPLAT VSO#218660 to fix the size of the icon image).
     *
     * @remarks
     *  If the {@link IClientSideWebPartManifestEntry.officeFabricIconFontName} field does not have a value,
     *  this field must have a value. This value can be an absolute URL (e.g. `"http://example.com/icons/my-icon.png"`) or
     *  a relative file path (e.g. `"./icons/my-icon.png"`). In the latter case, the path will be resolved relative to
     *  the folder containing the input manifest. The icon file will be copied to the deployment folder like an asset,
     *  and the output manifest’s iconImageUrl will be replaced with a URL relative to the URL used to load all other
     *  assets (the loaderConfig.internalModuleBaseUrls property).
     *
     * Supported values: Any absolute URL.
     *
     * Example: `"https://contoso.akamaihd.net/files/myWebpartIcon.png"`
     */
    iconImageUrl?: string;
    /* Excluded from this release type: groupId */
    /* Excluded from this release type: group */
    /* Excluded from this release type: tags */
    /**
     * Definition: Use this field to specify the data version of the pre-configured data provided to the web part.
     * Note that data version is different from the version field in the manifest.
     *
     * @remarks
     * The manifest version is used to control the versioning of the web part code, while data version is used
     * to control the versioning of the serialized data of the web part. Refer to dataVersion field of your
     * web part for more information.
     *
     * Usage: versioning and evolving the serialized data of the web part
     *
     * Type: string representing a {@link http://semver.org | semantic version} with only two parts
     *
     * Supported values: MAJOR.MINOR
     *
     * Example: `"1.0"`
     */
    dataVersion?: string;
    /**
     * Every web part is expected to have some custom properties.  For example, an image web part might define
     * properties for the image URL and caption text. A list web part may have the list ID and list title as its
     * properties, and so on.
     *
     * @remarks
     *
     * The SharePoint Framework passes these properties to the web parts when they are loaded. The web part developer
     * fully controls the schema for these properties. The web part developer should follow versioning rules when
     * updating the properties.
     *
     * Usage: rendering of the web part
     *
     * Example: `{"imageSource": "https://contoso.akamaihd.net/files/contosoLogo.jpg", "captionText": "Contoso logo"}"`
     */
    properties: TProperties;
    /**
    * The icon for the Application pages.
    *
    * @remarks
    *  If this field is not defined, then the iconimageurl is used instead as the icon for Full Page apps.
    *  This value can be an absolute URL (e.g. `"http://example.com/icons/my-icon.png"`) or a relative file path
    *  (e.g. `"./icons/my-icon.png"`). In the latter case, the path will be resolved relative to the folder containing
    *  the input manifest.
    *
    * Supported values: Any absolute URL.
    *
    * Example: `"https://contoso.akamaihd.net/files/myWebpartIcon.png"`
    */
    fullPageAppIconImageUrl?: string;
}

/**
 * Manifest that is relevant to a Web Part instance.
 *
 * @public
 */
export declare interface IClientSideWebPartManifestInstance<TProperties> extends IClientSideComponentManifest {
}

/**
 * Used by ICommandSetExtensionManifest, this defines a command to be displayed by
 * a UI surface such as a menu, tool bar, etc.
 *
 * @public
 */
export declare interface ICommandDefinition {
    /**
     * A short label to be displayed by the associated button, menu item, etc.
     * Example: "Show information"
     */
    title: ILocalizedString;
    /**
     * Type of the item.
     * Currently only "command" is allowed.
     */
    type: 'command';
    /**
     * Custom accessibility text for the browser's "aria-label" attribute.  If omitted, the title property
     * will be used by default.
     * Example: "Show information.  Press ENTER to select."
     */
    ariaLabel?: ILocalizedString;
    /**
     * An optional URL for an image to be displayed next to the command. The requirements for this image
     * are defined by the type of extension; some extension types may not display the image at all.
     *
     * @remarks
     * This value can be an absolute URL (e.g. "http://example.com/icons/my-icon.png") or
     * a relative file path (e.g. "./icons/my-icon.png"). In the latter case, the path will be resolved relative to
     * the folder containing the input manifest. The icon file will be copied to the deployment folder like an asset,
     * and the output manifest’s iconImageUrl will be replaced with a URL relative to the URL used to load all other
     * assets (the loaderConfig.internalModuleBaseUrls property).
     */
    iconImageUrl?: string;
}

/**
 * This is the manifest for a client-side extension that defines a set of custom commands
 * that can be shown in a menu, tool bar, etc.
 *
 * @privateRemarks
 *
 * Why is this called "ICommandSetExtensionManifest" and not "IListViewCommandSetExtensionManifest"?
 * Eventually other command set classes will be introduced, for example something like:
 * BaseListViewCommandSet, BasePublishingCommandSet, BaseSharePointHomeCommandSet, etc.
 * Although their contexts will be different, most likely they will all share the same
 * manifest type.  Thus the manifest schema will remain the same, but the extensionType
 * will expand to something like this:
 *
 * extensionType: 'ListViewCommandSet' | 'PublishingCommandSet' | 'SharePointHomeCommandSet';
 *
 * @public
 */
export declare interface ICommandSetExtensionManifest extends IClientSideExtensionManifest {
    /**
     * {@inheritDoc IClientSideExtensionManifest.extensionType}
     */
    extensionType: 'ListViewCommandSet';
    /**
     * A table of items defined by this command set. The object key is the Item ID.
     *
     * @remarks
     *
     * The Item ID is a unique identifier that event handlers use to recognize the command
     * The identifier must consist of upper-case letters, numbers, and underscores.
     * Example: "SHOW_INFO"
     */
    items: {
        [itemId: string]: ICommandDefinition;
    };
}

/* Excluded from this release type: IComponentModuleConfiguration */

/* Excluded from this release type: ILocalizedPathModuleConfiguration */

/**
 * A set of localized strings.
 *
 * @remarks

 * Supported values:
 *
 * - An Id referring to a localized resource. In this case it requires an 'id' key.
 *
 * - A dictionary of locale keys to strings. In this case it requires a 'default' key.
 *
 * ```
 * Example 1: "My Application"
 *          {
 *            "id": "$myStrings:myStrings.MyApplication;"
 *          }
 * Example 2: "My Application"
 *          {
 *            "default": "My Application"
 *            "en-us": "My Application",
 *            "fr-fr": "Ma demande",
 *            "zh": "我的應用程式"
 *          }
 * ```
 *
 * Notes on string ids:
 *
 * - Ids have the following structure: `$<resourceName>:<expression>;`
 *
 * - `resourceName` needs to be a `localizedResource` in the config.json.
 *
 * - `expression` is an expression that will be evaluated to access the string from the resource module.
 *
 * If your resource is a dictionary, access it through `"$resource:resource.MyString;"`
 * or `"$resource:resource[\"MyString\"];"`
 *
 * For more complex cases, run an appropriate expression to access your resource and return the string.
 *
 * @public
 */
export declare interface ILocalizedString {
    default?: string;
    id?: string;
    [locale: string]: string | undefined;
}

/* Excluded from this release type: IModuleConfiguration */

/* Excluded from this release type: IPath */

/* Excluded from this release type: IPathModuleConfiguration */

/* Excluded from this release type: IPreloadOptions */

/* Excluded from this release type: ManifestType */

/* Excluded from this release type: PredefinedGroup */

export { }
