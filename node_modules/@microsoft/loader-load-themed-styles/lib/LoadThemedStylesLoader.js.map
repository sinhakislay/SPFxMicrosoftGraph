{"version":3,"file":"LoadThemedStylesLoader.js","sourceRoot":"","sources":["../src/LoadThemedStylesLoader.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAS3D,4CAA6C;AAE7C,MAAM,sBAAsB,GAAW,OAAO,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAqBxF;;;;;GAKG;AACH,MAAa,sBAAsB;IA6CjC;QACE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IA5CM,MAAM,KAAK,sBAAsB,CAAC,KAAa;QACpD,sBAAsB,CAAC,uBAAuB,GAAG,KAAK,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,MAAM,KAAK,sBAAsB;QACtC,OAAO,sBAAsB,CAAC,uBAAuB,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,2BAA2B;QACvC,sBAAsB,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;IAC1E,CAAC;IAEM,MAAM,CAAC,KAAK,CAA6B,gBAAwB;QACtE,MAAM,EACJ,WAAW,EACX,KAAK,GAAG,KAAK,EACd,GAAmC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAEvE,IAAI,UAAU,GAAW,gBAAgB,CAAC;QAC1C,IAAI,WAAW,EAAE;YACf,UAAU,IAAI,IAAI,WAAW,EAAE,CAAC;SACjC;QAED,OAAO;YACL,yBAAyB,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,GAAG,gBAAgB,CAAC,IAAI;YACxF,wBAAwB,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,IAAI;YAC1F,EAAE;YACF,mEAAmE;YACnE,EAAE;YACF,8BAA8B;YAC9B,6EAA6E,KAAK,KAAK,IAAI,IAAI;YAC/F,EAAE;YACF,sBAAsB,UAAU,oBAAoB;SACrD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;;AA1Cc,8CAAuB,GAAW,sBAAsB,CAAC;AAD1E,wDAgDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * This simple loader wraps the loading of CSS in script equivalent to\r\n *  require(\"load-themed-styles\").loadStyles('... css text ...').\r\n * @packageDocumentation\r\n */\r\n\r\nimport { loader } from 'webpack';\r\nimport loaderUtils = require('loader-utils');\r\n\r\nconst loadedThemedStylesPath: string = require.resolve('@microsoft/load-themed-styles');\r\n\r\n/**\r\n * Options for the loader.\r\n *\r\n * @public\r\n */\r\nexport interface ILoadThemedStylesLoaderOptions {\r\n  /**\r\n   * If this parameter is specified, override the name of the value exported from this loader. This is useful in\r\n   *  exporting as the default in es6 module import scenarios. See the README for more information.\r\n   */\r\n  namedExport?: string;\r\n\r\n  /**\r\n   * If this parameter is set to \"true,\" the \"loadAsync\" parameter is set to true in the call to loadStyles.\r\n   * Defaults to false.\r\n   */\r\n  async?: boolean;\r\n}\r\n\r\n/**\r\n * This simple loader wraps the loading of CSS in script equivalent to\r\n *  require(\"load-themed-styles\").loadStyles('... css text ...').\r\n *\r\n * @public\r\n */\r\nexport class LoadThemedStylesLoader {\r\n  private static _loadedThemedStylesPath: string = loadedThemedStylesPath;\r\n\r\n  public static set loadedThemedStylesPath(value: string) {\r\n    LoadThemedStylesLoader._loadedThemedStylesPath = value;\r\n  }\r\n\r\n  /**\r\n   * Use this property to override the path to the `@microsoft/load-themed-styles` package.\r\n   */\r\n  public static get loadedThemedStylesPath(): string {\r\n    return LoadThemedStylesLoader._loadedThemedStylesPath;\r\n  }\r\n\r\n  /**\r\n   * Reset the path to the `@microsoft/load-themed-styles package` to the default.\r\n   */\r\n  public static resetLoadedThemedStylesPath(): void {\r\n    LoadThemedStylesLoader._loadedThemedStylesPath = loadedThemedStylesPath;\r\n  }\r\n\r\n  public static pitch(this: loader.LoaderContext, remainingRequest: string): string {\r\n    const {\r\n      namedExport,\r\n      async = false\r\n    }: ILoadThemedStylesLoaderOptions = loaderUtils.getOptions(this) || {};\r\n\r\n    let exportName: string = 'module.exports';\r\n    if (namedExport) {\r\n      exportName += `.${namedExport}`;\r\n    }\r\n\r\n    return [\r\n      `var content = require(${loaderUtils.stringifyRequest(this, '!!' + remainingRequest)});`,\r\n      `var loader = require(${JSON.stringify(LoadThemedStylesLoader._loadedThemedStylesPath)});`,\r\n      '',\r\n      'if(typeof content === \"string\") content = [[module.id, content]];',\r\n      '',\r\n      '// add the styles to the DOM',\r\n      `for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], ${async === true});`,\r\n      '',\r\n      `if(content.locals) ${exportName} = content.locals;`\r\n    ].join('\\n');\r\n  }\r\n\r\n  constructor() {\r\n    throw new Error('Constructing \"LoadThemedStylesLoader\" is not supported.');\r\n  }\r\n}\r\n"]}