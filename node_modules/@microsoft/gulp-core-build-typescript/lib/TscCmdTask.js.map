{"version":3,"file":"TscCmdTask.js","sourceRoot":"","sources":["../src/TscCmdTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport {\r\n  JsonFile,\r\n  FileSystem,\r\n  LegacyAdapters\r\n} from '@microsoft/node-core-library';\r\nimport * as glob from 'glob';\r\nimport * as globEscape from 'glob-escape';\r\nimport * as decomment from 'decomment';\r\nimport { TypescriptCompiler as TTypescriptCompiler, ToolPackages } from '@microsoft/rush-stack-compiler-3.1';\r\n\r\ntype TTypescript = typeof ToolPackages.typescript;\r\n\r\nimport {\r\n  RSCTask,\r\n  IRSCTaskConfig\r\n} from './RSCTask';\r\nimport { TsParseConfigHost } from './TsParseConfigHost';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITscCmdTaskConfig extends IRSCTaskConfig {\r\n  /**\r\n   * Option to pass custom arguments to the tsc command.\r\n   */\r\n  customArgs?: string[];\r\n\r\n  /**\r\n   * Glob matches for files to be passed through the build.\r\n   */\r\n  staticMatch?: string[];\r\n\r\n  /**\r\n   * Removes comments from all generated `.js` files in the TSConfig outDir. Will **not** remove comments from\r\n   * generated `.d.ts` files. Defaults to false.\r\n   */\r\n  removeCommentsFromJavaScript?: boolean;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport class TscCmdTask extends RSCTask<ITscCmdTaskConfig> {\r\n  constructor() {\r\n    super(\r\n      'tsc',\r\n      {\r\n        staticMatch: [\r\n          'src/**/*.js',\r\n          'src/**/*.json',\r\n          'src/**/*.jsx'\r\n        ],\r\n        removeCommentsFromJavaScript: false\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return JsonFile.load(path.resolve(__dirname, 'schemas', 'tsc-cmd.schema.json'));\r\n  }\r\n\r\n  public executeTask(): Promise<void> {\r\n    this.initializeRushStackCompiler();\r\n\r\n    // Static passthrough files.\r\n    const srcPath: string = path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder);\r\n    const libFolders: string[] = [this.buildConfig.libFolder];\r\n    if (this.buildConfig.libAMDFolder) {\r\n      libFolders.push(this.buildConfig.libAMDFolder);\r\n    }\r\n\r\n    if (this.buildConfig.libES6Folder) {\r\n      libFolders.push(this.buildConfig.libES6Folder);\r\n    }\r\n\r\n    if (this.buildConfig.libESNextFolder) {\r\n      libFolders.push(this.buildConfig.libESNextFolder);\r\n    }\r\n\r\n    const resolvedLibFolders: string[] = libFolders.map((libFolder) => path.join(this.buildConfig.rootPath, libFolder));\r\n    const promises: Promise<void>[] = (this.taskConfig.staticMatch || []).map((pattern) =>\r\n      LegacyAdapters.convertCallbackToPromise(glob, path.join(globEscape(this.buildConfig.rootPath), pattern)).then(\r\n        (matchPaths: string[]) => {\r\n          for (const matchPath of matchPaths) {\r\n            const fileContents: string = FileSystem.readFile(matchPath);\r\n            const relativePath: string = path.relative(srcPath, matchPath);\r\n            for (const resolvedLibFolder of resolvedLibFolders) {\r\n              const destPath: string = path.join(resolvedLibFolder, relativePath);\r\n              FileSystem.writeFile(destPath, fileContents, { ensureFolderExists: true });\r\n            }\r\n          }\r\n        }\r\n      )\r\n    );\r\n\r\n    const typescriptCompiler: TTypescriptCompiler = new this._rushStackCompiler.TypescriptCompiler(\r\n      {\r\n        customArgs: this.taskConfig.customArgs,\r\n        fileError: this.fileError.bind(this),\r\n        fileWarning: this.fileWarning.bind(this)\r\n      },\r\n      this.buildFolder,\r\n      this._terminalProvider\r\n    );\r\n    const basePromise: Promise<void> | undefined = typescriptCompiler.invoke();\r\n\r\n    if (basePromise) {\r\n      promises.push(basePromise);\r\n    }\r\n\r\n    let buildPromise: Promise<void> = Promise.all(promises).then(() => { /* collapse void[] to void */ });\r\n\r\n    if (this.taskConfig.removeCommentsFromJavaScript === true) {\r\n      buildPromise = buildPromise.then(\r\n        () => this._removeComments(this._rushStackCompiler.ToolPackages.typescript)\r\n      );\r\n    }\r\n\r\n    return buildPromise;\r\n  }\r\n\r\n  protected _onData(data: Buffer): void {\r\n    // Log lines separately\r\n    const dataLines: (string | undefined)[] = data.toString().split('\\n');\r\n    for (const dataLine of dataLines) {\r\n      const trimmedLine: string = (dataLine || '').trim();\r\n      if (!!trimmedLine) {\r\n        if (trimmedLine.match(/\\serror\\s/i)) {\r\n          // If the line looks like an error, log it as an error\r\n          this.logError(trimmedLine);\r\n        } else {\r\n          this.log(trimmedLine);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _removeComments(typescript: TTypescript): Promise<void> {\r\n    const configFilePath: string | undefined = typescript.findConfigFile(this.buildConfig.rootPath, FileSystem.exists);\r\n    if (!configFilePath) {\r\n      return Promise.reject(new Error('Unable to resolve tsconfig file to determine outDir.'));\r\n    }\r\n\r\n    // tslint:disable-next-line:typedef\r\n    const tsConfig = typescript.parseJsonConfigFileContent(\r\n      JsonFile.load(configFilePath),\r\n      new TsParseConfigHost(),\r\n      path.dirname(configFilePath)\r\n    );\r\n    if (!tsConfig || !tsConfig.options.outDir) {\r\n      return Promise.reject('Unable to determine outDir from TypesScript configuration.');\r\n    }\r\n\r\n    return LegacyAdapters.convertCallbackToPromise(\r\n      glob,\r\n      path.join(globEscape(tsConfig.options.outDir), '**', '*.js')\r\n    ).then((matches: string[]) => {\r\n      for (const match of matches) {\r\n        const sourceText: string = FileSystem.readFile(match);\r\n        const decommentedText: string = decomment(\r\n          sourceText,\r\n          {\r\n            // This option preserves comments that start with /*!, /**! or //! - typically copyright comments\r\n            safe: true\r\n          }\r\n        );\r\n        FileSystem.writeFile(match, decommentedText);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}