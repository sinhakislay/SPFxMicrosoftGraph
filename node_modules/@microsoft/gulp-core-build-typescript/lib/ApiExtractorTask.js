"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const RSCTask_1 = require("./RSCTask");
/**
 * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect
 * common problems and generate a report of the exported public API. The task uses the entry point of a project to
 * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.
 * @beta
 */
class ApiExtractorTask extends RSCTask_1.RSCTask {
    constructor() {
        super('api-extractor', {});
    }
    loadSchema() {
        return node_core_library_1.JsonFile.load(path.resolve(__dirname, 'schemas', 'api-extractor.schema.json'));
    }
    isEnabled(buildConfig) {
        return node_core_library_1.FileSystem.exists(this._getApiExtractorConfigFilePath(buildConfig.rootPath));
    }
    executeTask() {
        this.initializeRushStackCompiler();
        const extractorOptions = {
            localBuild: !this.buildConfig.production
        };
        const ApiExtractorRunner = this._rushStackCompiler.ApiExtractorRunner;
        const extractorConfig = ApiExtractorRunner.apiExtractor.ExtractorConfig.loadFileAndPrepare(this._getApiExtractorConfigFilePath(this.buildConfig.rootPath));
        const apiExtractorRunner = new ApiExtractorRunner({
            fileError: this.fileError.bind(this),
            fileWarning: this.fileWarning.bind(this)
        }, extractorConfig, extractorOptions, this.buildFolder, this._terminalProvider);
        return apiExtractorRunner.invoke();
    }
    _getConfigFilePath() {
        return path.join('.', 'config', 'gcb-api-extractor.json'); // There aren't config options specific to this task
    }
    _getApiExtractorConfigFilePath(rootPath) {
        return path.resolve(rootPath, 'config', 'api-extractor.json');
    }
}
exports.ApiExtractorTask = ApiExtractorTask;
//# sourceMappingURL=ApiExtractorTask.js.map