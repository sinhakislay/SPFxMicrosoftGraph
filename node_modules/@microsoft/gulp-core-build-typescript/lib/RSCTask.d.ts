import { Terminal } from '@microsoft/node-core-library';
import { GulpTask } from '@microsoft/gulp-core-build';
import * as TRushStackCompiler from '@microsoft/rush-stack-compiler-3.1';
import { GCBTerminalProvider } from './GCBTerminalProvider';
export interface IRSCTaskConfig extends Object {
    buildDirectory: string;
    allowBuiltinCompiler: boolean;
}
export declare abstract class RSCTask<TTaskConfig extends IRSCTaskConfig> extends GulpTask<TTaskConfig> {
    private static _rushStackCompilerPackagePathCache;
    private static __packageJsonLookup;
    private static readonly _packageJsonLookup;
    protected _terminalProvider: GCBTerminalProvider;
    protected _terminal: Terminal;
    /**
     * @internal
     */
    protected _rushStackCompiler: typeof TRushStackCompiler;
    private readonly _rushStackCompilerPackagePath;
    protected readonly buildFolder: string;
    constructor(taskName: string, defaultConfig: Partial<TTaskConfig>);
    protected initializeRushStackCompiler(): void;
    /**
     * Determine which compiler should be used to compile a given project.
     *
     * @remarks
     * We load the tsconfig.json file, and follow its "extends" field until we reach the end of the chain.
     * We expect the last extended file to be under an installed @microsoft/rush-stack-compiler-* package,
     * which determines which typescript/tslint/api-extractor versions should be invoked.
     *
     * @param tsconfigPath - The path of a tsconfig.json file to analyze
     * @returns The absolute path of the folder containing "@microsoft/rush-stack-compiler-*" which should be used
     * to compile this tsconfig.json project
     */
    private _resolveRushStackCompilerFromTsconfig;
}
//# sourceMappingURL=RSCTask.d.ts.map