{"version":3,"file":"UpdateAction.js","sourceRoot":"","sources":["../../../src/cli/actions/UpdateAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAI3D,2DAAwD;AAIxD,MAAa,YAAa,SAAQ,qCAAiB;IAIjD,YAAY,MAA6B;QACvC,KAAK,CAAC;YACJ,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,4DAA4D;kBACjE,qDAAqD;YACzD,aAAa,EAAE,uEAAuE;kBAClF,iEAAiE;kBACjE,sFAAsF;kBACtF,8EAA8E;kBAC9E,iFAAiF;kBACjF,0EAA0E;kBAC1E,qEAAqE;kBACrE,6DAA6D;kBAC7D,gFAAgF;kBAChF,2DAA2D;YAC/D,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC7C,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,2EAA2E;kBACpF,+EAA+E;kBAC/E,8FAA8F;kBAC9F,2FAA2F;kBAC3F,yFAAyF;kBACzF,qEAAqE;SAC1E,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAChD,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EAAE,2EAA2E;kBACpF,2FAA2F;kBAC3F,2FAA2F;kBAC3F,mGAAmG;kBACnG,oGAAoG;SACzG,CAAC,CAAC;IACL,CAAC;IAES,mBAAmB;QAC3B,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YAC1B,sBAAsB,EAAE,IAAI;YAC5B,YAAY,EAAE,IAAI,CAAC,sBAAsB,CAAC,KAAM;YAChD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAM;YACpC,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,KAAM;YACvC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAM;YAChD,kBAAkB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK;YAC3D,cAAc,EAAE,IAAI,CAAC,6BAA6B,CAAC,KAAM;YACzD,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;SAC7B,CAAC;IACJ,CAAC;CACF;AA1DD,oCA0DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport { BaseInstallAction } from './BaseInstallAction';\r\nimport { IInstallManagerOptions } from '../../logic/InstallManager';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\n\r\nexport class UpdateAction extends BaseInstallAction {\r\n  private _fullParameter: CommandLineFlagParameter;\r\n  private _recheckParameter: CommandLineFlagParameter;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'update',\r\n      summary: 'Install package dependencies for all projects in the repo,'\r\n        + ' and create or update the shrinkwrap file as needed',\r\n      documentation: 'The \"rush update\" command installs the dependencies described in your'\r\n        + ' package.json files, and updates the shrinkwrap file as needed.'\r\n        + ' (This \"shrinkwrap\" file stores a central inventory of all dependencies and versions'\r\n        + ' for projects in your repo. It is found in the \"common/config/rush\" folder.)'\r\n        + ' Note that Rush always performs a single install for all projects in your repo.'\r\n        + ' You should run \"rush update\" whenever you start working in a Rush repo,'\r\n        + ' after you pull from Git, and after you modify a package.json file.'\r\n        + ' If there is nothing to do, \"rush update\" is instantaneous.'\r\n        + ' NOTE: In certain cases \"rush install\" should be used instead of \"rush update\"'\r\n        + ' -- for details, see the command help for \"rush install\".',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    super.onDefineParameters();\r\n\r\n    this._fullParameter = this.defineFlagParameter({\r\n      parameterLongName: '--full',\r\n      description: 'Normally \"rush update\" tries to preserve your existing installed versions'\r\n        + ' and only makes the minimum updates needed to satisfy the package.json files.'\r\n        + ' This conservative approach prevents your PR from getting involved with package updates that'\r\n        + ' are unrelated to your work. Use \"--full\" when you really want to update all dependencies'\r\n        + ' to the latest SemVer-compatible version.  This should be done periodically by a person'\r\n        + ' or robot whose role is to deal with potential upgrade regressions.'\r\n    });\r\n    this._recheckParameter = this.defineFlagParameter({\r\n      parameterLongName: '--recheck',\r\n      description: 'If the shrinkwrap file appears to already satisfy the package.json files,'\r\n        + ' then \"rush update\" will skip invoking the package manager at all.  In certain situations'\r\n        + ' this heuristic may be inaccurate.  Use the \"--recheck\" flag to force the package manager'\r\n        + ' to process the shrinkwrap file.  This will also update your shrinkwrap file with Rush\\'s fixups.'\r\n        + ' (To minimize shrinkwrap churn, these fixups are normally performed only in the temporary folder.)'\r\n    });\r\n  }\r\n\r\n  protected buildInstallOptions(): IInstallManagerOptions {\r\n    return {\r\n      debug: this.parser.isDebug,\r\n      allowShrinkwrapUpdates: true,\r\n      bypassPolicy: this._bypassPolicyParameter.value!,\r\n      noLink: this._noLinkParameter.value!,\r\n      fullUpgrade: this._fullParameter.value!,\r\n      recheckShrinkwrap: this._recheckParameter.value!,\r\n      networkConcurrency: this._networkConcurrencyParameter.value,\r\n      collectLogFile: this._debugPackageManagerParameter.value!,\r\n      variant: this._variant.value\r\n    };\r\n  }\r\n}\r\n"]}