{"version":3,"file":"ChangeAction.js","sourceRoot":"","sources":["../../../src/cli/actions/ChangeAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\nimport * as colors from 'colors';\r\nimport * as inquirer from 'inquirer';\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineChoiceParameter\r\n} from '@microsoft/ts-command-line';\r\nimport {\r\n  FileSystem,\r\n  Path\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport {\r\n  IChangeFile,\r\n  IChangeInfo,\r\n  ChangeType\r\n} from '../../api/ChangeManagement';\r\nimport { VersionControl } from '../../utilities/VersionControl';\r\nimport { ChangeFile } from '../../api/ChangeFile';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { ChangeFiles } from '../../logic/ChangeFiles';\r\nimport {\r\n  VersionPolicy,\r\n  IndividualVersionPolicy,\r\n  LockStepVersionPolicy,\r\n  VersionPolicyDefinitionName\r\n} from '../../api/VersionPolicy';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\n\r\nexport class ChangeAction extends BaseRushAction {\r\n  private _verifyParameter: CommandLineFlagParameter;\r\n  private _noFetchParameter: CommandLineFlagParameter;\r\n  private _targetBranchParameter: CommandLineStringParameter;\r\n  private _changeEmailParameter: CommandLineStringParameter;\r\n  private _bulkChangeParameter: CommandLineFlagParameter;\r\n  private _bulkChangeMessageParameter: CommandLineStringParameter;\r\n  private _bulkChangeBumpTypeParameter: CommandLineChoiceParameter;\r\n  private _overwriteFlagParameter: CommandLineFlagParameter;\r\n\r\n  private _targetBranchName: string;\r\n  private _projectHostMap: Map<string, string>;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    const documentation: string[] = [\r\n      'Asks a series of questions and then generates a <branchname>-<timestamp>.json file ' +\r\n      'in the common folder. The `publish` command will consume these files and perform the proper ' +\r\n      'version bumps. Note these changes will eventually be published in a changelog.md file in each package.',\r\n      '',\r\n      'The possible types of changes are: ',\r\n      '',\r\n      'MAJOR - these are breaking changes that are not backwards compatible. ' +\r\n      'Examples are: renaming a public class, adding/removing a non-optional ' +\r\n      'parameter from a public API, or renaming an variable or function that ' +\r\n      'is exported.',\r\n      '',\r\n      'MINOR - these are changes that are backwards compatible (but not ' +\r\n      'forwards compatible). Examples are: adding a new public API or adding an ' +\r\n      'optional parameter to a public API',\r\n      '',\r\n      'PATCH - these are changes that are backwards and forwards compatible. ' +\r\n      'Examples are: Modifying a private API or fixing a bug in the logic ' +\r\n      'of how an existing API works.',\r\n      '',\r\n      'HOTFIX (EXPERIMENTAL) - these are changes that are hotfixes targeting a ' +\r\n      'specific older version of the package. When a hotfix change is added, ' +\r\n      'other changes will not be able to increment the version number.' +\r\n      'Enable this feature by setting \\'hotfixChangeEnabled\\' in your rush.json.',\r\n      ''\r\n    ];\r\n    super({\r\n      actionName: 'change',\r\n      summary: 'Records changes made to projects, indicating how the package version number should be bumped ' +\r\n        'for the next publish.',\r\n      documentation: documentation.join(os.EOL),\r\n      safeForSimultaneousRushProcesses: true,\r\n      parser\r\n    });\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    const BULK_LONG_NAME: string = '--bulk';\r\n    const BULK_MESSAGE_LONG_NAME: string = '--message';\r\n    const BULK_BUMP_TYPE_LONG_NAME: string = '--bump-type';\r\n\r\n    this._verifyParameter = this.defineFlagParameter({\r\n      parameterLongName: '--verify',\r\n      parameterShortName: '-v',\r\n      description: 'Verify the change file has been generated and that it is a valid JSON file'\r\n    });\r\n\r\n    this._noFetchParameter = this.defineFlagParameter({\r\n      parameterLongName: '--no-fetch',\r\n      description: 'Skips fetching the baseline branch before running \"git diff\" to detect changes.'\r\n    });\r\n\r\n    this._targetBranchParameter = this.defineStringParameter({\r\n      parameterLongName: '--target-branch',\r\n      parameterShortName: '-b',\r\n      argumentName: 'BRANCH',\r\n      description: 'If this parameter is specified, compare the checked out branch with the specified branch to' +\r\n        'determine which projects were changed. If this parameter is not specified, the checked out branch ' +\r\n        'is compared against the \"master\" branch.'\r\n    });\r\n\r\n    this._overwriteFlagParameter = this.defineFlagParameter({\r\n      parameterLongName: '--overwrite',\r\n      description: `If a changefile already exists, overwrite without prompting ` +\r\n        `(or erroring in ${BULK_LONG_NAME} mode).`\r\n    });\r\n\r\n    this._changeEmailParameter = this.defineStringParameter({\r\n      parameterLongName: '--email',\r\n      argumentName: 'EMAIL',\r\n      description: 'The email address to use in changefiles. If this parameter is not provided, the email address ' +\r\n        'will be detected or prompted for in interactive mode.'\r\n    });\r\n\r\n    this._bulkChangeParameter = this.defineFlagParameter({\r\n      parameterLongName: BULK_LONG_NAME,\r\n      description: 'If this flag is specified, apply the same change message and bump type to all changed projects. ' +\r\n        `The ${BULK_MESSAGE_LONG_NAME} and the ${BULK_BUMP_TYPE_LONG_NAME} parameters must be specified if the ` +\r\n        `${BULK_LONG_NAME} parameter is specified`\r\n    });\r\n\r\n    this._bulkChangeMessageParameter = this.defineStringParameter({\r\n      parameterLongName: BULK_MESSAGE_LONG_NAME,\r\n      argumentName: 'MESSAGE',\r\n      description: `The message to apply to all changed projects if the ${BULK_LONG_NAME} flag is provided.`\r\n    });\r\n\r\n    this._bulkChangeBumpTypeParameter = this.defineChoiceParameter({\r\n      parameterLongName: BULK_BUMP_TYPE_LONG_NAME,\r\n      alternatives: [...Object.keys(this._getBumpOptions()), ChangeType[ChangeType.none]],\r\n      description: `The bump type to apply to all changed projects if the ${BULK_LONG_NAME} flag is provided.`\r\n    });\r\n  }\r\n\r\n  public async run(): Promise<void> {\r\n    console.log(`The target branch is ${this._targetBranch}`);\r\n    this._projectHostMap = this._generateHostMap();\r\n\r\n    if (this._verifyParameter.value) {\r\n      const errors: string[] = ([\r\n        this._bulkChangeParameter,\r\n        this._bulkChangeMessageParameter,\r\n        this._bulkChangeBumpTypeParameter,\r\n        this._overwriteFlagParameter\r\n      ]).map((parameter) => {\r\n        return parameter.value\r\n        ? (\r\n          `The {${this._bulkChangeParameter.longName} parameter cannot be provided with the ` +\r\n            `${this._verifyParameter.longName} parameter`\r\n          )\r\n        : '';\r\n      }).filter((error) => error !== '');\r\n      if (errors.length > 0) {\r\n        errors.forEach((error) => console.error(error));\r\n        throw new AlreadyReportedError();\r\n      }\r\n\r\n      this._verify();\r\n      return;\r\n    }\r\n\r\n    const sortedProjectList: string[] = this._getChangedPackageNames().sort();\r\n    if (sortedProjectList.length === 0) {\r\n      this._logNoChangeFileRequired();\r\n      this._warnUncommittedChanges();\r\n      return;\r\n    }\r\n\r\n    this._warnUncommittedChanges();\r\n\r\n    const promptModule: inquirer.PromptModule = inquirer.createPromptModule();\r\n    let changeFileData: Map<string, IChangeFile> = new Map<string, IChangeFile>();\r\n    let interactiveMode: boolean = false;\r\n    if (this._bulkChangeParameter.value) {\r\n      if (\r\n        !this._bulkChangeBumpTypeParameter.value ||\r\n        (\r\n          !this._bulkChangeMessageParameter.value &&\r\n          this._bulkChangeBumpTypeParameter.value !== ChangeType[ChangeType.none]\r\n        )\r\n      ) {\r\n        throw new Error(\r\n          `The ${this._bulkChangeBumpTypeParameter.longName} and ${this._bulkChangeMessageParameter.longName} ` +\r\n          `parameters must provided if the ${this._bulkChangeParameter.longName} flag is provided. If the value ` +\r\n          `\"${ChangeType[ChangeType.none]}\" is provided to the ${this._bulkChangeBumpTypeParameter.longName} ` +\r\n          `parameter, the ${this._bulkChangeMessageParameter.longName} parameter may be omitted.`\r\n        );\r\n      }\r\n\r\n      const email: string | undefined = this._changeEmailParameter.value || this._detectEmail();\r\n      if (!email) {\r\n        throw new Error(\r\n          'Unable to detect Git email and an email address wasn\\'t provided using the ' +\r\n          `${this._changeEmailParameter.longName} paramter.`\r\n        );\r\n      }\r\n\r\n      const errors: string[] = [];\r\n\r\n      const comment: string = this._bulkChangeMessageParameter.value || '';\r\n      const changeType: string = this._bulkChangeBumpTypeParameter.value;\r\n      for (const packageName of sortedProjectList) {\r\n        const allowedBumpTypes: string[] = Object.keys(this._getBumpOptions(packageName));\r\n        let projectChangeType: string = changeType;\r\n        if (allowedBumpTypes.length === 0) {\r\n          projectChangeType = ChangeType[ChangeType.none];\r\n        } else if (\r\n          projectChangeType !== ChangeType[ChangeType.none] &&\r\n          allowedBumpTypes.indexOf(projectChangeType) === -1\r\n        ) {\r\n          errors.push(`The \"${projectChangeType}\" change type is not allowed for package \"${packageName}\".`);\r\n        }\r\n\r\n        changeFileData.set(\r\n          packageName,\r\n          {\r\n            changes: [\r\n              {\r\n                comment,\r\n                type: projectChangeType,\r\n                packageName\r\n              } as IChangeInfo\r\n            ],\r\n            packageName,\r\n            email\r\n          }\r\n        );\r\n      }\r\n\r\n      if (errors.length > 0) {\r\n        for (const error of errors) {\r\n          console.error(error);\r\n        }\r\n\r\n        throw new AlreadyReportedError();\r\n      }\r\n    } else if (this._bulkChangeBumpTypeParameter.value || this._bulkChangeMessageParameter.value) {\r\n      throw new Error(\r\n        `The ${this._bulkChangeParameter.longName} flag must be provided with the ` +\r\n        `${this._bulkChangeBumpTypeParameter.longName} and ${this._bulkChangeMessageParameter.longName} parameters.`\r\n      );\r\n    } else {\r\n      interactiveMode = true;\r\n\r\n      const existingChangeComments: Map<string, string[]> = ChangeFiles.getChangeComments(this._getChangeFiles());\r\n      changeFileData = await this._promptForChangeFileData(\r\n        promptModule,\r\n        sortedProjectList,\r\n        existingChangeComments\r\n      );\r\n\r\n      const email: string = this._changeEmailParameter.value\r\n        ? this._changeEmailParameter.value\r\n        : await this._detectOrAskForEmail(promptModule);\r\n      changeFileData.forEach((changeFile: IChangeFile) => {\r\n        changeFile.email = email;\r\n      });\r\n    }\r\n\r\n    try {\r\n      return await this._writeChangeFiles(\r\n        promptModule,\r\n        changeFileData,\r\n        this._overwriteFlagParameter.value,\r\n        interactiveMode\r\n      );\r\n    } catch (error) {\r\n      throw new Error(`There was an error creating a change file: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  private _generateHostMap(): Map<string, string> {\r\n    const hostMap: Map<string, string> = new Map<string, string>();\r\n    this.rushConfiguration.projects.forEach(project => {\r\n      let hostProjectName: string = project.packageName;\r\n      if (project.versionPolicy && project.versionPolicy.isLockstepped) {\r\n        const lockstepPolicy: LockStepVersionPolicy = project.versionPolicy as LockStepVersionPolicy;\r\n        hostProjectName = lockstepPolicy.mainProject || project.packageName;\r\n      }\r\n\r\n      hostMap.set(project.packageName, hostProjectName);\r\n    });\r\n\r\n    return hostMap;\r\n  }\r\n\r\n  private _verify(): void {\r\n    const changedPackages: string[] = this._getChangedPackageNames();\r\n    if (changedPackages.length > 0) {\r\n      this._validateChangeFile(changedPackages);\r\n    } else {\r\n      this._logNoChangeFileRequired();\r\n    }\r\n  }\r\n\r\n  private get _targetBranch(): string {\r\n    if (!this._targetBranchName) {\r\n      this._targetBranchName = (\r\n        this._targetBranchParameter.value || VersionControl.getRemoteMasterBranch(this.rushConfiguration.repositoryUrl)\r\n      );\r\n    }\r\n\r\n    return this._targetBranchName;\r\n  }\r\n\r\n  private _getChangedPackageNames(): string[] {\r\n    const changedFolders: Array<string | undefined> | undefined = VersionControl.getChangedFolders(\r\n      this._targetBranch,\r\n      this._noFetchParameter.value\r\n    );\r\n    if (!changedFolders) {\r\n      return [];\r\n    }\r\n    const changedPackageNames: Set<string> = new Set<string>();\r\n\r\n    const repoRootFolder: string | undefined = VersionControl.getRepositoryRootPath();\r\n    this.rushConfiguration.projects\r\n    .filter(project => project.shouldPublish)\r\n    .filter(project => !project.versionPolicy || !project.versionPolicy.exemptFromRushChange)\r\n    .filter(project => {\r\n      const projectFolder: string = repoRootFolder\r\n        ? path.relative(repoRootFolder, project.projectFolder)\r\n        : project.projectRelativeFolder;\r\n      return this._hasProjectChanged(changedFolders, projectFolder);\r\n    })\r\n    .forEach(project => {\r\n      const hostName: string | undefined = this._projectHostMap.get(project.packageName);\r\n      if (hostName) {\r\n        changedPackageNames.add(hostName);\r\n      }\r\n    });\r\n\r\n    return [...changedPackageNames];\r\n  }\r\n\r\n  private _validateChangeFile(changedPackages: string[]): void {\r\n    const files: string[] = this._getChangeFiles();\r\n    ChangeFiles.validate(files, changedPackages, this.rushConfiguration);\r\n  }\r\n\r\n  private _getChangeFiles(): string[] {\r\n    return VersionControl.getChangedFiles(this._targetBranch, true, `common/changes/`).map(relativePath => {\r\n      return path.join(this.rushConfiguration.rushJsonFolder, relativePath);\r\n    });\r\n  }\r\n\r\n  private _hasProjectChanged(\r\n    changedFolders: Array<string | undefined>,\r\n    projectFolder: string\r\n  ): boolean {\r\n    for (const folder of changedFolders) {\r\n      if (folder && Path.isUnderOrEqual(folder, projectFolder)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * The main loop which prompts the user for information on changed projects.\r\n   */\r\n  private async _promptForChangeFileData(\r\n    promptModule: inquirer.PromptModule,\r\n    sortedProjectList: string[],\r\n    existingChangeComments: Map<string, string[]>\r\n  ): Promise<Map<string, IChangeFile>> {\r\n    const changedFileData: Map<string, IChangeFile> = new Map<string, IChangeFile>();\r\n\r\n    for (const projectName of sortedProjectList) {\r\n      const changeInfo: IChangeInfo | undefined = await this._askQuestions(\r\n        promptModule,\r\n        projectName,\r\n        existingChangeComments\r\n      );\r\n      if (changeInfo) {\r\n        // Save the info into the change file\r\n        let changeFile: IChangeFile | undefined = changedFileData.get(changeInfo.packageName);\r\n        if (!changeFile) {\r\n          changeFile = {\r\n            changes: [],\r\n            packageName: changeInfo.packageName,\r\n            email: undefined\r\n          };\r\n          changedFileData.set(changeInfo.packageName, changeFile!);\r\n        }\r\n\r\n        changeFile!.changes.push(changeInfo);\r\n      }\r\n    }\r\n\r\n    return changedFileData;\r\n  }\r\n\r\n  /**\r\n   * Asks all questions which are needed to generate changelist for a project.\r\n   */\r\n  private async _askQuestions(\r\n    promptModule: inquirer.PromptModule,\r\n    packageName: string,\r\n    existingChangeComments: Map<string, string[]>\r\n  ): Promise<IChangeInfo | undefined> {\r\n    console.log(`${os.EOL}${packageName}`);\r\n    const comments: string[] | undefined = existingChangeComments.get(packageName);\r\n    if (comments) {\r\n      console.log(`Found existing comments:`);\r\n      comments.forEach(comment => {\r\n        console.log(`    > ${comment}`);\r\n      });\r\n      const { appendComment }: { appendComment: 'skip' | 'append' } = await promptModule({\r\n        name: 'appendComment',\r\n        type: 'list',\r\n        default: 'skip',\r\n        message: 'Append to existing comments or skip?',\r\n        choices: [\r\n          {\r\n            'name': 'Skip',\r\n            'value': 'skip'\r\n          },\r\n          {\r\n            'name': 'Append',\r\n            'value': 'append'\r\n          }\r\n        ]\r\n      });\r\n\r\n      if (appendComment === 'skip') {\r\n        return undefined;\r\n      } else {\r\n        return await this._promptForComments(promptModule, packageName);\r\n      }\r\n    } else {\r\n      return await this._promptForComments(promptModule, packageName);\r\n    }\r\n  }\r\n\r\n  private async _promptForComments(\r\n    promptModule: inquirer.PromptModule,\r\n    packageName: string\r\n  ): Promise<IChangeInfo | undefined> {\r\n    const bumpOptions: { [type: string]: string } = this._getBumpOptions(packageName);\r\n    const { comment }: { comment: string } = await promptModule({\r\n      name: 'comment',\r\n      type: 'input',\r\n      message: `Describe changes, or ENTER if no changes:`\r\n    });\r\n\r\n    if (Object.keys(bumpOptions).length === 0 || !comment) {\r\n      return {\r\n        packageName: packageName,\r\n        comment: comment || '',\r\n        type: ChangeType[ChangeType.none]\r\n      } as IChangeInfo;\r\n    } else {\r\n      const { bumpType }: { bumpType: string } = await promptModule({\r\n        choices: Object.keys(bumpOptions).map(option => {\r\n          return {\r\n            'value': option,\r\n            'name': bumpOptions[option]\r\n          };\r\n        }),\r\n        default: 'patch',\r\n        message: 'Select the type of change:',\r\n        name: 'bumpType',\r\n        type: 'list'\r\n      });\r\n\r\n      return {\r\n        packageName: packageName,\r\n        comment: comment,\r\n        type: bumpType\r\n      } as IChangeInfo;\r\n    }\r\n  }\r\n\r\n  private _getBumpOptions(packageName?: string): { [type: string]: string } {\r\n    let bumpOptions: { [type: string]: string } = (this.rushConfiguration && this.rushConfiguration.hotfixChangeEnabled)\r\n      ? {\r\n          [ChangeType[ChangeType.hotfix]]: 'hotfix - for changes that need to be published in a separate hotfix package'\r\n        }\r\n      : {\r\n          [ChangeType[ChangeType.major]]: 'major - for changes that break compatibility, e.g. removing an API',\r\n          [ChangeType[ChangeType.minor]]: 'minor - for backwards compatible changes, e.g. adding a new API',\r\n          [ChangeType[ChangeType.patch]]: 'patch - for changes that do not affect compatibility, e.g. fixing a bug'\r\n        };\r\n\r\n    if (packageName) {\r\n      const project: RushConfigurationProject | undefined = this.rushConfiguration.getProjectByName(packageName);\r\n      const versionPolicy: VersionPolicy | undefined = project!.versionPolicy;\r\n\r\n      if (versionPolicy) {\r\n        if (versionPolicy.definitionName === VersionPolicyDefinitionName.lockStepVersion) {\r\n          // No need to ask for bump types if project is lockstep versioned.\r\n          bumpOptions = {};\r\n        } else if (versionPolicy.definitionName === VersionPolicyDefinitionName.individualVersion) {\r\n          const individualPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n          if (individualPolicy.lockedMajor !== undefined) {\r\n            delete bumpOptions[ChangeType[ChangeType.major]];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return bumpOptions;\r\n  }\r\n\r\n  /**\r\n   * Will determine a user's email by first detecting it from their Git config,\r\n   * or will ask for it if it is not found or the Git config is wrong.\r\n   */\r\n  private async _detectOrAskForEmail(promptModule: inquirer.PromptModule): Promise<string> {\r\n    return await this._detectAndConfirmEmail(promptModule) || await this._promptForEmail(promptModule);\r\n  }\r\n\r\n  private _detectEmail(): string | undefined {\r\n    try {\r\n      return child_process.execSync('git config user.email')\r\n        .toString()\r\n        .replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n    } catch (err) {\r\n      console.log('There was an issue detecting your Git email...');\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detects the user's email address from their Git configuration, prompts the user to approve the\r\n   * detected email. It returns undefined if it cannot be detected.\r\n   */\r\n  private async _detectAndConfirmEmail(promptModule: inquirer.PromptModule): Promise<string | undefined> {\r\n    const email: string | undefined = this._detectEmail();\r\n\r\n    if (email) {\r\n      const { isCorrectEmail }: { isCorrectEmail: boolean } = await promptModule([\r\n        {\r\n          type: 'confirm',\r\n          name: 'isCorrectEmail',\r\n          default: 'Y',\r\n          message: `Is your email address ${email}?`\r\n        }\r\n      ]);\r\n      return isCorrectEmail ? email : undefined;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asks the user for their email address\r\n   */\r\n  private async _promptForEmail(promptModule: inquirer.PromptModule): Promise<string> {\r\n    const { email }: { email: string } = await promptModule([\r\n      {\r\n        type: 'input',\r\n        name: 'email',\r\n        message: 'What is your email address?',\r\n        validate: (input: string) => {\r\n          return true; // @todo should be an email\r\n        }\r\n      }\r\n    ]);\r\n    return email;\r\n  }\r\n\r\n  private _warnUncommittedChanges(): void {\r\n    try {\r\n      if (VersionControl.hasUncommittedChanges()) {\r\n        console.log(\r\n          os.EOL +\r\n          colors.yellow(\r\n            'Warning: You have uncommitted changes, which do not trigger prompting for change ' +\r\n            'descriptions.'\r\n          )\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(`An error occurred when detecting uncommitted changes: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes change files to the common/changes folder. Will prompt for overwrite if file already exists.\r\n   */\r\n  private async _writeChangeFiles(\r\n    promptModule: inquirer.PromptModule,\r\n    changeFileData: Map<string, IChangeFile>,\r\n    overwrite: boolean,\r\n    interactiveMode: boolean\r\n  ): Promise<void> {\r\n    await changeFileData.forEach(async (changeFile: IChangeFile) => {\r\n      await this._writeChangeFile(promptModule, changeFile, overwrite, interactiveMode);\r\n    });\r\n  }\r\n\r\n  private async _writeChangeFile(\r\n    promptModule: inquirer.PromptModule,\r\n    changeFileData: IChangeFile,\r\n    overwrite: boolean,\r\n    interactiveMode: boolean\r\n  ): Promise<void> {\r\n    const output: string = JSON.stringify(changeFileData, undefined, 2);\r\n    const changeFile: ChangeFile = new ChangeFile(changeFileData, this.rushConfiguration);\r\n    const filePath: string = changeFile.generatePath();\r\n\r\n    const fileExists: boolean = FileSystem.exists(filePath);\r\n    const shouldWrite: boolean = (\r\n      !fileExists ||\r\n      overwrite ||\r\n      (interactiveMode ? await this._promptForOverwrite(promptModule, filePath) : false)\r\n    );\r\n\r\n    if (!interactiveMode && fileExists && !overwrite) {\r\n      throw new Error(`Changefile ${filePath} already exists`);\r\n    }\r\n\r\n    if (shouldWrite) {\r\n      this._writeFile(filePath, output, shouldWrite && fileExists);\r\n    }\r\n  }\r\n\r\n  private async _promptForOverwrite(promptModule: inquirer.PromptModule, filePath: string): Promise<boolean> {\r\n    const overwrite: boolean = await promptModule([\r\n      {\r\n        name: 'overwrite',\r\n        type: 'confirm',\r\n        message: `Overwrite ${filePath}?`\r\n      }\r\n    ]);\r\n\r\n    if (overwrite) {\r\n      return true;\r\n    } else {\r\n      console.log(`Not overwriting ${filePath}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes a file to disk, ensuring the directory structure up to that point exists\r\n   */\r\n  private _writeFile(fileName: string, output: string, isOverwrite: boolean): void {\r\n    FileSystem.writeFile(fileName, output, { ensureFolderExists: true });\r\n    if (isOverwrite) {\r\n      console.log(`Overwrote file: ${fileName}`);\r\n    } else {\r\n      console.log(`Created file: ${fileName}`);\r\n    }\r\n  }\r\n\r\n  private _logNoChangeFileRequired(): void {\r\n    console.log('No changes were detected to relevant packages on this branch. Nothing to do.');\r\n  }\r\n}\r\n"]}