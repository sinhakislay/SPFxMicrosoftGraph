"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../../../typings/builtins/builtins.d.ts" />
const colors = require("colors");
const glob = require("glob");
const path = require("path");
const builtinPackageNames = require("builtins");
const BaseRushAction_1 = require("./BaseRushAction");
const node_core_library_1 = require("@microsoft/node-core-library");
class ScanAction extends BaseRushAction_1.BaseConfiglessRushAction {
    constructor(parser) {
        super({
            actionName: 'scan',
            summary: 'Scan the current project folder and display a report of imported packages.',
            documentation: `The NPM system allows a project to import dependencies without explicitly`
                + ` listing them in its package.json file. This is a dangerous practice, because`
                + ` there is no guarantee you will get a compatible version. The "rush scan" command`
                + ` reports a list of packages that are imported by your code, which you can`
                + ` compare against your package.json file to find mistakes. It searches the "./src"`
                + ` and "./lib" folders for typical import syntaxes such as "import __ from '__'",`
                + ` "require('__')", "System.import('__'), etc.  The results are only approximate,`
                + ` but generally pretty accurate.`,
            safeForSimultaneousRushProcesses: true,
            parser
        });
    }
    onDefineParameters() {
        // abstract
    }
    run() {
        const packageJsonFilename = path.resolve('./package.json');
        if (!node_core_library_1.FileSystem.exists(packageJsonFilename)) {
            throw new Error('You must run "rush scan" in a project folder containing a package.json file.');
        }
        const requireRegExps = [
            // Example: require('someting')
            /\brequire\s*\(\s*[']([^']+\s*)[']\)/,
            /\brequire\s*\(\s*["]([^"]+)["]\s*\)/,
            // Example: require.ensure('someting')
            /\brequire.ensure\s*\(\s*[']([^']+\s*)[']\)/,
            /\brequire.ensure\s*\(\s*["]([^"]+)["]\s*\)/,
            // Example: require.resolve('someting')
            /\brequire.resolve\s*\(\s*[']([^']+\s*)[']\)/,
            /\brequire.resolve\s*\(\s*["]([^"]+)["]\s*\)/,
            // Example: System.import('someting')
            /\bSystem.import\s*\(\s*[']([^']+\s*)[']\)/,
            /\bSystem.import\s*\(\s*["]([^"]+)["]\s*\)/,
            // Example:
            //
            // import {
            //   A, B
            // } from 'something';
            /\bfrom\s*[']([^']+)[']/,
            /\bfrom\s*["]([^"]+)["]/,
            // Example:  import 'something';
            /\bimport\s*[']([^']+)[']\s*\;/,
            /\bimport\s*["]([^"]+)["]\s*\;/,
            // Example:
            // /// <reference types="something" />
            /\/\/\/\s*<\s*reference\s+types\s*=\s*["]([^"]+)["]\s*\/>/
        ];
        // Example: "my-package/lad/dee/dah" --> "my-package"
        // Example: "@ms/my-package" --> "@ms/my-package"
        const packageRegExp = /^((@[a-z\-0-9!_]+\/)?[a-z\-0-9!_]+)\/?/;
        const requireMatches = new Set();
        for (const filename of glob.sync('{./*.{ts,js,tsx,jsx},./{src,lib}/**/*.{ts,js,tsx,jsx}}')) {
            try {
                const contents = node_core_library_1.FileSystem.readFile(filename);
                const lines = contents.split('\n');
                for (const line of lines) {
                    for (const requireRegExp of requireRegExps) {
                        const requireRegExpResult = requireRegExp.exec(line);
                        if (requireRegExpResult) {
                            requireMatches.add(requireRegExpResult[1]);
                        }
                    }
                }
            }
            catch (error) {
                console.log(colors.bold('Skipping file due to error: ' + filename));
            }
        }
        const packageMatches = new Set();
        requireMatches.forEach((requireMatch) => {
            const packageRegExpResult = packageRegExp.exec(requireMatch);
            if (packageRegExpResult) {
                packageMatches.add(packageRegExpResult[1]);
            }
        });
        const packageNames = [];
        packageMatches.forEach((packageName) => {
            packageNames.push(packageName);
        });
        packageNames.sort();
        console.log('Detected dependencies:');
        for (const packageName of packageNames) {
            if (builtinPackageNames.indexOf(packageName) < 0) {
                console.log('  ' + packageName);
            }
        }
        return Promise.resolve();
    }
}
exports.ScanAction = ScanAction;
//# sourceMappingURL=ScanAction.js.map