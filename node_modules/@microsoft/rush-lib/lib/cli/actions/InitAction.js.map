{"version":3,"file":"InitAction.js","sourceRoot":"","sources":["../../../src/cli/actions/InitAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as fs from 'fs';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { BaseConfiglessRushAction } from './BaseRushAction';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\nimport { FileSystem, NewlineKind, InternalError } from '@microsoft/node-core-library';\r\nimport { CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\nimport { Rush } from '../../api/Rush';\r\n\r\nexport class InitAction extends BaseConfiglessRushAction {\r\n  // Matches a well-formed BEGIN macro starting a block section.\r\n  // Example:  /*[BEGIN \"DEMO\"]*/\r\n  //\r\n  // Group #1 is the indentation spaces before the macro\r\n  // Group #2 is the section name\r\n  private static _beginMacroRegExp: RegExp = /^(\\s*)\\/\\*\\[BEGIN \"([A-Z]+)\"\\]\\s*\\*\\/\\s*$/;\r\n\r\n  // Matches a well-formed END macro ending a block section.\r\n  // Example:  /*[END \"DEMO\"]*/\r\n  //\r\n  // Group #1 is the indentation spaces before the macro\r\n  // Group #2 is the section name\r\n  private static _endMacroRegExp: RegExp = /^(\\s*)\\/\\*\\[END \"([A-Z]+)\"\\]\\s*\\*\\/\\s*$/;\r\n\r\n  // Matches a well-formed single-line section, including the space character after it\r\n  // if present.\r\n  // Example:  /*[LINE \"HYPOTHETICAL\"]*/\r\n  //\r\n  // Group #1 is the section name\r\n  private static _lineMacroRegExp: RegExp = /\\/\\*\\[LINE \"([A-Z]+)\"\\]\\s*\\*\\/\\s?/;\r\n\r\n  // Matches a variable expansion.\r\n  // Example:  [%RUSH_VERSION%]\r\n  //\r\n  // Group #1 is the variable name including the dollar sign\r\n  private static _variableMacroRegExp: RegExp = /\\[(%[A-Z0-9_]+%)\\]/;\r\n\r\n  // Matches anything that starts with \"/*[\" and ends with \"]*/\"\r\n  // Used to catch malformed macro expressions\r\n  private static _anyMacroRegExp: RegExp = /\\/\\*\\s*\\[.*\\]\\s*\\*\\//;\r\n\r\n  private _overwriteParameter: CommandLineFlagParameter;\r\n  private _rushExampleParameter: CommandLineFlagParameter;\r\n\r\n  // template section name --> whether it should be commented out\r\n  private _commentedBySectionName: Map<string, boolean> = new Map<string, boolean>();\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'init',\r\n      summary: 'Initializes a new repository to be managed by Rush',\r\n      documentation: 'When invoked in an empty folder, this command provisions a standard'\r\n        + ' set of config file templates to start managing projects using Rush.',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void { // abstract\r\n    this._overwriteParameter = this.defineFlagParameter({\r\n      parameterLongName: '--overwrite-existing',\r\n      description: 'By default \"rush init\" will not overwrite existing config files.'\r\n        + ' Specify this switch to override that. This can be useful when upgrading'\r\n        + ' your repo to a newer release of Rush. WARNING: USE WITH CARE!'\r\n    });\r\n    this._rushExampleParameter = this.defineFlagParameter({\r\n      parameterLongName: '--rush-example-repo',\r\n      description: 'When copying the template config files, this uncomments fragments that are used'\r\n        + ' by the \"rush-example\" GitHub repo, which is a sample monorepo that illustrates many Rush'\r\n        + ' features. This option is primarily intended for maintaining that example.'\r\n    });\r\n  }\r\n\r\n  protected run(): Promise<void> {\r\n    const initFolder: string = process.cwd();\r\n\r\n    if (!this._overwriteParameter.value) {\r\n      if (!this._validateFolderIsEmpty(initFolder)) {\r\n        return Promise.reject(new AlreadyReportedError());\r\n      }\r\n    }\r\n\r\n    this._defineMacroSections();\r\n    this._copyTemplateFiles(initFolder);\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private _defineMacroSections(): void {\r\n    this._commentedBySectionName.clear();\r\n\r\n    // The \"HYPOTHETICAL\" sections are always commented out by \"rush init\".\r\n    // They are uncommented in the \"assets\" source folder so that we can easily validate\r\n    // that they conform to their JSON schema.\r\n    this._commentedBySectionName.set('HYPOTHETICAL', true);\r\n\r\n    // The \"DEMO\" sections are uncommented only when \"--rush-example-repo\" is specified.\r\n    this._commentedBySectionName.set('DEMO', !this._rushExampleParameter.value);\r\n  }\r\n\r\n  // Check whether it's safe to run \"rush init\" in the current working directory.\r\n  private _validateFolderIsEmpty(initFolder: string): boolean {\r\n    if (this.rushConfiguration !== undefined) {\r\n      console.error(colors.red('ERROR: Found an existing configuration in: '\r\n      + this.rushConfiguration.rushJsonFile));\r\n      console.log(os.EOL + 'The \"rush init\" command must be run in a new folder without '\r\n        + 'an existing Rush configuration.');\r\n      return false;\r\n    }\r\n\r\n    for (const itemName of FileSystem.readFolder(initFolder)) {\r\n      if (itemName.substr(0, 1) === '.') {\r\n        // Ignore any items that start with \".\", for example \".git\"\r\n        continue;\r\n      }\r\n\r\n      const itemPath: string = path.join(initFolder, itemName);\r\n\r\n      const stats: fs.Stats = FileSystem.getStatistics(itemPath);\r\n      // Ignore any loose files in the current folder, e.g. \"README.md\"\r\n      // or \"CONTRIBUTING.md\"\r\n      if (stats.isDirectory()) {\r\n        console.error(colors.red(`ERROR: Found a subdirectory: \"${itemName}\"`));\r\n        console.log(os.EOL + 'The \"rush init\" command must be run in a new folder with no projects added yet.');\r\n        return false;\r\n      } else {\r\n        if (itemName.toLowerCase() === 'package.json') {\r\n          console.error(colors.red(`ERROR: Found a package.json file in this folder`));\r\n          console.log(os.EOL + 'The \"rush init\" command must be run in a new folder with no projects added yet.');\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private _copyTemplateFiles(initFolder: string): void {\r\n    // The \"[dot]\" base name is used for hidden files to prevent various tools from interpreting them.\r\n    // For example, \"npm publish\" will always exclude the filename \".gitignore\"\r\n    const templateFilePaths: string[] = [\r\n      'rush.json',\r\n      '[dot]gitattributes',\r\n      '[dot]gitignore',\r\n      '[dot]travis.yml',\r\n      'common/config/rush/[dot]npmrc',\r\n      'common/config/rush/command-line.json',\r\n      'common/config/rush/common-versions.json',\r\n      'common/config/rush/experiments.json',\r\n      'common/config/rush/pnpmfile.js',\r\n      'common/config/rush/version-policies.json'\r\n    ];\r\n\r\n    const assetsSubfolder: string = path.resolve(__dirname, '../../../assets/rush-init');\r\n\r\n    for (const templateFilePath of templateFilePaths) {\r\n      const sourcePath: string = path.join(assetsSubfolder, templateFilePath);\r\n\r\n      if (!FileSystem.exists(sourcePath)) {\r\n        // If this happens, please report a Rush bug\r\n        throw new InternalError('Unable to find template input file: ' + sourcePath);\r\n      }\r\n\r\n      const destinationPath: string = path.join(initFolder, templateFilePath)\r\n        .replace('[dot]', '.');\r\n\r\n      this._copyTemplateFile(sourcePath, destinationPath);\r\n    }\r\n  }\r\n\r\n  // Copy the template from sourcePath, transform any macros, and write the output to destinationPath.\r\n  //\r\n  // We implement a simple template engine.  \"Single-line section\" macros have this form:\r\n  //\r\n  //     /*[LINE \"NAME\"]*/ (content goes here)\r\n  //\r\n  // ...and when commented out will look like this:\r\n  //\r\n  //     // (content goes here)\r\n  //\r\n  // \"Block section\" macros have this form:\r\n  //\r\n  //     /*[BEGIN \"NAME\"]*/\r\n  //     (content goes\r\n  //     here)\r\n  //     /*[END \"NAME\"]*/\r\n  //\r\n  // ...and when commented out will look like this:\r\n  //\r\n  //     // (content goes\r\n  //     // here)\r\n  //\r\n  // Lastly, a variable expansion has this form:\r\n  //\r\n  //     // The value is [%NAME%].\r\n  //\r\n  // ...and when expanded with e.g. \"123\" will look like this:\r\n  //\r\n  //     // The value is 123.\r\n  //\r\n  // The section names must be one of the predefined names used by \"rush init\".\r\n  // A single-line section may appear inside a block section, in which case it will get\r\n  // commented twice.\r\n  private _copyTemplateFile(sourcePath: string, destinationPath: string): void {\r\n    if (!this._overwriteParameter.value) {\r\n      if (FileSystem.exists(destinationPath)) {\r\n        console.log(colors.yellow('Not overwriting already existing file: ') + destinationPath);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (FileSystem.exists(destinationPath)) {\r\n      console.log(colors.yellow(`Overwriting: ${destinationPath}`));\r\n    } else {\r\n      console.log(`Generating: ${destinationPath}`);\r\n    }\r\n\r\n    const outputLines: string[] = [];\r\n    const lines: string[] = FileSystem.readFile(sourcePath, { convertLineEndings: NewlineKind.Lf })\r\n      .split('\\n');\r\n\r\n    let activeBlockSectionName: string | undefined = undefined;\r\n    let activeBlockIndent: string = '';\r\n\r\n    for (const line of lines) {\r\n      let match: RegExpMatchArray | null;\r\n\r\n      // Check for a block section start\r\n      // Example:  /*[BEGIN \"DEMO\"]*/\r\n      match = line.match(InitAction._beginMacroRegExp);\r\n      if (match) {\r\n        if (activeBlockSectionName) {\r\n          // If this happens, please report a Rush bug\r\n          throw new InternalError(`The template contains an unmatched BEGIN macro for \"${activeBlockSectionName}\"`);\r\n        }\r\n\r\n        activeBlockSectionName = match[2];\r\n        activeBlockIndent = match[1];\r\n        // Remove the entire line containing the macro\r\n        continue;\r\n      }\r\n\r\n      // Check for a block section end\r\n      // Example:  /*[END \"DEMO\"]*/\r\n      match = line.match(InitAction._endMacroRegExp);\r\n      if (match) {\r\n        if (activeBlockSectionName === undefined) {\r\n          // If this happens, please report a Rush bug\r\n          throw new InternalError(`The template contains an unmatched END macro for \"${activeBlockSectionName}\"`);\r\n        }\r\n\r\n        if (activeBlockSectionName !== match[2]) {\r\n          // If this happens, please report a Rush bug\r\n          throw new InternalError(`The template contains an mismatched END macro for \"${activeBlockSectionName}\"`);\r\n        }\r\n\r\n        if (activeBlockIndent !== match[1]) {\r\n          // If this happens, please report a Rush bug\r\n          throw new InternalError(`The template contains an inconsistently indented section`\r\n            + ` \"${activeBlockSectionName}\"`);\r\n        }\r\n\r\n        activeBlockSectionName = undefined;\r\n\r\n        // Remove the entire line containing the macro\r\n        continue;\r\n      }\r\n\r\n      let transformedLine: string = line;\r\n\r\n      // Check for a single-line section\r\n      // Example:  /*[LINE \"HYPOTHETICAL\"]*/\r\n      match = transformedLine.match(InitAction._lineMacroRegExp);\r\n      if (match) {\r\n        const sectionName: string = match[1];\r\n        const replacement: string = this._isSectionCommented(sectionName) ? '// ' : '';\r\n        transformedLine = transformedLine.replace(InitAction._lineMacroRegExp, replacement);\r\n      }\r\n\r\n      // Check for variable expansions\r\n      // Example:  [%RUSH_VERSION%]\r\n      while (match = transformedLine.match(InitAction._variableMacroRegExp)) {\r\n        const variableName: string = match[1];\r\n        const replacement: string = this._expandMacroVariable(variableName);\r\n        transformedLine = transformedLine.replace(InitAction._variableMacroRegExp, replacement);\r\n      }\r\n\r\n      // Verify that all macros were handled\r\n      match = transformedLine.match(InitAction._anyMacroRegExp);\r\n      if (match) {\r\n        // If this happens, please report a Rush bug\r\n        throw new InternalError('The template contains a malformed macro expression: ' + JSON.stringify(match[0]));\r\n      }\r\n\r\n      // If we are inside a block section that is commented out, then insert the \"//\" after indentation\r\n      if (activeBlockSectionName !== undefined) {\r\n        if (this._isSectionCommented(activeBlockSectionName)) {\r\n          // Is the line indented properly?\r\n          if (transformedLine.substr(0, activeBlockIndent.length).trim().length > 0) {\r\n            // If this happens, please report a Rush bug\r\n            throw new InternalError(`The template contains inconsistently indented lines inside`\r\n              + ` the \"${activeBlockSectionName}\" section`);\r\n          }\r\n\r\n          // Insert comment characters after the indentation\r\n          const contentAfterIndent: string = transformedLine.substr(activeBlockIndent.length);\r\n          transformedLine = activeBlockIndent + '// ' + contentAfterIndent;\r\n        }\r\n      }\r\n\r\n      outputLines.push(transformedLine);\r\n    }\r\n\r\n    // Write the output\r\n    FileSystem.writeFile(destinationPath, outputLines.join('\\r\\n'), {\r\n      ensureFolderExists: true\r\n    });\r\n  }\r\n\r\n  private _isSectionCommented(sectionName: string): boolean {\r\n    const value: boolean | undefined = this._commentedBySectionName.get(sectionName);\r\n    if (value === undefined) {\r\n      // If this happens, please report a Rush bug\r\n      throw new InternalError(`The template references an undefined section name ${sectionName}`);\r\n    }\r\n\r\n    return value!;\r\n  }\r\n\r\n  private _expandMacroVariable(variableName: string): string {\r\n    switch (variableName) {\r\n      case '%RUSH_VERSION%':\r\n        return Rush.version;\r\n      default:\r\n        throw new InternalError(`The template references an undefined variable \"${variableName}\"`);\r\n    }\r\n  }\r\n}\r\n"]}