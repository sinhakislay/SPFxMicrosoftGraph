{"version":3,"file":"CheckAction.js","sourceRoot":"","sources":["../../../src/cli/actions/CheckAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AAEjC,qDAAkD;AAClD,6FAA0F;AAC1F,iDAA8C;AAG9C,MAAa,WAAY,SAAQ,+BAAc;IAG7C,YAAY,MAA6B;QACvC,KAAK,CAAC;YACJ,UAAU,EAAE,OAAO;YACnB,OAAO,EAAE,8FAA8F;gBACrG,oCAAoC;YACtC,aAAa,EAAE,yFAAyF;gBACtG,yCAAyC;YAC3C,gCAAgC,EAAE,IAAI;YACtC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,mBAAQ,CAAC,iBAAiB,CAAC,CAAC;IACzE,CAAC;IAES,GAAG;QACX,MAAM,OAAO,GAAuB,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC;QAEnF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,OAAO,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CACvB,YAAY,OAAO,oFAAoF;gBACvG,8BAA+B,OAAQ,sCAAsC,CAC9E,CAAC,CAAC;SACJ;QAED,6CAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACtD,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;SAC7B,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAlCD,kCAkCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { VersionMismatchFinder } from '../../logic/versionMismatch/VersionMismatchFinder';\r\nimport { Variants } from '../../api/Variants';\r\nimport { CommandLineStringParameter } from '@microsoft/ts-command-line';\r\n\r\nexport class CheckAction extends BaseRushAction {\r\n  private _variant: CommandLineStringParameter;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'check',\r\n      summary: 'Checks each project\\'s package.json files and ensures that all dependencies are of the same ' +\r\n        'version throughout the repository.',\r\n      documentation: 'Checks each project\\'s package.json files and ensures that all dependencies are of the ' +\r\n        'same version throughout the repository.',\r\n      safeForSimultaneousRushProcesses: true,\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._variant = this.defineStringParameter(Variants.VARIANT_PARAMETER);\r\n  }\r\n\r\n  protected run(): Promise<void> {\r\n    const variant: string | undefined = this.rushConfiguration.currentInstalledVariant;\r\n\r\n    if (!this._variant.value && variant) {\r\n      console.log(colors.yellow(\r\n        `Variant '${variant}' has been installed, but 'rush check' is currently checking the default variant. ` +\r\n        `Use 'rush check --variant '${ variant }' to check the current installation.`\r\n      ));\r\n    }\r\n\r\n    VersionMismatchFinder.rushCheck(this.rushConfiguration, {\r\n      variant: this._variant.value\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n}\r\n"]}