{"version":3,"file":"BaseRushAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BaseRushAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,yBAAyB;AACzB,6BAA6B;AAE7B,gEAGoC;AAEpC,oEAAwD;AAGxD,qEAAkE;AAElE,yDAAsD;AAmBtD;;;GAGG;AACH,MAAsB,wBAAyB,SAAQ,mCAAiB;IAItE,IAAc,iBAAiB;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;IACxC,CAAC;IAED,IAAc,gBAAgB;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACvC,CAAC;IAED,IAAc,MAAM;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,YAAY,OAA+B;QACzC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,iCAAiC,GAAG,CAAC,CAAC,OAAO,CAAC,gCAAgC,CAAC;IACtF,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE;gBAC3C,IAAI,CAAC,4BAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,MAAM,CAAC,EAAE;oBACzE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,6DAA6D,CAAC,CAAC,CAAC;oBACvF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACjB;aACF;SACF;QAED,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3D,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC;IACpB,CAAC;IAQO,kBAAkB;QACxB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,gDAAgD;YAChD,IAAI,eAAe,GAAuB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9D,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,cAAc,EAAE,MAAM,CAAC;gBAC1F,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC;YACnC,gDAAgD;YAChD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC;SACvC;IACH,CAAC;CACF;AAvDD,4DAuDC;AAED;;GAEG;AACH,MAAsB,cAAe,SAAQ,wBAAwB;IAGnE,IAAc,iBAAiB;QAC7B,OAAO,KAAK,CAAC,iBAAkB,CAAC;IAClC,CAAC;IAES,SAAS;QACjB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,MAAM,qBAAS,CAAC,0BAA0B,EAAE,CAAC;SAC9C;QAED,OAAO,KAAK,CAAC,SAAS,EAAE,CAAC;IAC3B,CAAC;IAED,IAAc,iBAAiB;QAC7B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC5B,IAAI,CAAC,kBAAkB,GAAG,IAAI,qCAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACzE;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;CACF;AAtBD,wCAsBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  CommandLineAction,\r\n  ICommandLineActionOptions\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { LockFile } from '@microsoft/node-core-library';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { EventHooksManager } from '../../logic/EventHooksManager';\r\nimport { RushCommandLineParser } from './../RushCommandLineParser';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { RushGlobalFolder } from '../../api/RushGlobalFolder';\r\n\r\nexport interface IBaseRushActionOptions extends ICommandLineActionOptions {\r\n  /**\r\n   * By default, Rush operations acquire a lock file which prevents multiple commands from executing simultaneously\r\n   * in the same repo folder.  (For example, it would be a mistake to run \"rush install\" and \"rush build\" at the\r\n   * same time.)  If your command makes sense to run concurrently with other operations,\r\n   * set safeForSimultaneousRushProcesses=true to disable this protection.  In particular, this is needed for\r\n   * custom scripts that invoke other Rush commands.\r\n   */\r\n  safeForSimultaneousRushProcesses?: boolean;\r\n\r\n  /**\r\n   * The rush parser.\r\n   */\r\n  parser: RushCommandLineParser;\r\n}\r\n\r\n/**\r\n * The base class for a few specialized Rush command-line actions that\r\n * can be used without a rush.json configuration.\r\n */\r\nexport abstract class BaseConfiglessRushAction extends CommandLineAction {\r\n  private _parser: RushCommandLineParser;\r\n  private _safeForSimultaneousRushProcesses: boolean;\r\n\r\n  protected get rushConfiguration(): RushConfiguration | undefined {\r\n    return this._parser.rushConfiguration;\r\n  }\r\n\r\n  protected get rushGlobalFolder(): RushGlobalFolder {\r\n    return this._parser.rushGlobalFolder;\r\n  }\r\n\r\n  protected get parser(): RushCommandLineParser {\r\n    return this._parser;\r\n  }\r\n\r\n  constructor(options: IBaseRushActionOptions) {\r\n    super(options);\r\n\r\n    this._parser = options.parser;\r\n    this._safeForSimultaneousRushProcesses = !!options.safeForSimultaneousRushProcesses;\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    this._ensureEnvironment();\r\n\r\n    if (this.rushConfiguration) {\r\n      if (!this._safeForSimultaneousRushProcesses) {\r\n        if (!LockFile.tryAcquire(this.rushConfiguration.commonTempFolder, 'rush')) {\r\n          console.log(colors.red(`Another rush command is already running in this repository.`));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(`Starting \"rush ${this.actionName}\"${os.EOL}`);\r\n    return this.run();\r\n  }\r\n\r\n  /**\r\n   * All Rush actions need to implement this method. This method runs after\r\n   * environment has been set up by the base class.\r\n   */\r\n  protected abstract run(): Promise<void>;\r\n\r\n  private _ensureEnvironment(): void {\r\n    if (this.rushConfiguration) {\r\n      /* tslint:disable-next-line:no-string-literal */\r\n      let environmentPath: string | undefined = process.env['PATH'];\r\n      environmentPath = path.join(this.rushConfiguration.commonTempFolder, 'node_modules', '.bin') +\r\n        path.delimiter + environmentPath;\r\n      /* tslint:disable-next-line:no-string-literal */\r\n      process.env['PATH'] = environmentPath;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The base class that most Rush command-line actions should extend.\r\n */\r\nexport abstract class BaseRushAction extends BaseConfiglessRushAction {\r\n  private _eventHooksManager: EventHooksManager;\r\n\r\n  protected get rushConfiguration(): RushConfiguration {\r\n    return super.rushConfiguration!;\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    if (!this.rushConfiguration) {\r\n      throw Utilities.getRushConfigNotFoundError();\r\n    }\r\n\r\n    return super.onExecute();\r\n  }\r\n\r\n  protected get eventHooksManager(): EventHooksManager {\r\n    if (!this._eventHooksManager) {\r\n      this._eventHooksManager = new EventHooksManager(this.rushConfiguration);\r\n    }\r\n\r\n    return this._eventHooksManager;\r\n  }\r\n}\r\n"]}