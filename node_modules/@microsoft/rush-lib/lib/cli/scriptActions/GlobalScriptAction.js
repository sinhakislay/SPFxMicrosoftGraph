"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const os = require("os");
const BaseScriptAction_1 = require("./BaseScriptAction");
const Utilities_1 = require("../../utilities/Utilities");
const AlreadyReportedError_1 = require("../../utilities/AlreadyReportedError");
/**
 * This class implements custom commands that are run once globally for the entire repo
 * (versus bulk commands, which run separately for each project).  The action executes
 * a user-defined script file.
 *
 * @remarks
 * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined "build"
 * and "rebuild" commands are also modeled as bulk commands, because they essentially just
 * invoke scripts from package.json in the same way as a custom command.
 */
class GlobalScriptAction extends BaseScriptAction_1.BaseScriptAction {
    constructor(options) {
        super(options);
        this._shellCommand = options.shellCommand;
    }
    run() {
        return Promise.resolve().then(() => {
            // Collect all custom parameter values
            const customParameterValues = [];
            for (const customParameter of this.customParameters) {
                customParameter.appendToArgList(customParameterValues);
            }
            let shellCommand = this._shellCommand;
            if (customParameterValues.length > 0) {
                shellCommand += ' ' + customParameterValues.join(' ');
            }
            const exitCode = Utilities_1.Utilities.executeLifecycleCommand(shellCommand, {
                rushConfiguration: this.rushConfiguration,
                workingDirectory: this.rushConfiguration.rushJsonFolder,
                initCwd: this.rushConfiguration.commonTempFolder,
                handleOutput: false,
                environmentPathOptions: {
                    includeRepoBin: true
                }
            });
            process.exitCode = exitCode;
            if (exitCode > 0) {
                console.log(os.EOL + colors.red(`The script failed with exit code ${exitCode}`));
                throw new AlreadyReportedError_1.AlreadyReportedError();
            }
        });
    }
    onDefineParameters() {
        this.defineScriptParameters();
    }
}
exports.GlobalScriptAction = GlobalScriptAction;
//# sourceMappingURL=GlobalScriptAction.js.map