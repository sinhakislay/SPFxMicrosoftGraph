{"version":3,"file":"GlobalScriptAction.js","sourceRoot":"","sources":["../../../src/cli/scriptActions/GlobalScriptAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,yBAAyB;AAEzB,yDAAgF;AAChF,yDAAsD;AACtD,+EAA4E;AAS5E;;;;;;;;;GASG;AACH,MAAa,kBAAmB,SAAQ,mCAAgB;IAGtD,YACE,OAAmC;QAEnC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC;IAC5C,CAAC;IAEM,GAAG;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YACjC,sCAAsC;YACtC,MAAM,qBAAqB,GAAa,EAAE,CAAC;YAE3C,KAAK,MAAM,eAAe,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACnD,eAAe,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;aACxD;YAED,IAAI,YAAY,GAAW,IAAI,CAAC,aAAa,CAAC;YAC9C,IAAI,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpC,YAAY,IAAI,GAAG,GAAG,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvD;YAED,MAAM,QAAQ,GAAW,qBAAS,CAAC,uBAAuB,CACxD,YAAY,EACZ;gBACE,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;gBACzC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,cAAc;gBACvD,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,gBAAgB;gBAChD,YAAY,EAAE,KAAK;gBACnB,sBAAsB,EAAE;oBACtB,cAAc,EAAE,IAAI;iBACrB;aACF,CACF,CAAC;YAEF,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAE5B,IAAI,QAAQ,GAAG,CAAC,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,oCAAoC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACjF,MAAM,IAAI,2CAAoB,EAAE,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;CACF;AAjDD,gDAiDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { BaseScriptAction, IBaseScriptActionOptions } from './BaseScriptAction';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\n\r\n/**\r\n * Constructor parameters for GlobalScriptAction.\r\n */\r\nexport interface IGlobalScriptActionOptions extends IBaseScriptActionOptions {\r\n  shellCommand: string;\r\n}\r\n\r\n/**\r\n * This class implements custom commands that are run once globally for the entire repo\r\n * (versus bulk commands, which run separately for each project).  The action executes\r\n * a user-defined script file.\r\n *\r\n * @remarks\r\n * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined \"build\"\r\n * and \"rebuild\" commands are also modeled as bulk commands, because they essentially just\r\n * invoke scripts from package.json in the same way as a custom command.\r\n */\r\nexport class GlobalScriptAction extends BaseScriptAction {\r\n  private _shellCommand: string;\r\n\r\n  constructor(\r\n    options: IGlobalScriptActionOptions\r\n  ) {\r\n    super(options);\r\n    this._shellCommand = options.shellCommand;\r\n  }\r\n\r\n  public run(): Promise<void> {\r\n    return Promise.resolve().then(() => {\r\n      // Collect all custom parameter values\r\n      const customParameterValues: string[] = [];\r\n\r\n      for (const customParameter of this.customParameters) {\r\n        customParameter.appendToArgList(customParameterValues);\r\n      }\r\n\r\n      let shellCommand: string = this._shellCommand;\r\n      if (customParameterValues.length > 0) {\r\n        shellCommand += ' ' + customParameterValues.join(' ');\r\n      }\r\n\r\n      const exitCode: number = Utilities.executeLifecycleCommand(\r\n        shellCommand,\r\n        {\r\n          rushConfiguration: this.rushConfiguration,\r\n          workingDirectory: this.rushConfiguration.rushJsonFolder,\r\n          initCwd: this.rushConfiguration.commonTempFolder,\r\n          handleOutput: false,\r\n          environmentPathOptions: {\r\n            includeRepoBin: true\r\n          }\r\n        }\r\n      );\r\n\r\n      process.exitCode = exitCode;\r\n\r\n      if (exitCode > 0) {\r\n        console.log(os.EOL + colors.red(`The script failed with exit code ${exitCode}`));\r\n        throw new AlreadyReportedError();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this.defineScriptParameters();\r\n  }\r\n}\r\n"]}