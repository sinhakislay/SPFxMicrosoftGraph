"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const colors = require("colors");
const index_1 = require("../../index");
const ts_command_line_1 = require("@microsoft/ts-command-line");
const SetupChecks_1 = require("../../logic/SetupChecks");
const TaskSelector_1 = require("../../logic/TaskSelector");
const Stopwatch_1 = require("../../utilities/Stopwatch");
const AlreadyReportedError_1 = require("../../utilities/AlreadyReportedError");
const BaseScriptAction_1 = require("./BaseScriptAction");
const node_core_library_1 = require("@microsoft/node-core-library");
const TaskRunner_1 = require("../../logic/taskRunner/TaskRunner");
const Utilities_1 = require("../../utilities/Utilities");
/**
 * This class implements bulk commands which are run individually for each project in the repo,
 * possibly in parallel.  The action executes a script found in the project's package.json file.
 *
 * @remarks
 * Bulk commands can be defined via common/config/command-line.json.  Rush's predefined "build"
 * and "rebuild" commands are also modeled as bulk commands, because they essentially just
 * execute scripts from package.json in the same as any custom command.
 */
class BulkScriptAction extends BaseScriptAction_1.BaseScriptAction {
    constructor(options) {
        super(options);
        this._enableParallelism = options.enableParallelism;
        this._ignoreMissingScript = options.ignoreMissingScript;
        this._isIncrementalBuildAllowed = options.incremental;
        this._commandToRun = options.commandToRun || options.actionName;
        this._ignoreDependencyOrder = options.ignoreDependencyOrder;
        this._allowWarningsInSuccessfulBuild = options.allowWarningsInSuccessfulBuild;
    }
    run() {
        if (!node_core_library_1.FileSystem.exists(this.rushConfiguration.rushLinkJsonFilename)) {
            throw new Error(`File not found: ${this.rushConfiguration.rushLinkJsonFilename}` +
                `${os.EOL}Did you run "rush link"?`);
        }
        this._doBeforeTask();
        const stopwatch = Stopwatch_1.Stopwatch.start();
        const isQuietMode = !(this._verboseParameter.value);
        // if this is parallelizable, then use the value from the flag (undefined or a number),
        // if parallelism is not enabled, then restrict to 1 core
        const parallelism = this._enableParallelism
            ? this._parallelismParameter.value
            : '1';
        // Collect all custom parameter values
        const customParameterValues = [];
        for (const customParameter of this.customParameters) {
            customParameter.appendToArgList(customParameterValues);
        }
        const changedProjectsOnly = this._isIncrementalBuildAllowed && this._changedProjectsOnly.value;
        const taskSelector = new TaskSelector_1.TaskSelector({
            rushConfiguration: this.rushConfiguration,
            toFlags: this._mergeProjectsWithVersionPolicy(this._toFlag, this._toVersionPolicy),
            fromFlags: this._mergeProjectsWithVersionPolicy(this._fromFlag, this._fromVersionPolicy),
            commandToRun: this._commandToRun,
            customParameterValues,
            isQuietMode: isQuietMode,
            isIncrementalBuildAllowed: this._isIncrementalBuildAllowed,
            ignoreMissingScript: this._ignoreMissingScript,
            ignoreDependencyOrder: this._ignoreDependencyOrder,
            packageDepsFilename: Utilities_1.Utilities.getPackageDepsFilenameForCommand(this._commandToRun)
        });
        // Register all tasks with the task collection
        const taskCollection = taskSelector.registerTasks();
        const taskRunner = new TaskRunner_1.TaskRunner(taskCollection.getOrderedTasks(), {
            quietMode: isQuietMode,
            parallelism: parallelism,
            changedProjectsOnly: changedProjectsOnly,
            allowWarningsInSuccessfulBuild: this._allowWarningsInSuccessfulBuild
        });
        return taskRunner.execute().then(() => {
            stopwatch.stop();
            console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));
            this._doAfterTask(stopwatch, true);
        }).catch((error) => {
            stopwatch.stop();
            if (error instanceof AlreadyReportedError_1.AlreadyReportedError) {
                console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));
            }
            else {
                if (error && error.message) {
                    console.log('Error: ' + error.message);
                }
                console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));
            }
            this._doAfterTask(stopwatch, false);
            throw new AlreadyReportedError_1.AlreadyReportedError();
        });
    }
    onDefineParameters() {
        if (this._enableParallelism) {
            this._parallelismParameter = this.defineStringParameter({
                parameterLongName: '--parallelism',
                parameterShortName: '-p',
                argumentName: 'COUNT',
                description: 'Specify the number of concurrent build processes'
                    + ' The value "max" can be specified to indicate the number of CPU cores.'
                    + ' If this parameter omitted, the default value depends on the operating system and number of CPU cores.'
            });
        }
        this._toFlag = this.defineStringListParameter({
            parameterLongName: '--to',
            parameterShortName: '-t',
            argumentName: 'PROJECT1',
            description: 'Run command in the specified project and all of its dependencies'
        });
        this._fromVersionPolicy = this.defineStringListParameter({
            parameterLongName: '--from-version-policy',
            argumentName: 'VERSION_POLICY_NAME',
            description: 'Run command in all projects with the specified version policy '
                + 'and all projects that directly or indirectly depend on projects with the specified version policy'
        });
        this._toVersionPolicy = this.defineStringListParameter({
            parameterLongName: '--to-version-policy',
            argumentName: 'VERSION_POLICY_NAME',
            description: 'Run command in all projects with the specified version policy and all of their dependencies'
        });
        this._fromFlag = this.defineStringListParameter({
            parameterLongName: '--from',
            parameterShortName: '-f',
            argumentName: 'PROJECT2',
            description: 'Run command in all projects that directly or indirectly depend on the specified project'
        });
        this._verboseParameter = this.defineFlagParameter({
            parameterLongName: '--verbose',
            parameterShortName: '-v',
            description: 'Display the logs during the build, rather than just displaying the build status summary'
        });
        if (this._isIncrementalBuildAllowed) {
            this._changedProjectsOnly = this.defineFlagParameter({
                parameterLongName: '--changed-projects-only',
                parameterShortName: '-o',
                description: 'If specified, the incremental build will only rebuild projects that have changed, '
                    + 'but not any projects that directly or indirectly depend on the changed package.'
            });
        }
        this.defineScriptParameters();
    }
    _mergeProjectsWithVersionPolicy(flags, versionPolicies) {
        const projects = [...flags.values];
        if (versionPolicies.values && versionPolicies.values.length > 0) {
            this.rushConfiguration.projects.forEach(project => {
                const matches = versionPolicies.values.some(policyName => {
                    return project.versionPolicyName === policyName;
                });
                if (matches) {
                    projects.push(project.packageName);
                }
            });
        }
        return projects;
    }
    _doBeforeTask() {
        if (this.actionName !== 'build' && this.actionName !== 'rebuild') {
            // Only collects information for built-in tasks like build or rebuild.
            return;
        }
        SetupChecks_1.SetupChecks.validate(this.rushConfiguration);
        this.eventHooksManager.handle(index_1.Event.preRushBuild, this.parser.isDebug);
    }
    _doAfterTask(stopwatch, success) {
        if (this.actionName !== 'build' && this.actionName !== 'rebuild') {
            // Only collects information for built-in tasks like build or rebuild.
            return;
        }
        this._collectTelemetry(stopwatch, success);
        this.parser.flushTelemetry();
        this.eventHooksManager.handle(index_1.Event.postRushBuild, this.parser.isDebug);
    }
    _collectTelemetry(stopwatch, success) {
        const extraData = {
            command_to: (this._toFlag.values.length > 0).toString(),
            command_from: (this._fromFlag.values.length > 0).toString()
        };
        for (const customParameter of this.customParameters) {
            switch (customParameter.kind) {
                case ts_command_line_1.CommandLineParameterKind.Flag:
                case ts_command_line_1.CommandLineParameterKind.Choice:
                case ts_command_line_1.CommandLineParameterKind.String:
                case ts_command_line_1.CommandLineParameterKind.Integer:
                    // tslint:disable-next-line:no-any
                    extraData[customParameter.longName] = JSON.stringify(customParameter.value);
                    break;
                default:
                    extraData[customParameter.longName] = '?';
            }
        }
        if (this.parser.telemetry) {
            this.parser.telemetry.log({
                name: this.actionName,
                duration: stopwatch.duration,
                result: success ? 'Succeeded' : 'Failed',
                extraData
            });
        }
    }
}
exports.BulkScriptAction = BulkScriptAction;
//# sourceMappingURL=BulkScriptAction.js.map