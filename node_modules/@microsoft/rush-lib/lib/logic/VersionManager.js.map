{"version":3,"file":"VersionManager.js","sourceRoot":"","sources":["../../src/logic/VersionManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport { cloneDeep } from 'lodash';\r\nimport {\r\n  IPackageJson,\r\n  JsonFile,\r\n  FileConstants\r\n} from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  VersionPolicy,\r\n  BumpType,\r\n  LockStepVersionPolicy\r\n} from '../api/VersionPolicy';\r\nimport { ChangeFile } from '../api/ChangeFile';\r\nimport { ChangeType, IChangeInfo } from '../api/ChangeManagement';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { VersionPolicyConfiguration } from '../api/VersionPolicyConfiguration';\r\nimport { PublishUtilities } from './PublishUtilities';\r\nimport { ChangeManager } from './ChangeManager';\r\n\r\nexport class VersionManager {\r\n  private _versionPolicyConfiguration: VersionPolicyConfiguration;\r\n  private _updatedProjects: Map<string, IPackageJson>;\r\n  private _changeFiles: Map<string, ChangeFile>;\r\n\r\n  constructor(\r\n    private _rushConfiguration: RushConfiguration,\r\n    private _userEmail: string,\r\n    _versionPolicyConfiguration?: VersionPolicyConfiguration\r\n  ) {\r\n    this._versionPolicyConfiguration = _versionPolicyConfiguration\r\n      ? _versionPolicyConfiguration\r\n      : this._rushConfiguration.versionPolicyConfiguration;\r\n\r\n    this._updatedProjects = new Map<string, IPackageJson>();\r\n    this._changeFiles = new Map<string, ChangeFile>();\r\n  }\r\n\r\n  /**\r\n   * Ensures project versions follow the provided version policy. If version policy is not\r\n   * provided, all projects will have their version checked according to the associated version policy.\r\n   * package.json files will be updated if needed.\r\n   * This method does not commit changes.\r\n   * @param versionPolicyName -- version policy name\r\n   * @param shouldCommit -- should update files to disk\r\n   * @param force -- update even when project version is higher than policy version.\r\n   */\r\n  public ensure(versionPolicyName?: string, shouldCommit?: boolean, force?: boolean): void {\r\n    this._ensure(versionPolicyName, shouldCommit, force);\r\n  }\r\n\r\n  /**\r\n   * Bumps versions following version policies.\r\n   *\r\n   * @param lockStepVersionPolicyName - a specified lock step version policy name. Without this value,\r\n   * versions for all lock step policies and all individual policies will be bumped.\r\n   * With this value, only the specified lock step policy will be bumped along with all individual policies.\r\n   * @param bumpType - overrides the default bump type and only works for lock step policy\r\n   * @param identifier - overrides the prerelease identifier and only works for lock step policy\r\n   * @param shouldCommit - whether the changes will be written to disk\r\n   */\r\n  public bump(lockStepVersionPolicyName?: string,\r\n    bumpType?: BumpType,\r\n    identifier?: string,\r\n    shouldCommit?: boolean\r\n  ): void {\r\n    // Bump all the lock step version policies.\r\n    this._versionPolicyConfiguration.bump(lockStepVersionPolicyName, bumpType, identifier, shouldCommit);\r\n\r\n    // Update packages and generate change files due to lock step bump.\r\n    this._ensure(lockStepVersionPolicyName, shouldCommit);\r\n\r\n    // Refresh rush configuration\r\n    this._rushConfiguration = RushConfiguration.loadFromConfigurationFile(this._rushConfiguration.rushJsonFile);\r\n\r\n    // Update projects based on individual policies\r\n    const changeManager: ChangeManager = new ChangeManager(this._rushConfiguration,\r\n      this._getLockStepProjects());\r\n    changeManager.load(this._rushConfiguration.changesFolder);\r\n    if (changeManager.hasChanges()) {\r\n      changeManager.validateChanges(this._versionPolicyConfiguration);\r\n      changeManager.apply(!!shouldCommit)!.forEach(packageJson => {\r\n        this._updatedProjects.set(packageJson.name, packageJson);\r\n      });\r\n      changeManager.updateChangelog(!!shouldCommit);\r\n    }\r\n  }\r\n\r\n  public get updatedProjects(): Map<string, IPackageJson> {\r\n    return this._updatedProjects;\r\n  }\r\n\r\n  public get changeFiles(): Map<string, ChangeFile> {\r\n    return this._changeFiles;\r\n  }\r\n\r\n  private _ensure(versionPolicyName?: string, shouldCommit?: boolean, force?: boolean): void {\r\n    this._updateVersionsByPolicy(versionPolicyName, force);\r\n\r\n    // Update all dependencies if needed.\r\n    this._updateDependencies();\r\n\r\n    if (shouldCommit) {\r\n      this._updatePackageJsonFiles();\r\n      this._changeFiles.forEach((changeFile) => {\r\n        changeFile.writeSync();\r\n      });\r\n    }\r\n  }\r\n\r\n  private _getLockStepProjects(): Set<string> | undefined {\r\n    const lockStepVersionPolicyNames: Set<string> = new Set<string>();\r\n\r\n    this._versionPolicyConfiguration.versionPolicies.forEach((versionPolicy) => {\r\n      if (versionPolicy instanceof LockStepVersionPolicy) {\r\n        lockStepVersionPolicyNames.add(versionPolicy.policyName);\r\n      }\r\n    });\r\n    const lockStepProjectNames: Set<string> = new Set<string>();\r\n    this._rushConfiguration.projects.forEach((rushProject) => {\r\n      if (lockStepVersionPolicyNames.has(rushProject.versionPolicyName!)) {\r\n        lockStepProjectNames.add(rushProject.packageName);\r\n      }\r\n    });\r\n    return lockStepProjectNames;\r\n  }\r\n\r\n  private _updateVersionsByPolicy(versionPolicyName?: string, force?: boolean): void {\r\n    // Update versions based on version policy\r\n    this._rushConfiguration.projects.forEach(rushProject => {\r\n      const projectVersionPolicyName: string | undefined = rushProject.versionPolicyName;\r\n      if (projectVersionPolicyName &&\r\n        (!versionPolicyName || projectVersionPolicyName === versionPolicyName)) {\r\n        const versionPolicy: VersionPolicy = this._versionPolicyConfiguration.getVersionPolicy(\r\n          projectVersionPolicyName);\r\n        const updatedProject: IPackageJson | undefined = versionPolicy.ensure(rushProject.packageJson, force);\r\n        if (updatedProject) {\r\n          this._updatedProjects.set(updatedProject.name, updatedProject);\r\n          // No need to create an entry for prerelease version bump.\r\n          if (!this._isPrerelease(updatedProject.version) && rushProject.isMainProject) {\r\n            this._addChangeInfo(updatedProject.name,\r\n              [this._createChangeInfo(updatedProject, rushProject)]);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _isPrerelease(version: string): boolean {\r\n    return !!semver.prerelease(version);\r\n  }\r\n\r\n  private _addChangeInfo(packageName: string,\r\n    changeInfos: IChangeInfo[]\r\n  ): void {\r\n    if (!changeInfos.length) {\r\n      return;\r\n    }\r\n    let changeFile: ChangeFile | undefined = this._changeFiles.get(packageName);\r\n    if (!changeFile) {\r\n      changeFile = new ChangeFile({\r\n        changes: [],\r\n        packageName: packageName,\r\n        email: this._userEmail\r\n      }, this._rushConfiguration);\r\n      this._changeFiles.set(packageName, changeFile);\r\n    }\r\n    changeInfos.forEach((changeInfo) => {\r\n      changeFile!.addChange(changeInfo);\r\n    });\r\n  }\r\n\r\n  private _updateDependencies(): void {\r\n    this._rushConfiguration.projects.forEach(rushProject => {\r\n      let clonedProject: IPackageJson | undefined = this._updatedProjects.get(rushProject.packageName);\r\n      let projectVersionChanged: boolean = true;\r\n      if (!clonedProject) {\r\n        clonedProject = cloneDeep(rushProject.packageJson);\r\n        projectVersionChanged = false;\r\n      }\r\n      this._updateProjectAllDependencies(rushProject, clonedProject, projectVersionChanged);\r\n    });\r\n  }\r\n\r\n  private _updateProjectAllDependencies(\r\n    rushProject: RushConfigurationProject,\r\n    clonedProject: IPackageJson,\r\n    projectVersionChanged: boolean\r\n  ): void {\r\n    if (!clonedProject.dependencies && !clonedProject.devDependencies) {\r\n      return;\r\n    }\r\n    const changes: IChangeInfo[] = [];\r\n    let updated: boolean = false;\r\n    if (this._updateProjectDependencies(clonedProject.dependencies, changes,\r\n      clonedProject, rushProject, projectVersionChanged)\r\n    ) {\r\n      updated = true;\r\n    }\r\n    if (this._updateProjectDependencies(clonedProject.devDependencies, changes,\r\n      clonedProject, rushProject, projectVersionChanged)\r\n    ) {\r\n      updated = true;\r\n    }\r\n    if (this._updateProjectDependencies(clonedProject.peerDependencies, changes,\r\n      clonedProject, rushProject, projectVersionChanged)\r\n    ) {\r\n      updated = true;\r\n    }\r\n\r\n    if (updated) {\r\n      this._updatedProjects.set(clonedProject.name, clonedProject);\r\n\r\n      this._addChangeInfo(clonedProject.name, changes);\r\n    }\r\n  }\r\n\r\n  private _updateProjectDependencies(dependencies: { [key: string]: string; } | undefined,\r\n    changes: IChangeInfo[],\r\n    clonedProject: IPackageJson,\r\n    rushProject: RushConfigurationProject,\r\n    projectVersionChanged: boolean\r\n  ): boolean {\r\n    if (!dependencies) {\r\n      return false;\r\n    }\r\n    let updated: boolean = false;\r\n    this._updatedProjects.forEach((updatedDependentProject, updatedDependentProjectName) => {\r\n      if (dependencies[updatedDependentProjectName]) {\r\n        if (rushProject.cyclicDependencyProjects.has(updatedDependentProjectName)) {\r\n          // Skip if cyclic\r\n          console.log(`Found cyclic ${rushProject.packageName} ${updatedDependentProjectName}`);\r\n          return;\r\n        }\r\n\r\n        const oldDependencyVersion: string = dependencies[updatedDependentProjectName];\r\n        const newDependencyVersion: string = PublishUtilities.getNewDependencyVersion(\r\n          dependencies,\r\n          updatedDependentProjectName,\r\n          updatedDependentProject.version\r\n        );\r\n\r\n        if (newDependencyVersion !== oldDependencyVersion) {\r\n          updated = true;\r\n          if (this._shouldTrackDependencyChange(rushProject, updatedDependentProjectName)) {\r\n            this._trackDependencyChange(changes, clonedProject, projectVersionChanged,\r\n              updatedDependentProject,\r\n              oldDependencyVersion,\r\n              newDependencyVersion\r\n            );\r\n          }\r\n          dependencies[updatedDependentProjectName] = newDependencyVersion;\r\n        }\r\n      }\r\n    });\r\n    return updated;\r\n  }\r\n\r\n  private _shouldTrackDependencyChange(\r\n    rushProject: RushConfigurationProject,\r\n    dependencyName: string\r\n  ): boolean {\r\n    const dependencyRushProject: RushConfigurationProject | undefined =\r\n      this._rushConfiguration.projectsByName.get(dependencyName);\r\n\r\n    return !!dependencyRushProject && rushProject.shouldPublish &&\r\n      (!rushProject.versionPolicy ||\r\n        !rushProject.versionPolicy.isLockstepped ||\r\n        rushProject.isMainProject && (dependencyRushProject.versionPolicyName !== rushProject.versionPolicyName));\r\n  }\r\n\r\n  private _trackDependencyChange(\r\n    changes: IChangeInfo[],\r\n    clonedProject: IPackageJson,\r\n    projectVersionChanged: boolean,\r\n    updatedDependentProject: IPackageJson,\r\n    oldDependencyVersion: string,\r\n    newDependencyVersion: string\r\n  ): void {\r\n    if (!semver.satisfies(updatedDependentProject.version, oldDependencyVersion) && !projectVersionChanged) {\r\n      this._addChange(changes,\r\n        {\r\n          changeType: ChangeType.patch,\r\n          packageName: clonedProject.name\r\n        }\r\n      );\r\n    }\r\n\r\n    // If current version is not a prerelease version and new dependency is also not a prerelease version,\r\n    // add change entry. Otherwise, too many changes will be created for frequent releases.\r\n    if (!this._isPrerelease(updatedDependentProject.version) && !this._isPrerelease(clonedProject.version)) {\r\n      this._addChange(changes,\r\n        {\r\n          changeType: ChangeType.dependency,\r\n          comment: `Dependency ${updatedDependentProject.name} version bump from ${oldDependencyVersion}` +\r\n            ` to ${newDependencyVersion}.`,\r\n          packageName: clonedProject.name\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  private _addChange(changes: IChangeInfo[], newChange: IChangeInfo): void {\r\n    const exists: boolean = changes.some((changeInfo) => {\r\n      return (changeInfo.author === newChange.author &&\r\n        changeInfo.changeType === newChange.changeType &&\r\n        changeInfo.comment === newChange.comment &&\r\n        changeInfo.commit === newChange.commit &&\r\n        changeInfo.packageName === newChange.packageName &&\r\n        changeInfo.type === newChange.type\r\n      );\r\n    });\r\n    if (!exists) {\r\n      changes.push(newChange);\r\n    }\r\n  }\r\n\r\n  private _updatePackageJsonFiles(): void {\r\n    this._updatedProjects.forEach((newPackageJson, packageName) => {\r\n      const rushProject: RushConfigurationProject | undefined = this._rushConfiguration.getProjectByName(packageName);\r\n      // Update package.json\r\n      if (rushProject) {\r\n        const packagePath: string = path.join(rushProject.projectFolder, FileConstants.PackageJson);\r\n        JsonFile.save(newPackageJson, packagePath);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _createChangeInfo(newPackageJson: IPackageJson,\r\n    rushProject: RushConfigurationProject\r\n  ): IChangeInfo {\r\n    return {\r\n      changeType: ChangeType.none,\r\n      newVersion: newPackageJson.version,\r\n      packageName: newPackageJson.name,\r\n      comment: ''\r\n    };\r\n  }\r\n}"]}