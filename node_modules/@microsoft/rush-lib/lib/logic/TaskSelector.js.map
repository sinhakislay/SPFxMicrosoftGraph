{"version":3,"file":"TaskSelector.js","sourceRoot":"","sources":["../../src/logic/TaskSelector.ts"],"names":[],"mappings":";;AAKA,oEAAwD;AAExD,iEAAwF;AACxF,mEAAgE;AAChE,gEAA6D;AAe7D;;;;;GAKG;AACH,MAAa,YAAY;IAOvB,YAAY,OAAiC;QAC3C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,sBAAsB,GAAG,IAAI,6CAAqB,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACnF,IAAI,CAAC,eAAe,GAAG,IAAI,+BAAc,CAAC;YACxC,SAAS,EAAE,OAAO,CAAC,WAAW;SAC/B,CAAC,CAAC;QAEH,IAAI;YACF,IAAI,CAAC,aAAa,GAAG,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;SAC1F;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,oBAAoB,IAAI;kBACvF,+CAA+C,CAAC,CAAC;SACtD;IACH,CAAC;IAEM,aAAa;QAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC9C;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SAClD;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9E,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEO,gBAAgB,CAAC,OAA8B;QACrD,MAAM,YAAY,GAAgB,IAAI,GAAG,EAAU,CAAC;QAEpD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,SAAS,GACb,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;YACrE,IAAI,CAAC,SAAS,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,gBAAgB,MAAM,+BAA+B,CAAC,CAAC;aACxE;YAED,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;SACnE;QAED,wCAAwC;QACxC,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;YACrC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;SAClF;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE;YACxC,iDAAiD;YACjD,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;gBACrC,IAAI,CAAC,eAAe,CAAC,eAAe,CAClC,UAAU,EACV,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,CAChD,CAAC;aACH;SACF;IACH,CAAC;IAEO,kBAAkB,CAAC,SAAgC;QACzD,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAgB,IAAI,GAAG,EAAU,CAAC;QAElD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,MAAM,WAAW,GACb,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YACzE,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,gBAAgB,QAAQ,+BAA+B,CAAC,CAAC;aAC1E;YAED,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;SACjE;QAED,qCAAqC;QACrC,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;SACjF;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE;YACxC,0EAA0E;YAC1E,mGAAmG;YACnG,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gBAClC,IAAI,CAAC,eAAe,CAAC,eAAe,CAClC,SAAS,EACT,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CACpF,CAAC;aACH;SACF;IACH,CAAC;IAEO,YAAY;QAClB,qBAAqB;QACrB,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,EAAE;YAClE,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE;YACxC,iDAAiD;YACjD,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;gBACpE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;aAC/F;SACF;IACH,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,OAAe,EAAE,MAAmB;QAClE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACxB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEpB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE;gBACrE,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;aAClD;SACF;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAe,EAAE,MAAmB;QAChE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACxB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEpB,KAAK,MAAM,SAAS,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,GAAG,EAAU,CAAC,EAAE;gBAC/E,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;aAC/C;SACF;IACH,CAAC;IAED;;OAEG;IACK,oBAAoB;QAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAuB,CAAC;QAErD,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;YAChE,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBACxD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBACjC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;iBACjD;gBAED,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC5C;SACF;IACH,CAAC;IAEO,aAAa,CAAC,OAA6C;QACjE,IAAI,OAAO,EAAE;YACX,MAAM,WAAW,GAAgB,IAAI,yBAAW,CAAC;gBAC/C,WAAW,EAAE,OAAO;gBACpB,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB;gBAClD,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;gBAC3C,yBAAyB,EAAE,IAAI,CAAC,QAAQ,CAAC,yBAAyB;gBAClE,qBAAqB,EAAE,IAAI,CAAC,sBAAsB;gBAClD,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC,mBAAmB;aACvD,CAAC,CAAC;YAEH,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;gBACnD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;aAC3C;SACF;IACH,CAAC;IAEO,eAAe,CAAC,WAAqC;QAC3D,MAAM,MAAM,GAAuB,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAEnG,IAAI,MAAM,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE;YAC9D,2CAA2C;YAC3C,MAAM,IAAI,KAAK,CAAC,gBAAgB,WAAW,CAAC,WAAW,wBAAwB,IAAI,CAAC,QAAQ,CAAC,YAAY,wDAAwD,CAAC,CAAC;SACpK;QAED,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,EAAE,CAAC;SACX;QAED,MAAM,WAAW,GAAW,GAAG,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACzF,OAAO,OAAO,CAAC,QAAQ,KAAK,OAAO;YACjC,CAAC,CAAC,sCAAwB,CAAC,WAAW,CAAC;YACvC,CAAC,CAAC,WAAW,CAAC;IAClB,CAAC;IAEO,iBAAiB,CAAC,WAAqC,EAAE,MAAc;QAC7E,6CAA6C;QAC7C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,EAAE;YACpC,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,UAAU,GAAW,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEnE,2CAA2C;QAC3C,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;YACnD,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AA5MD,oCA4MC","sourcesContent":["import {\r\n  RushConfiguration,\r\n  IRushLinkJson\r\n} from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport { ProjectTask, convertSlashesForWindows } from '../logic/taskRunner/ProjectTask';\r\nimport { PackageChangeAnalyzer } from './PackageChangeAnalyzer';\r\nimport { TaskCollection } from './taskRunner/TaskCollection';\r\n\r\nexport interface ITaskSelectorConstructor {\r\n  rushConfiguration: RushConfiguration;\r\n  toFlags: ReadonlyArray<string>;\r\n  fromFlags: ReadonlyArray<string>;\r\n  commandToRun: string;\r\n  customParameterValues: string[];\r\n  isQuietMode: boolean;\r\n  isIncrementalBuildAllowed: boolean;\r\n  ignoreMissingScript: boolean;\r\n  ignoreDependencyOrder: boolean;\r\n  packageDepsFilename: string;\r\n}\r\n\r\n/**\r\n * This class is responsible for:\r\n *  - based on to/from flags, solving the dependency graph and figuring out which projects need to be run\r\n *  - creating a ProjectTask for each project that needs to be built\r\n *  - registering the necessary ProjectTasks with the TaskRunner, which actually orchestrates execution\r\n */\r\nexport class TaskSelector {\r\n  private _taskCollection: TaskCollection;\r\n  private _dependentList: Map<string, Set<string>>;\r\n  private _rushLinkJson: IRushLinkJson;\r\n  private _options: ITaskSelectorConstructor;\r\n  private _packageChangeAnalyzer: PackageChangeAnalyzer;\r\n\r\n  constructor(options: ITaskSelectorConstructor) {\r\n    this._options = options;\r\n\r\n    this._packageChangeAnalyzer = new PackageChangeAnalyzer(options.rushConfiguration);\r\n    this._taskCollection = new TaskCollection({\r\n      quietMode: options.isQuietMode\r\n    });\r\n\r\n    try {\r\n      this._rushLinkJson = JsonFile.load(this._options.rushConfiguration.rushLinkJsonFilename);\r\n    } catch (error) {\r\n      throw new Error(`Could not read \"${this._options.rushConfiguration.rushLinkJsonFilename}\".`\r\n        + ` Did you run \"rush install\" or \"rush update\"?`);\r\n    }\r\n  }\r\n\r\n  public registerTasks(): TaskCollection {\r\n    if (this._options.toFlags.length > 0) {\r\n      this._registerToFlags(this._options.toFlags);\r\n    }\r\n    if (this._options.fromFlags.length > 0) {\r\n      this._registerFromFlags(this._options.fromFlags);\r\n    }\r\n    if (this._options.toFlags.length === 0 && this._options.fromFlags.length === 0) {\r\n      this._registerAll();\r\n    }\r\n\r\n    return this._taskCollection;\r\n  }\r\n\r\n  private _registerToFlags(toFlags: ReadonlyArray<string>): void {\r\n    const dependencies: Set<string> = new Set<string>();\r\n\r\n    for (const toFlag of toFlags) {\r\n      const toProject: RushConfigurationProject | undefined =\r\n        this._options.rushConfiguration.findProjectByShorthandName(toFlag);\r\n      if (!toProject) {\r\n        throw new Error(`The project '${toFlag}' does not exist in rush.json`);\r\n      }\r\n\r\n      this._collectAllDependencies(toProject.packageName, dependencies);\r\n    }\r\n\r\n    // Register any dependencies it may have\r\n    for (const dependency of dependencies) {\r\n      this._registerTask(this._options.rushConfiguration.getProjectByName(dependency));\r\n    }\r\n\r\n    if (!this._options.ignoreDependencyOrder) {\r\n      // Add ordering relationships for each dependency\r\n      for (const dependency of dependencies) {\r\n        this._taskCollection.addDependencies(\r\n          dependency,\r\n          this._rushLinkJson.localLinks[dependency] || []\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _registerFromFlags(fromFlags: ReadonlyArray<string>): void {\r\n    this._buildDependentGraph();\r\n    const dependents: Set<string> = new Set<string>();\r\n\r\n    for (const fromFlag of fromFlags) {\r\n      const fromProject: RushConfigurationProject | undefined\r\n        = this._options.rushConfiguration.findProjectByShorthandName(fromFlag);\r\n      if (!fromProject) {\r\n        throw new Error(`The project '${fromFlag}' does not exist in rush.json`);\r\n      }\r\n\r\n      this._collectAllDependents(fromProject.packageName, dependents);\r\n    }\r\n\r\n    // Register all downstream dependents\r\n    for (const dependent of dependents) {\r\n      this._registerTask(this._options.rushConfiguration.getProjectByName(dependent));\r\n    }\r\n\r\n    if (!this._options.ignoreDependencyOrder) {\r\n      // Only add ordering relationships for projects which have been registered\r\n      // e.g. package C may depend on A & B, but if we are only building A's downstream, we will ignore B\r\n      for (const dependent of dependents) {\r\n        this._taskCollection.addDependencies(\r\n          dependent,\r\n          (this._rushLinkJson.localLinks[dependent] || []).filter(dep => dependents.has(dep))\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _registerAll(): void {\r\n    // Register all tasks\r\n    for (const rushProject of this._options.rushConfiguration.projects) {\r\n      this._registerTask(rushProject);\r\n    }\r\n\r\n    if (!this._options.ignoreDependencyOrder) {\r\n      // Add ordering relationships for each dependency\r\n      for (const projectName of Object.keys(this._rushLinkJson.localLinks)) {\r\n        this._taskCollection.addDependencies(projectName, this._rushLinkJson.localLinks[projectName]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects all upstream dependencies for a certain project\r\n   */\r\n  private _collectAllDependencies(project: string, result: Set<string>): void {\r\n    if (!result.has(project)) {\r\n      result.add(project);\r\n\r\n      for (const dependency of this._rushLinkJson.localLinks[project] || []) {\r\n        this._collectAllDependencies(dependency, result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects all downstream dependents of a certain project\r\n   */\r\n  private _collectAllDependents(project: string, result: Set<string>): void {\r\n    if (!result.has(project)) {\r\n      result.add(project);\r\n\r\n      for (const dependent of (this._dependentList.get(project) || new Set<string>())) {\r\n        this._collectAllDependents(dependent, result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inverts the localLinks to arrive at the dependent graph. This helps when using the --from flag\r\n   */\r\n  private _buildDependentGraph(): void {\r\n    this._dependentList = new Map<string, Set<string>>();\r\n\r\n    for (const project of Object.keys(this._rushLinkJson.localLinks)) {\r\n      for (const dep of this._rushLinkJson.localLinks[project]) {\r\n        if (!this._dependentList.has(dep)) {\r\n          this._dependentList.set(dep, new Set<string>());\r\n        }\r\n\r\n        this._dependentList.get(dep)!.add(project);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _registerTask(project: RushConfigurationProject | undefined): void {\r\n    if (project) {\r\n      const projectTask: ProjectTask = new ProjectTask({\r\n        rushProject: project,\r\n        rushConfiguration: this._options.rushConfiguration,\r\n        commandToRun: this._getScriptToRun(project),\r\n        isIncrementalBuildAllowed: this._options.isIncrementalBuildAllowed,\r\n        packageChangeAnalyzer: this._packageChangeAnalyzer,\r\n        packageDepsFilename: this._options.packageDepsFilename\r\n      });\r\n\r\n      if (!this._taskCollection.hasTask(projectTask.name)) {\r\n        this._taskCollection.addTask(projectTask);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _getScriptToRun(rushProject: RushConfigurationProject): string {\r\n    const script: string | undefined = this._getScriptCommand(rushProject, this._options.commandToRun);\r\n\r\n    if (script === undefined && !this._options.ignoreMissingScript) {\r\n      // tslint:disable-next-line:max-line-length\r\n      throw new Error(`The project [${rushProject.packageName}] does not define a '${this._options.commandToRun}' command in the 'scripts' section of its package.json`);\r\n    }\r\n\r\n    if (!script) {\r\n      return '';\r\n    }\r\n\r\n    const taskCommand: string = `${script} ${this._options.customParameterValues.join(' ')}`;\r\n    return process.platform === 'win32'\r\n      ? convertSlashesForWindows(taskCommand)\r\n      : taskCommand;\r\n  }\r\n\r\n  private _getScriptCommand(rushProject: RushConfigurationProject, script: string): string | undefined {\r\n    // tslint:disable-next-line:no-string-literal\r\n    if (!rushProject.packageJson.scripts) {\r\n      return undefined;\r\n    }\r\n\r\n    const rawCommand: string = rushProject.packageJson.scripts[script];\r\n\r\n    // tslint:disable-next-line:no-null-keyword\r\n    if (rawCommand === undefined || rawCommand === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return rawCommand;\r\n  }\r\n}\r\n"]}