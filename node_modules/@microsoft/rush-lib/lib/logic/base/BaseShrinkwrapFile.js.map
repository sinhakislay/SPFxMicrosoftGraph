{"version":3,"file":"BaseShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/base/BaseShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as semver from 'semver';\r\nimport { PackageName, FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { DependencySpecifier } from '../DependencySpecifier';\r\n\r\n/**\r\n * This class is a parser for both npm's npm-shrinkwrap.json and pnpm's pnpm-lock.yaml file formats.\r\n */\r\nexport abstract class BaseShrinkwrapFile {\r\n  protected _alreadyWarnedSpecs: Set<string> = new Set<string>();\r\n\r\n  protected static tryGetValue<T>(dictionary: { [key2: string]: T }, key: string): T | undefined {\r\n    if (dictionary.hasOwnProperty(key)) {\r\n      return dictionary[key];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Serializes and saves the shrinkwrap file to specified location\r\n   */\r\n  public save(filePath: string): void {\r\n    FileSystem.writeFile(filePath, this.serialize());\r\n  }\r\n\r\n  /**\r\n   * Returns true if the shrinkwrap file includes a top-level package that would satisfy the specified\r\n   * package name and SemVer version range\r\n   *\r\n   * @virtual\r\n   */\r\n  public hasCompatibleTopLevelDependency(dependencySpecifier: DependencySpecifier): boolean {\r\n    const shrinkwrapDependency: DependencySpecifier | undefined\r\n      = this.getTopLevelDependencyVersion(dependencySpecifier.packageName);\r\n    if (!shrinkwrapDependency) {\r\n      return false;\r\n    }\r\n\r\n    return this._checkDependencyVersion(dependencySpecifier, shrinkwrapDependency);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the shrinkwrap file includes a package that would satisfying the specified\r\n   * package name and SemVer version range.  By default, the dependencies are resolved by looking\r\n   * at the root of the node_modules folder described by the shrinkwrap file.  However, if\r\n   * tempProjectName is specified, then the resolution will start in that subfolder.\r\n   *\r\n   * Consider this example:\r\n   *\r\n   * - node_modules\\\r\n   *   - temp-project\\\r\n   *     - lib-a@1.2.3\r\n   *     - lib-b@1.0.0\r\n   *   - lib-b@2.0.0\r\n   *\r\n   * In this example, hasCompatibleDependency(\"lib-b\", \">= 1.1.0\", \"temp-project\") would fail\r\n   * because it finds lib-b@1.0.0 which does not satisfy the pattern \">= 1.1.0\".\r\n   *\r\n   * @virtual\r\n   */\r\n  public tryEnsureCompatibleDependency(dependencySpecifier: DependencySpecifier, tempProjectName: string): boolean {\r\n    const shrinkwrapDependency: DependencySpecifier | undefined =\r\n      this.tryEnsureDependencyVersion(dependencySpecifier, tempProjectName);\r\n    if (!shrinkwrapDependency) {\r\n      return false;\r\n    }\r\n\r\n    return this._checkDependencyVersion(dependencySpecifier, shrinkwrapDependency);\r\n  }\r\n\r\n  /**\r\n   * Returns the list of temp projects defined in this file.\r\n   * Example: [ '@rush-temp/project1', '@rush-temp/project2' ]\r\n   *\r\n   * @virtual\r\n   */\r\n  public abstract getTempProjectNames(): ReadonlyArray<string>;\r\n\r\n  /** @virtual */\r\n  protected abstract tryEnsureDependencyVersion(dependencySpecifier: DependencySpecifier,\r\n    tempProjectName: string): DependencySpecifier | undefined;\r\n\r\n  /** @virtual */\r\n  protected abstract getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined;\r\n\r\n  /** @virtual */\r\n  protected abstract serialize(): string;\r\n\r\n  protected _getTempProjectNames(dependencies: { [key: string]: {} } ): ReadonlyArray<string> {\r\n    const result: string[] = [];\r\n    for (const key of Object.keys(dependencies)) {\r\n      // If it starts with @rush-temp, then include it:\r\n      if (PackageName.getScope(key) === RushConstants.rushTempNpmScope) {\r\n        result.push(key);\r\n      }\r\n    }\r\n    result.sort();  // make the result deterministic\r\n    return result;\r\n  }\r\n\r\n  private _checkDependencyVersion(projectDependency: DependencySpecifier,\r\n    shrinkwrapDependency: DependencySpecifier): boolean {\r\n\r\n    let normalizedProjectDependency: DependencySpecifier = projectDependency;\r\n    let normalizedShrinkwrapDependency: DependencySpecifier = shrinkwrapDependency;\r\n\r\n    // Special handling for NPM package aliases such as this:\r\n    //\r\n    // \"dependencies\": {\r\n    //   \"alias-name\": \"npm:target-name@^1.2.3\"\r\n    // }\r\n    //\r\n    // In this case, the shrinkwrap file will have a key equivalent to \"npm:target-name@1.2.5\",\r\n    // and so we need to unwrap the target and compare \"1.2.5\" with \"^1.2.3\".\r\n    if (projectDependency.specifierType === 'alias') {\r\n      // Does the shrinkwrap install it as an alias?\r\n      if (shrinkwrapDependency.specifierType === 'alias') {\r\n        // Does the shrinkwrap have the right package name?\r\n        if (projectDependency.packageName === shrinkwrapDependency.packageName) {\r\n          // Yes, the aliases match, so let's compare their targets in the logic below\r\n          normalizedProjectDependency = projectDependency.aliasTarget!;\r\n          normalizedShrinkwrapDependency = shrinkwrapDependency.aliasTarget!;\r\n        } else {\r\n          // If the names are different, then it's a mismatch\r\n          return false;\r\n        }\r\n      } else {\r\n        // A non-alias cannot satisfy an alias dependency; at least, let's avoid that idea\r\n        return false;\r\n      }\r\n    }\r\n\r\n    switch (normalizedProjectDependency.specifierType) {\r\n      case 'version':\r\n      case 'range':\r\n        return semver.satisfies(normalizedShrinkwrapDependency.versionSpecifier,\r\n          normalizedProjectDependency.versionSpecifier);\r\n      default:\r\n        // For other version specifier types like \"file:./blah.tgz\" or \"git://github.com/npm/cli.git#v1.0.27\"\r\n        // we allow the installation to continue but issue a warning.  The \"rush install\" checks will not work\r\n        // correctly.\r\n\r\n        // Only warn once for each versionSpecifier\r\n        if (!this._alreadyWarnedSpecs.has(projectDependency.versionSpecifier)) {\r\n          this._alreadyWarnedSpecs.add(projectDependency.versionSpecifier);\r\n          console.log(colors.yellow(`WARNING: Not validating ${projectDependency.specifierType}-based`\r\n            + ` specifier: \"${projectDependency.versionSpecifier}\"`));\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n}\r\n"]}