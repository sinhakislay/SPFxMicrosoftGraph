{"version":3,"file":"StandardScriptUpdater.js","sourceRoot":"","sources":["../../src/logic/StandardScriptUpdater.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,oEAAgE;AAIhE;;;GAGG;AACH,MAAa,qBAAqB;IAOhC;;;OAGG;IACI,MAAM,CAAC,MAAM,CAAC,iBAAoC;QACvD,IAAI,UAAU,GAAY,KAAK,CAAC;QAChC,KAAK,MAAM,UAAU,IAAI,qBAAqB,CAAC,YAAY,EAAE;YAC3D,IAAI,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,iBAAiB,EAAE,KAAK,CAAC,EAAE;gBACpF,UAAU,GAAG,IAAI,CAAC;aACnB;SACF;QAED,IAAI,UAAU,EAAE;YACd,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,oCAAoC;SACpD;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,QAAQ,CAAC,iBAAoC;QACzD,KAAK,MAAM,UAAU,IAAI,qBAAqB,CAAC,YAAY,EAAE;YAC3D,qBAAqB,CAAC,oBAAoB,CAAC,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;SACjF;IACH,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,oBAAoB,CAAC,UAAkB,EAAE,iBAAoC,EAC1F,kBAA2B;QAC3B,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;QAC5F,MAAM,cAAc,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;QAEjF,8BAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QAE/D,0BAA0B;QAC1B,IAAI,YAAY,GAAY,KAAK,CAAC;QAElC,IAAI,8BAAU,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YACrC,MAAM,aAAa,GAAW,8BAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAClE,MAAM,aAAa,GAAW,8BAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAElE,MAAM,gBAAgB,GAAW,qBAAqB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjF,MAAM,gBAAgB,GAAW,qBAAqB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAEjF,IAAI,gBAAgB,KAAK,gBAAgB,EAAE;gBACzC,YAAY,GAAG,IAAI,CAAC;aACrB;SACF;QAED,IAAI,CAAC,YAAY,EAAE;YACjB,IAAI,kBAAkB,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,uEAAuE;sBACnF,2EAA2E,CAAC,CAAC;aAClF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,oCAAoC,cAAc,GAAG,CAAC,CAAC;gBACnE,8BAAU,CAAC,QAAQ,CAAC;oBAClB,UAAU,EAAE,cAAc;oBAC1B,eAAe,EAAE,cAAc;iBAChC,CAAC,CAAC;aACJ;SACF;QAED,OAAO,CAAC,YAAY,CAAC;IACvB,CAAC;IAEO,MAAM,CAAC,UAAU,CAAC,OAAe;QACvC,iDAAiD;QACjD,OAAO,wBAAI,CAAC,WAAW,CAAC,OAAO,CAAC;YAC9B,6BAA6B;aAC5B,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;;AAlFuB,kCAAY,GAAa;IAC/C,gBAAgB;IAChB,qBAAqB;IACrB,sBAAsB;CACvB,CAAC;AALJ,sDAoFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Text, FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\n\r\n/**\r\n * Checks whether the common/scripts files are up to date, and recopies them if needed.\r\n * This is used by the \"rush install\" and \"rush update\" commands.\r\n */\r\nexport class StandardScriptUpdater {\r\n  private static readonly _scriptNames: string[] = [\r\n    'install-run.js',\r\n    'install-run-rush.js',\r\n    'install-run-rushx.js'\r\n  ];\r\n\r\n  /**\r\n   * Recopy the scripts if the scripts are out of date.\r\n   * Used by \"rush update\".\r\n   */\r\n  public static update(rushConfiguration: RushConfiguration): boolean {\r\n    let anyChanges: boolean = false;\r\n    for (const scriptName of StandardScriptUpdater._scriptNames) {\r\n      if (StandardScriptUpdater._updateScriptOrThrow(scriptName, rushConfiguration, false)) {\r\n        anyChanges = true;\r\n      }\r\n    }\r\n\r\n    if (anyChanges) {\r\n      console.log(); // print a newline after the notices\r\n    }\r\n    return anyChanges;\r\n  }\r\n\r\n  /**\r\n   * Throw an exception if the scripts are out of date.\r\n   * Used by \"rush install\".\r\n   */\r\n  public static validate(rushConfiguration: RushConfiguration): void {\r\n    for (const scriptName of StandardScriptUpdater._scriptNames) {\r\n      StandardScriptUpdater._updateScriptOrThrow(scriptName, rushConfiguration, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compares a single script in the common/script folder to see if it needs to be updated.\r\n   * If throwInsteadOfCopy=false, then an outdated or missing script will be recopied;\r\n   * otherwise, an exception is thrown.\r\n   */\r\n  private static _updateScriptOrThrow(scriptName: string, rushConfiguration: RushConfiguration,\r\n    throwInsteadOfCopy: boolean): boolean {\r\n    const targetFilePath: string = path.join(rushConfiguration.commonScriptsFolder, scriptName);\r\n    const sourceFilePath: string = path.resolve(__dirname, '../scripts', scriptName);\r\n\r\n    FileSystem.ensureFolder(rushConfiguration.commonScriptsFolder);\r\n\r\n    // Are the files the same?\r\n    let filesAreSame: boolean = false;\r\n\r\n    if (FileSystem.exists(targetFilePath)) {\r\n      const sourceContent: string = FileSystem.readFile(sourceFilePath);\r\n      const targetContent: string = FileSystem.readFile(targetFilePath);\r\n\r\n      const sourceNormalized: string = StandardScriptUpdater._normalize(sourceContent);\r\n      const targetNormalized: string = StandardScriptUpdater._normalize(targetContent);\r\n\r\n      if (sourceNormalized === targetNormalized) {\r\n        filesAreSame = true;\r\n      }\r\n    }\r\n\r\n    if (!filesAreSame) {\r\n      if (throwInsteadOfCopy) {\r\n        throw new Error('The standard files in the \"common/scripts\" folders need to be updated'\r\n          + ' for this Rush version.  Please run \"rush update\" and commit the changes.');\r\n      } else {\r\n        console.log(`Script is out of date; updating \"${targetFilePath}\"`);\r\n        FileSystem.copyFile({\r\n          sourcePath: sourceFilePath,\r\n          destinationPath: targetFilePath\r\n        });\r\n      }\r\n    }\r\n\r\n    return !filesAreSame;\r\n  }\r\n\r\n  private static _normalize(content: string): string {\r\n    // Ignore newline differences from .gitattributes\r\n    return Text.convertToLf(content)\r\n      // Ignore trailing whitespace\r\n      .split('\\n').map(x => x.trimRight()).join('\\n');\r\n  }\r\n}\r\n"]}