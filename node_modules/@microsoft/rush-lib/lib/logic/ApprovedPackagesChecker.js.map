{"version":3,"file":"ApprovedPackagesChecker.js","sourceRoot":"","sources":["../../src/logic/ApprovedPackagesChecker.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IPackageJson, PackageName } from '@microsoft/node-core-library';\r\n\r\nimport { ApprovedPackagesPolicy } from '../api/ApprovedPackagesPolicy';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { DependencySpecifier } from './DependencySpecifier';\r\n\r\nexport class ApprovedPackagesChecker {\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n  private _approvedPackagesPolicy: ApprovedPackagesPolicy;\r\n  private _filesAreOutOfDate: boolean;\r\n\r\n  public constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._approvedPackagesPolicy = this._rushConfiguration.approvedPackagesPolicy;\r\n    this._filesAreOutOfDate = false;\r\n\r\n    if (this._approvedPackagesPolicy.enabled) {\r\n      this._updateApprovedPackagesPolicy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If true, the files on disk are out of date.\r\n   */\r\n  public get approvedPackagesFilesAreOutOfDate(): boolean {\r\n    return this._filesAreOutOfDate;\r\n  }\r\n\r\n  /**\r\n   * Examines the current dependencies for the projects specified in RushConfiguration,\r\n   * and then adds them to the 'browser-approved-packages.json' and\r\n   * 'nonbrowser-approved-packages.json' config files.  If these files don't exist,\r\n   * they will be created.\r\n   *\r\n   * If the \"approvedPackagesPolicy\" feature is not enabled, then no action is taken.\r\n   */\r\n  public rewriteConfigFiles(): void {\r\n    const approvedPackagesPolicy: ApprovedPackagesPolicy = this._rushConfiguration.approvedPackagesPolicy;\r\n    if (approvedPackagesPolicy.enabled) {\r\n      approvedPackagesPolicy.browserApprovedPackages.saveToFile();\r\n      approvedPackagesPolicy.nonbrowserApprovedPackages.saveToFile();\r\n    }\r\n  }\r\n\r\n  private _updateApprovedPackagesPolicy(): void {\r\n    for (const rushProject of this._rushConfiguration.projects) {\r\n      const packageJson: IPackageJson = rushProject.packageJson;\r\n\r\n      this._collectDependencies(\r\n        packageJson.dependencies,\r\n        this._approvedPackagesPolicy,\r\n        rushProject\r\n      );\r\n      this._collectDependencies(\r\n        packageJson.devDependencies,\r\n        this._approvedPackagesPolicy,\r\n        rushProject\r\n      );\r\n      this._collectDependencies(\r\n        packageJson.peerDependencies,\r\n        this._approvedPackagesPolicy,\r\n        rushProject\r\n      );\r\n      this._collectDependencies(\r\n        packageJson.optionalDependencies,\r\n        this._approvedPackagesPolicy,\r\n        rushProject\r\n      );\r\n    }\r\n  }\r\n\r\n  private _collectDependencies(\r\n    dependencies: { [key: string]: string } | undefined,\r\n    approvedPackagesPolicy: ApprovedPackagesPolicy,\r\n    rushProject: RushConfigurationProject\r\n  ): void {\r\n    if (dependencies) {\r\n      for (const packageName of Object.keys(dependencies)) {\r\n\r\n        let referencedPackageName: string = packageName;\r\n\r\n        // Special handling for NPM package aliases such as this:\r\n        //\r\n        // \"dependencies\": {\r\n        //   \"alias-name\": \"npm:target-name@^1.2.3\"\r\n        // }\r\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(\r\n          packageName,\r\n          dependencies[packageName]\r\n        );\r\n        if (dependencySpecifier.aliasTarget) {\r\n          // Use \"target-name\" instead of \"alias-name\"\r\n          referencedPackageName = dependencySpecifier.aliasTarget.packageName;\r\n        }\r\n\r\n        const scope: string = PackageName.getScope(referencedPackageName);\r\n\r\n        // Make sure the scope isn't something like \"@types\" which should be ignored\r\n        if (!approvedPackagesPolicy.ignoredNpmScopes.has(scope)) {\r\n          // Yes, add it to the list if it's not already there\r\n\r\n          let updated: boolean = false;\r\n\r\n          // By default we put everything in the browser file.  But if it already appears in the\r\n          // non-browser file, then use that instead.\r\n          if (approvedPackagesPolicy.nonbrowserApprovedPackages.getItemByName(referencedPackageName)) {\r\n            updated = approvedPackagesPolicy.nonbrowserApprovedPackages.addOrUpdatePackage(\r\n              referencedPackageName,\r\n              rushProject.reviewCategory\r\n            );\r\n          } else {\r\n            updated = approvedPackagesPolicy.browserApprovedPackages.addOrUpdatePackage(\r\n              referencedPackageName,\r\n              rushProject.reviewCategory\r\n            );\r\n          }\r\n\r\n          this._filesAreOutOfDate = this._filesAreOutOfDate || updated;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}