{"version":3,"file":"ChangeManager.js","sourceRoot":"","sources":["../../src/logic/ChangeManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAS3D,yDAAuE;AACvE,+CAA4C;AAC5C,uDAAoD;AACpD,6DAA0D;AAE1D;;;GAGG;AACH,MAAa,aAAa;IASxB,YACE,iBAAoC,EACpC,yBAAmD;QAEnD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;IAC9D,CAAC;IAED;;;;;OAKG;IACI,IAAI,CACT,WAAmB,EACnB,kBAAmC,IAAI,iCAAe,EAAE,EACxD,uBAAgC,KAAK;QAErC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC;QAE3D,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAExC,IAAI,CAAC,YAAY,GAAG,IAAI,yBAAW,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,mCAAgB,CAAC,kBAAkB,CACpD,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,YAAY,EACjB,oBAAoB,EACpB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,0BAA0B,CAC9B,CAAC;QACJ,IAAI,CAAC,eAAe,GAAG,mCAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/E,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;IACjE,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,eAAe,CAAC,aAAyC;QAC9D,MAAM;aACH,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;aACtB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YACd,MAAM,WAAW,GAAyC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACxG,IAAI,WAAW,EAAE;gBACf,IAAI,WAAW,CAAC,aAAa,EAAE;oBAC7B,MAAM,UAAU,GAAgB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBACtD,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAW,EAAE,GAAG,CAAC,CAAC;iBACjE;aACF;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,YAAqB;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,OAAO;SACR;QAED,2CAA2C;QAC3C,MAAM,eAAe,GAA8B,mCAAgB,CAAC,cAAc,CAChF,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,YAAY,EACZ,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAEnC,OAAO,eAAe,CAAC;IACzB,CAAC;IAEM,eAAe,CAAC,YAAqB;QAC1C,qEAAqE;QACrE,sCAAsC;QACtC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;YACnC,qBAAqB;YACrB,MAAM,iBAAiB,GAAiB,uCAAkB,CAAC,gBAAgB,CACzE,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,kBAAkB,EACvB,YAAY,CACb,CAAC;YAEF,6DAA6D;YAC7D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;SAC9D;IACH,CAAC;CACF;AA5GD,sCA4GC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IPackageJson } from '@microsoft/node-core-library';\r\n\r\nimport { IChangeInfo } from '../api/ChangeManagement';\r\nimport { IChangelog } from '../api/Changelog';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\nimport { VersionPolicyConfiguration } from '../api/VersionPolicyConfiguration';\r\nimport { PublishUtilities, IChangeInfoHash } from './PublishUtilities';\r\nimport { ChangeFiles } from './ChangeFiles';\r\nimport { PrereleaseToken } from './PrereleaseToken';\r\nimport { ChangelogGenerator } from './ChangelogGenerator';\r\n\r\n/**\r\n * The class manages change files and controls how changes logged by change files\r\n * can be applied to package.json and change logs.\r\n */\r\nexport class ChangeManager {\r\n  private _prereleaseToken: PrereleaseToken;\r\n  private _orderedChanges: IChangeInfo[];\r\n  private _allPackages: Map<string, RushConfigurationProject>;\r\n  private _allChanges: IChangeInfoHash;\r\n  private _changeFiles: ChangeFiles;\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _lockStepProjectsToExclude: Set<string> | undefined;\r\n\r\n  constructor(\r\n    rushConfiguration: RushConfiguration,\r\n    lockStepProjectsToExclude?: Set<string> | undefined\r\n  ) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._lockStepProjectsToExclude = lockStepProjectsToExclude;\r\n  }\r\n\r\n  /**\r\n   * Load changes from change files\r\n   * @param changesPath - location of change files\r\n   * @param prereleaseToken - prerelease token\r\n   * @param includeCommitDetails - whether commit details need to be included in changes\r\n   */\r\n  public load(\r\n    changesPath: string,\r\n    prereleaseToken: PrereleaseToken = new PrereleaseToken(),\r\n    includeCommitDetails: boolean = false\r\n  ): void {\r\n    this._allPackages = this._rushConfiguration.projectsByName;\r\n\r\n    this._prereleaseToken = prereleaseToken;\r\n\r\n    this._changeFiles = new ChangeFiles(changesPath);\r\n    this._allChanges = PublishUtilities.findChangeRequests(\r\n      this._allPackages,\r\n      this._rushConfiguration,\r\n      this._changeFiles,\r\n      includeCommitDetails,\r\n      this._prereleaseToken,\r\n      this._lockStepProjectsToExclude\r\n      );\r\n    this._orderedChanges = PublishUtilities.sortChangeRequests(this._allChanges);\r\n  }\r\n\r\n  public hasChanges(): boolean {\r\n    return this._orderedChanges && this._orderedChanges.length > 0;\r\n  }\r\n\r\n  public get changes(): IChangeInfo[] {\r\n    return this._orderedChanges;\r\n  }\r\n\r\n  public get allPackages(): Map<string, RushConfigurationProject> {\r\n    return this._allPackages;\r\n  }\r\n\r\n  public validateChanges(versionConfig: VersionPolicyConfiguration): void {\r\n    Object\r\n      .keys(this._allChanges)\r\n      .filter((key) => {\r\n        const projectInfo: RushConfigurationProject | undefined = this._rushConfiguration.getProjectByName(key);\r\n        if (projectInfo) {\r\n          if (projectInfo.versionPolicy) {\r\n            const changeInfo: IChangeInfo = this._allChanges[key];\r\n            projectInfo.versionPolicy.validate(changeInfo.newVersion!, key);\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Apply changes to package.json\r\n   * @param shouldCommit - If the value is true, package.json will be updated.\r\n   * If the value is false, package.json and change logs will not be updated. It will only do a dry-run.\r\n   */\r\n  public apply(shouldCommit: boolean): Map<string, IPackageJson> | undefined {\r\n    if (!this.hasChanges()) {\r\n      return;\r\n    }\r\n\r\n    // Apply all changes to package.json files.\r\n    const updatedPackages: Map<string, IPackageJson> = PublishUtilities.updatePackages(\r\n      this._allChanges,\r\n      this._allPackages,\r\n      this._rushConfiguration,\r\n      shouldCommit,\r\n      this._prereleaseToken,\r\n      this._lockStepProjectsToExclude);\r\n\r\n    return updatedPackages;\r\n  }\r\n\r\n  public updateChangelog(shouldCommit: boolean): void {\r\n    // Do not update changelog or delete the change files for prerelease.\r\n    // Save them for the official release.\r\n    if (!this._prereleaseToken.hasValue) {\r\n      // Update changelogs.\r\n      const updatedChangelogs: IChangelog[] = ChangelogGenerator.updateChangelogs(\r\n        this._allChanges,\r\n        this._allPackages,\r\n        this._rushConfiguration,\r\n        shouldCommit\r\n      );\r\n\r\n      // Remove the change request files only if \"-a\" was provided.\r\n      this._changeFiles.deleteAll(shouldCommit, updatedChangelogs);\r\n    }\r\n  }\r\n}"]}