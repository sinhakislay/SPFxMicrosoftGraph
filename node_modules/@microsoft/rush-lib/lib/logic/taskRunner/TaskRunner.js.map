{"version":3,"file":"TaskRunner.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/TaskRunner.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport { Interleaver } from '@microsoft/stream-collator';\r\nimport {\r\n  Terminal,\r\n  ConsoleTerminalProvider,\r\n  Colors,\r\n  IColorableSequence\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { ITask } from './ITask';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\n\r\nexport interface ITaskRunnerOptions {\r\n  quietMode: boolean;\r\n  parallelism: string | undefined;\r\n  changedProjectsOnly: boolean;\r\n  allowWarningsInSuccessfulBuild: boolean;\r\n  terminal?: Terminal;\r\n}\r\n\r\n/**\r\n * A class which manages the execution of a set of tasks with interdependencies.\r\n * Initially, and at the end of each task execution, all unblocked tasks\r\n * are added to a ready queue which is then executed. This is done continually until all\r\n * tasks are complete, or prematurely fails if any of the tasks fail.\r\n */\r\nexport class TaskRunner {\r\n  private _tasks: ITask[];\r\n  private _changedProjectsOnly: boolean;\r\n  private _allowWarningsInSuccessfulBuild: boolean;\r\n  private _buildQueue: ITask[];\r\n  private _quietMode: boolean;\r\n  private _hasAnyFailures: boolean;\r\n  private _hasAnyWarnings: boolean;\r\n  private _parallelism: number;\r\n  private _currentActiveTasks: number;\r\n  private _totalTasks: number;\r\n  private _completedTasks: number;\r\n  private _terminal: Terminal;\r\n\r\n  constructor(orderedTasks: ITask[], options: ITaskRunnerOptions) {\r\n    const {\r\n      quietMode,\r\n      parallelism,\r\n      changedProjectsOnly,\r\n      allowWarningsInSuccessfulBuild,\r\n      terminal = new Terminal(new ConsoleTerminalProvider())\r\n    } = options;\r\n    this._tasks = orderedTasks;\r\n    this._buildQueue = orderedTasks.slice(0);\r\n    this._quietMode = quietMode;\r\n    this._hasAnyFailures = false;\r\n    this._hasAnyWarnings = false;\r\n    this._changedProjectsOnly = changedProjectsOnly;\r\n    this._allowWarningsInSuccessfulBuild = allowWarningsInSuccessfulBuild;\r\n    this._terminal = terminal;\r\n\r\n    const numberOfCores: number = os.cpus().length;\r\n\r\n    if (parallelism) {\r\n      if (parallelism === 'max') {\r\n        this._parallelism = numberOfCores;\r\n      } else {\r\n        const parallelismInt: number = parseInt(parallelism, 10);\r\n\r\n        if (isNaN(parallelismInt)) {\r\n          throw new Error(`Invalid parallelism value of '${parallelism}', expected a number or 'max'`);\r\n        }\r\n\r\n        this._parallelism = parallelismInt;\r\n      }\r\n    } else {\r\n      // If an explicit parallelism number wasn't provided, then choose a sensible\r\n      // default.\r\n      if (os.platform() === 'win32') {\r\n        // On desktop Windows, some people have complained that their system becomes\r\n        // sluggish if Rush is using all the CPU cores.  Leave one thread for\r\n        // other operations. For CI environments, you can use the \"max\" argument to use all available cores.\r\n        this._parallelism = Math.max(numberOfCores - 1, 1);\r\n      } else {\r\n        // Unix-like operating systems have more balanced scheduling, so default\r\n        // to the number of CPU cores\r\n        this._parallelism = numberOfCores;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes all tasks which have been registered, returning a promise which is resolved when all the\r\n   * tasks are completed successfully, or rejects when any task fails.\r\n   */\r\n  public execute(): Promise<void> {\r\n    this._currentActiveTasks = 0;\r\n    this._completedTasks = 0;\r\n    this._totalTasks = this._buildQueue.length;\r\n    this._terminal.writeLine(`Executing a maximum of ${this._parallelism} simultaneous processes...${os.EOL}`);\r\n\r\n    return this._startAvailableTasks().then(() => {\r\n      this._printTaskStatus();\r\n\r\n      if (this._hasAnyFailures) {\r\n        return Promise.reject(new Error('Project(s) failed to build'));\r\n      } else if (this._hasAnyWarnings && !this._allowWarningsInSuccessfulBuild) {\r\n        this._terminal.writeWarningLine('Project(s) succeeded with warnings');\r\n        return Promise.reject(new AlreadyReportedError());\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pulls the next task with no dependencies off the build queue\r\n   * Removes any non-ready tasks from the build queue (this should only be blocked tasks)\r\n   */\r\n  private _getNextTask(): ITask | undefined {\r\n    for (let i: number = 0; i < this._buildQueue.length; i++) {\r\n      const task: ITask = this._buildQueue[i];\r\n\r\n      if (task.status !== TaskStatus.Ready) {\r\n        // It shouldn't be on the queue, remove it\r\n        this._buildQueue.splice(i, 1);\r\n        // Decrement since we modified the array\r\n        i--;\r\n      } else if (task.dependencies.size === 0 && task.status === TaskStatus.Ready) {\r\n        // this is a task which is ready to go. remove it and return it\r\n        return this._buildQueue.splice(i, 1)[0];\r\n      }\r\n      // Otherwise task is still waiting\r\n    }\r\n    return undefined; // There are no tasks ready to go at this time\r\n  }\r\n\r\n  /**\r\n   * Helper function which finds any tasks which are available to run and begins executing them.\r\n   * It calls the complete callback when all tasks are completed, or rejects if any task fails.\r\n   */\r\n  private _startAvailableTasks(): Promise<void> {\r\n    const taskPromises: Promise<void>[] = [];\r\n    let ctask: ITask | undefined;\r\n    while (this._currentActiveTasks < this._parallelism && (ctask = this._getNextTask())) {\r\n      this._currentActiveTasks++;\r\n      const task: ITask = ctask;\r\n      task.status = TaskStatus.Executing;\r\n      this._terminal.writeLine(Colors.white(`[${task.name}] started`));\r\n\r\n      task.stopwatch = Stopwatch.start();\r\n      task.writer = Interleaver.registerTask(task.name, this._quietMode);\r\n\r\n      taskPromises.push(task.execute(task.writer)\r\n        .then((result: TaskStatus) => {\r\n          task.stopwatch.stop();\r\n          task.writer.close();\r\n\r\n          this._currentActiveTasks--;\r\n          this._completedTasks++;\r\n          switch (result) {\r\n            case TaskStatus.Success:\r\n              this._markTaskAsSuccess(task);\r\n              break;\r\n            case TaskStatus.SuccessWithWarning:\r\n              this._hasAnyWarnings = true;\r\n              this._markTaskAsSuccessWithWarning(task);\r\n              break;\r\n            case TaskStatus.Skipped:\r\n              this._markTaskAsSkipped(task);\r\n              break;\r\n            case TaskStatus.Failure:\r\n              this._hasAnyFailures = true;\r\n              this._markTaskAsFailed(task);\r\n              break;\r\n          }\r\n        }).catch((error: TaskError) => {\r\n          task.writer.close();\r\n\r\n          this._currentActiveTasks--;\r\n\r\n          this._hasAnyFailures = true;\r\n          task.error = error;\r\n          this._markTaskAsFailed(task);\r\n        }\r\n        ).then(() => this._startAvailableTasks()));\r\n    }\r\n\r\n    return Promise.all(taskPromises).then(() => { /* collapse void[] to void */ });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as having failed and marks each of its dependents as blocked\r\n   */\r\n  private _markTaskAsFailed(task: ITask): void {\r\n    this._terminal.writeErrorLine(`${os.EOL}${this._getCurrentCompletedTaskString()}[${task.name}] failed to build!`);\r\n    task.status = TaskStatus.Failure;\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      this._markTaskAsBlocked(dependent, task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task and all its dependents as blocked\r\n   */\r\n  private _markTaskAsBlocked(task: ITask, failedTask: ITask): void {\r\n    if (task.status === TaskStatus.Ready) {\r\n      this._completedTasks++;\r\n      this._terminal.writeErrorLine(`${this._getCurrentCompletedTaskString()}`\r\n        + `[${task.name}] blocked by [${failedTask.name}]!`);\r\n      task.status = TaskStatus.Blocked;\r\n      task.dependents.forEach((dependent: ITask) => {\r\n        this._markTaskAsBlocked(dependent, failedTask);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks a task as being completed, and removes it from the dependencies list of all its dependents\r\n   */\r\n  private _markTaskAsSuccess(task: ITask): void {\r\n    if (task.hadEmptyScript) {\r\n      this._terminal.writeLine(Colors.green(`${this._getCurrentCompletedTaskString()}`\r\n      + `[${task.name}] had an empty script`));\r\n    } else {\r\n      this._terminal.writeLine(Colors.green(`${this._getCurrentCompletedTaskString()}`\r\n      + `[${task.name}] completed successfully in ${task.stopwatch.toString()}`));\r\n    }\r\n    task.status = TaskStatus.Success;\r\n\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      if (!this._changedProjectsOnly) {\r\n        dependent.isIncrementalBuildAllowed = false;\r\n      }\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as being completed, but with warnings written to stderr, and removes it from the dependencies\r\n   * list of all its dependents\r\n   */\r\n  private _markTaskAsSuccessWithWarning(task: ITask): void {\r\n    this._terminal.writeWarningLine(`${this._getCurrentCompletedTaskString()}`\r\n      + `[${task.name}] completed with warnings in ${task.stopwatch.toString()}`);\r\n    task.status = TaskStatus.SuccessWithWarning;\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      if (!this._changedProjectsOnly) {\r\n        dependent.isIncrementalBuildAllowed = false;\r\n      }\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as skipped.\r\n   */\r\n  private _markTaskAsSkipped(task: ITask): void {\r\n    this._terminal.writeLine(Colors.green(`${this._getCurrentCompletedTaskString()}[${task.name}] skipped`));\r\n    task.status = TaskStatus.Skipped;\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  private _getCurrentCompletedTaskString(): string {\r\n    return `${this._completedTasks} of ${this._totalTasks}: `;\r\n  }\r\n\r\n  /**\r\n   * Prints out a report of the status of each project\r\n   */\r\n  private _printTaskStatus(): void {\r\n    const tasksByStatus: { [status: number]: ITask[] } = {};\r\n    this._tasks.forEach((task: ITask) => {\r\n      if (tasksByStatus[task.status]) {\r\n        tasksByStatus[task.status].push(task);\r\n      } else {\r\n        tasksByStatus[task.status] = [task];\r\n      }\r\n    });\r\n\r\n    this._terminal.writeLine('');\r\n\r\n    this._printStatus(TaskStatus.Executing, tasksByStatus, Colors.yellow);\r\n    this._printStatus(TaskStatus.Ready, tasksByStatus, Colors.white);\r\n    this._printStatus(TaskStatus.Skipped, tasksByStatus, Colors.gray);\r\n    this._printStatus(TaskStatus.Success, tasksByStatus, Colors.green);\r\n    this._printStatus(\r\n      TaskStatus.SuccessWithWarning,\r\n      tasksByStatus,\r\n      (text: string) => Colors.yellow(text),\r\n      (text: string) => Colors.yellow(Colors.underline(text))\r\n    );\r\n    this._printStatus(TaskStatus.Blocked, tasksByStatus, Colors.red);\r\n    this._printStatus(TaskStatus.Failure, tasksByStatus, Colors.red);\r\n\r\n    const tasksWithErrors: ITask[] = tasksByStatus[TaskStatus.Failure];\r\n    if (tasksWithErrors) {\r\n      tasksWithErrors.forEach((task: ITask) => {\r\n        if (task.error) {\r\n          this._terminal.writeErrorLine(`[${task.name}] ${task.error.message}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    this._terminal.writeLine('');\r\n  }\r\n\r\n  private _printStatus(\r\n    status: TaskStatus,\r\n    tasksByStatus: { [status: number]: ITask[] },\r\n    color: (text: string) => IColorableSequence,\r\n    headingColor: (text: string) => IColorableSequence = color\r\n  ): void {\r\n    const tasks: ITask[] = tasksByStatus[status];\r\n\r\n    if (tasks && tasks.length) {\r\n      this._terminal.writeLine(headingColor(`${status} (${tasks.length})`));\r\n      this._terminal.writeLine(color('================================'));\r\n      for (let i: number = 0; i < tasks.length; i++) {\r\n        const task: ITask = tasks[i];\r\n\r\n        switch (status) {\r\n          case TaskStatus.Executing:\r\n          case TaskStatus.Ready:\r\n          case TaskStatus.Skipped:\r\n            this._terminal.writeLine(color(task.name));\r\n            break;\r\n\r\n          case TaskStatus.Success:\r\n          case TaskStatus.SuccessWithWarning:\r\n          case TaskStatus.Blocked:\r\n          case TaskStatus.Failure:\r\n            if (task.stopwatch && !task.hadEmptyScript) {\r\n              const time: string = task.stopwatch.toString();\r\n              this._terminal.writeLine(headingColor(`${task.name} (${time})`));\r\n            } else {\r\n              this._terminal.writeLine(headingColor(`${task.name}`));\r\n            }\r\n            break;\r\n        }\r\n\r\n        if (task.writer) {\r\n          const stderr: string = task.writer.getStdError();\r\n          const shouldPrintDetails: boolean =\r\n            task.status === TaskStatus.Failure || task.status === TaskStatus.SuccessWithWarning;\r\n          let details: string = stderr ? stderr : task.writer.getStdOutput();\r\n          if (details && shouldPrintDetails) {\r\n            details = this._abridgeTaskReport(details);\r\n            this._terminal.writeLine(details + (i !== tasks.length - 1 ? os.EOL : ''));\r\n          }\r\n        }\r\n      }\r\n\r\n      this._terminal.writeLine(color('================================' + os.EOL));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove trailing blanks, and all middle lines if text is large\r\n   */\r\n  private _abridgeTaskReport(text: string): string {\r\n    const headSize: number = 10;\r\n    const tailSize: number = 20;\r\n    const margin: number = 10;\r\n    const lines: Array<string> = text.split(/\\s*\\r?\\n/).filter(line => line);\r\n    if (lines.length < headSize + tailSize + margin) {\r\n      return lines.join(os.EOL);\r\n    }\r\n    const amountRemoved: number = lines.length - headSize - tailSize;\r\n    const head: string = lines.splice(0, headSize).join(os.EOL);\r\n    const tail: string = lines.splice(-tailSize).join(os.EOL);\r\n    return `${head}${os.EOL}[...${amountRemoved} lines omitted...]${os.EOL}${tail}`;\r\n  }\r\n\r\n}\r\n"]}