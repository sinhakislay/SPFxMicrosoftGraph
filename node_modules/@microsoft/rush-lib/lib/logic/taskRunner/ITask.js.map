{"version":3,"file":"ITask.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/ITask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITaskWriter } from '@microsoft/stream-collator';\r\n\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\n\r\n/**\r\n * A definition for a task, an execute function returning a promise and a unique string name\r\n */\r\nexport interface ITaskDefinition {\r\n  /**\r\n   * Name of the task definition.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * This flag determines if an incremental build is allowed for the task.\r\n   */\r\n  isIncrementalBuildAllowed: boolean;\r\n\r\n  /**\r\n   * Assigned by execute().  True if the build script was an empty string.  Operationally an empty string is\r\n   * like a shell command that succeeds instantly, but e.g. it would be odd to report build time statistics for it.\r\n   */\r\n  hadEmptyScript: boolean;\r\n\r\n  /**\r\n   * Method to be executed for the task.\r\n   */\r\n  execute: (writer: ITaskWriter) => Promise<TaskStatus>;\r\n}\r\n\r\n/**\r\n * The interface used internally by TaskRunner, which tracks the dependencies and execution status\r\n */\r\nexport interface ITask extends ITaskDefinition {\r\n  /**\r\n   * The current execution status of a task. Tasks start in the 'ready' state,\r\n   * but can be 'blocked' if an upstream task failed. It is 'executing' when\r\n   * the task is executing. Once execution is complete, it is either 'success' or\r\n   * 'failure'.\r\n   */\r\n  status: TaskStatus;\r\n\r\n  /**\r\n   * A set of all dependencies which must be executed before this task is complete.\r\n   * When dependencies finish execution, they are removed from this list.\r\n   */\r\n  dependencies: Set<ITask>;\r\n\r\n  /**\r\n   * The inverse of dependencies, lists all projects which are directly dependent on this one.\r\n   */\r\n  dependents: Set<ITask>;\r\n\r\n  /**\r\n   * This number represents how far away this Task is from the furthest \"root\" project (i.e.\r\n   * a project with no dependents). This helps us to calculate the critical path (i.e. the\r\n   * longest chain of projects which must be executed in order, thereby limiting execution speed\r\n   * of the entire task tree.\r\n   *\r\n   * This number is calculated via a memoized recursive function, and when choosing the next\r\n   * task to execute, the task with the highest criticalPathLength is chosen.\r\n   *\r\n   * Example:\r\n   *        (0) A\r\n   *             \\\r\n   *          (1) B     C (0)         (applications)\r\n   *               \\   /|\\\r\n   *                \\ / | \\\r\n   *             (2) D  |  X (1)      (utilities)\r\n   *                    | / \\\r\n   *                    |/   \\\r\n   *                (2) Y     Z (2)   (other utilities)\r\n   *\r\n   * All roots (A & C) have a criticalPathLength of 0.\r\n   * B has a score of 1, since A depends on it.\r\n   * D has a score of 2, since we look at the longest chain (e.g D->B->A is longer than D->C)\r\n   * X has a score of 1, since the only package which depends on it is A\r\n   * Z has a score of 2, since only X depends on it, and X has a score of 1\r\n   * Y has a score of 2, since the chain Y->X->C is longer than Y->C\r\n   *\r\n   * The algorithm is implemented in TaskRunner as _calculateCriticalPaths()\r\n   */\r\n  criticalPathLength: number | undefined;\r\n\r\n  /**\r\n   * The error which occurred while executing this task, this is stored in case we need\r\n   * it later (for example to re-print errors at end of execution).\r\n   */\r\n  error: TaskError | undefined;\r\n\r\n  /**\r\n   * The task writer which contains information from the output streams of this task\r\n   */\r\n  writer: ITaskWriter;\r\n\r\n  /**\r\n   * The stopwatch which measures how long it takes the task to execute\r\n   */\r\n  stopwatch: Stopwatch;\r\n}\r\n"]}