{"version":3,"file":"ProjectTask.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/ProjectTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,6BAA6B;AAC7B,oEAA0E;AAM1E,yDAAsD;AACtD,6CAA0C;AAC1C,2CAAwC;AAiBxC;;GAEG;AACH,MAAa,WAAW;IAetB,YAAY,OAA4B;QATjC,mBAAc,GAAY,KAAK,CAAC;QAUrC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACpD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC;QAC1C,IAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC,yBAAyB,CAAC;QACnE,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAC5D,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,mBAAmB,CAAC;IAC5D,CAAC;IArBC,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;IACvC,CAAC;IAqBM,OAAO,CAAC,MAAmB;QAChC,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;aAC5B;YACD,MAAM,IAAI,GAAqC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;YACpF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACxC;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,qBAAS,CAAC,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;SAClE;IACH,CAAC;IAEO,uBAAuB,CAAC,MAAmB;QACjD,IAAI,IAAI,GAAqC,SAAS,CAAC;QACvD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAClD,IAAI;YACF,IAAI,GAAG;gBACL,KAAK,EAAE,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAE,CAAC,KAAK;gBAC3F,SAAS,EAAE,IAAI,CAAC,aAAa;aAC9B,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,SAAS,CAAC,+CAA+C;gBAC9D,gCAAgC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SACxD;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,YAAY,CAClB,MAAmB,EACnB,kBAAoD;QAEpD,IAAI;YACF,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,MAAM,aAAa,GAAW,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;YAC9D,IAAI,eAAe,GAAqC,SAAS,CAAC;YAElE,MAAM,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAErC,kEAAkE;YAClE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;YAE/F,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAE9G,IAAI,8BAAU,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;gBACtC,IAAI;oBACF,eAAe,GAAG,4BAAQ,CAAC,IAAI,CAAC,eAAe,CAAyB,CAAC;iBAC1E;gBAAC,OAAO,CAAC,EAAE;oBACV,mFAAmF;oBACnF,MAAM,CAAC,SAAS,CACd,0BAA0B,IAAI,CAAC,oBAAoB,KAAK,CAAC,iBAAiB;wBAC1E,yBAAyB,IAAI,CAAC,aAAa,eAAe,CAC3D,CAAC;iBACH;aACF;YAED,MAAM,kBAAkB,GAAY,CAClC,CAAC,CAAC,CACA,eAAe;gBACf,kBAAkB;gBAClB,CAAC,kBAAkB,CAAC,SAAS,KAAK,eAAe,CAAC,SAAS;oBAC3D,gBAAgB,CAAC,kBAAkB,CAAC,KAAK,EAAE,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAC3E,CACF,CAAC;YAEF,IAAI,kBAAkB,IAAI,IAAI,CAAC,yBAAyB,EAAE;gBACxD,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC;aAC5C;iBAAM;gBACL,8DAA8D;gBAC9D,8BAAU,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;gBAEvC,sCAAsC;gBACtC,8BAAU,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBAEtC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACvB,MAAM,CAAC,SAAS,CAAC,qBAAqB,IAAI,CAAC,aAAa,oDAAoD;0BACxG,8BAA8B,CAAC,CAAC;oBAEpC,yBAAyB;oBACzB,IAAI,kBAAkB,EAAE;wBACtB,4BAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE,eAAe,EAAE;4BACjD,kBAAkB,EAAE,IAAI;yBACzB,CAAC,CAAC;qBACJ;oBAED,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC;iBAC5C;gBAED,eAAe;gBAEf,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACrC,MAAM,IAAI,GAA+B,qBAAS,CAAC,4BAA4B,CAC7E,IAAI,CAAC,aAAa,EAClB;oBACE,iBAAiB,EAAE,IAAI,CAAC,kBAAkB;oBAC1C,gBAAgB,EAAE,aAAa;oBAC/B,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;oBACjD,YAAY,EAAE,IAAI;oBAClB,sBAAsB,EAAE;wBACtB,iBAAiB,EAAE,IAAI;qBACxB;iBACF,CACF,CAAC;gBAEF,gEAAgE;gBAChE,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;oBACxB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;wBACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACrB,CAAC,CAAC,CAAC;iBACJ;gBACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;oBACxB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;wBACtC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBACxB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBACjC,CAAC,CAAC,CAAC;iBACJ;gBAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAqC,EAAE,MAAkC,EAAE,EAAE;oBAC/F,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAY,EAAE,EAAE;wBAChC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;wBAE9B,IAAI,IAAI,KAAK,CAAC,EAAE;4BACd,MAAM,CAAC,IAAI,qBAAS,CAAC,OAAO,EAAE,wBAAwB,IAAI,EAAE,CAAC,CAAC,CAAC;yBAChE;6BAAM,IAAI,IAAI,CAAC,kBAAkB,EAAE;4BAClC,OAAO,CAAC,uBAAU,CAAC,kBAAkB,CAAC,CAAC;yBACxC;6BAAM;4BACL,yBAAyB;4BACzB,IAAI,kBAAkB,EAAE;gCACtB,4BAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE,eAAe,EAAE;oCACjD,kBAAkB,EAAE,IAAI;iCACzB,CAAC,CAAC;6BACJ;4BACD,OAAO,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC;yBAC7B;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEnB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAC9B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,qBAAS,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;SACjE;IACH,CAAC;IAED,uEAAuE;IAC/D,gBAAgB,CAAC,MAAmB;QAC1C,IAAI;YACF,MAAM,WAAW,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAE3E,MAAM,MAAM,GAAW,MAAM,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;YACtF,IAAI,MAAM,EAAE;gBACV,8BAAU,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,WAAW,GAAG,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;aACtG;YAED,MAAM,MAAM,GAAW,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;YACrF,IAAI,MAAM,EAAE;gBACV,8BAAU,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,WAAW,GAAG,kBAAkB,CAAC,EAAE,MAAM,CAAC,CAAC;aAC5G;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC;SACjD;IACH,CAAC;CACF;AA3LD,kCA2LC;AAED,SAAS,gBAAgB,CAAC,OAAe,EAAE,OAAe,EAAE,MAAmB;IAC7E,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;YAChD,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,OAAO,OAAO,CAAC,CAAC,CAAC,UAAU,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAChF,OAAO,KAAK,CAAC;SACd;KACF;IACD,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,EAAE;YACnB,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACzE,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,wBAAwB,CAAC,OAAe;IACtD,6FAA6F;IAC7F,0CAA0C;IAC1C,MAAM,aAAa,GAAW,qBAAqB,CAAC;IAEpD,MAAM,KAAK,GAA4B,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnE,IAAI,KAAK,EAAE;QACT,8DAA8D;QAC9D,0BAA0B;QAC1B,gDAAgD;QAChD,MAAM,WAAW,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,SAAS,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;QAEnC,wEAAwE;QACxE,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACjC,6DAA6D;YAC7D,+CAA+C;YAC/C,EAAE;YACF,2EAA2E;YAC3E,OAAO,wBAAI,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,SAAS,CAAC;SAC5D;KACF;IAED,wBAAwB;IACxB,OAAO,OAAO,CAAC;AACjB,CAAC;AAzBD,4DAyBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as path from 'path';\r\nimport { JsonFile, Text, FileSystem } from '@microsoft/node-core-library';\r\nimport { ITaskWriter } from '@microsoft/stream-collator';\r\nimport { IPackageDeps } from '@microsoft/package-deps-hash';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\nimport { ITaskDefinition } from '../taskRunner/ITask';\r\nimport { PackageChangeAnalyzer } from '../PackageChangeAnalyzer';\r\n\r\ninterface IPackageDependencies extends IPackageDeps {\r\n  arguments: string;\r\n}\r\n\r\nexport interface IProjectTaskOptions {\r\n  rushProject: RushConfigurationProject;\r\n  rushConfiguration: RushConfiguration;\r\n  commandToRun: string;\r\n  isIncrementalBuildAllowed: boolean;\r\n  packageChangeAnalyzer: PackageChangeAnalyzer;\r\n  packageDepsFilename: string;\r\n}\r\n\r\n/**\r\n * A TaskRunner task which cleans and builds a project\r\n */\r\nexport class ProjectTask implements ITaskDefinition {\r\n  public get name(): string {\r\n    return this._rushProject.packageName;\r\n  }\r\n\r\n  public isIncrementalBuildAllowed: boolean;\r\n  public hadEmptyScript: boolean = false;\r\n\r\n  private _hasWarningOrError: boolean;\r\n  private _rushProject: RushConfigurationProject;\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _commandToRun: string;\r\n  private _packageChangeAnalyzer: PackageChangeAnalyzer;\r\n  private _packageDepsFilename: string;\r\n\r\n  constructor(options: IProjectTaskOptions) {\r\n    this._rushProject = options.rushProject;\r\n    this._rushConfiguration = options.rushConfiguration;\r\n    this._commandToRun = options.commandToRun;\r\n    this.isIncrementalBuildAllowed = options.isIncrementalBuildAllowed;\r\n    this._packageChangeAnalyzer = options.packageChangeAnalyzer;\r\n    this._packageDepsFilename = options.packageDepsFilename;\r\n}\r\n\r\n  public execute(writer: ITaskWriter): Promise<TaskStatus> {\r\n    try {\r\n      if (!this._commandToRun) {\r\n        this.hadEmptyScript = true;\r\n      }\r\n      const deps: IPackageDependencies | undefined = this._getPackageDependencies(writer);\r\n      return this._executeTask(writer, deps);\r\n    } catch (error) {\r\n      return Promise.reject(new TaskError('executing', error.message));\r\n    }\r\n  }\r\n\r\n  private _getPackageDependencies(writer: ITaskWriter): IPackageDependencies | undefined {\r\n    let deps: IPackageDependencies | undefined = undefined;\r\n    this._rushConfiguration = this._rushConfiguration;\r\n    try {\r\n      deps = {\r\n        files: this._packageChangeAnalyzer.getPackageDepsHash(this._rushProject.packageName)!.files,\r\n        arguments: this._commandToRun\r\n      };\r\n    } catch (error) {\r\n      writer.writeLine('Unable to calculate incremental build state. ' +\r\n        'Instead running full rebuild. ' + error.toString());\r\n    }\r\n\r\n    return deps;\r\n  }\r\n\r\n  private _executeTask(\r\n    writer: ITaskWriter,\r\n    currentPackageDeps: IPackageDependencies | undefined\r\n  ): Promise<TaskStatus> {\r\n    try {\r\n      this._hasWarningOrError = false;\r\n      const projectFolder: string = this._rushProject.projectFolder;\r\n      let lastPackageDeps: IPackageDependencies | undefined = undefined;\r\n\r\n      writer.writeLine(`>>> ${this.name}`);\r\n\r\n      // TODO: Remove legacyDepsPath with the next major release of Rush\r\n      const legacyDepsPath: string = path.join(this._rushProject.projectFolder, 'package-deps.json');\r\n\r\n      const currentDepsPath: string = path.join(this._rushProject.projectRushTempFolder, this._packageDepsFilename);\r\n\r\n      if (FileSystem.exists(currentDepsPath)) {\r\n        try {\r\n          lastPackageDeps = JsonFile.load(currentDepsPath) as IPackageDependencies;\r\n        } catch (e) {\r\n          // Warn and ignore - treat failing to load the file as the project being not built.\r\n          writer.writeLine(\r\n            `Warning: error parsing ${this._packageDepsFilename}: ${e}. Ignoring and ` +\r\n            `treating the command \"${this._commandToRun}\" as not run.`\r\n          );\r\n        }\r\n      }\r\n\r\n      const isPackageUnchanged: boolean = (\r\n        !!(\r\n          lastPackageDeps &&\r\n          currentPackageDeps &&\r\n          (currentPackageDeps.arguments === lastPackageDeps.arguments &&\r\n          _areShallowEqual(currentPackageDeps.files, lastPackageDeps.files, writer))\r\n        )\r\n      );\r\n\r\n      if (isPackageUnchanged && this.isIncrementalBuildAllowed) {\r\n        return Promise.resolve(TaskStatus.Skipped);\r\n      } else {\r\n        // If the deps file exists, remove it before starting a build.\r\n        FileSystem.deleteFile(currentDepsPath);\r\n\r\n        // Delete the legacy package-deps.json\r\n        FileSystem.deleteFile(legacyDepsPath);\r\n\r\n        if (!this._commandToRun) {\r\n          writer.writeLine(`The task command \"${this._commandToRun}\" was registered in the package.json but is blank,`\r\n            + ` so no action will be taken.`);\r\n\r\n          // Write deps on success.\r\n          if (currentPackageDeps) {\r\n            JsonFile.save(currentPackageDeps, currentDepsPath, {\r\n              ensureFolderExists: true\r\n            });\r\n          }\r\n\r\n          return Promise.resolve(TaskStatus.Success);\r\n        }\r\n\r\n        // Run the task\r\n\r\n        writer.writeLine(this._commandToRun);\r\n        const task: child_process.ChildProcess = Utilities.executeLifecycleCommandAsync(\r\n          this._commandToRun,\r\n          {\r\n            rushConfiguration: this._rushConfiguration,\r\n            workingDirectory: projectFolder,\r\n            initCwd: this._rushConfiguration.commonTempFolder,\r\n            handleOutput: true,\r\n            environmentPathOptions: {\r\n              includeProjectBin: true\r\n            }\r\n          }\r\n        );\r\n\r\n        // Hook into events, in order to get live streaming of build log\r\n        if (task.stdout !== null) {\r\n          task.stdout.on('data', (data: string) => {\r\n            writer.write(data);\r\n          });\r\n        }\r\n        if (task.stderr !== null) {\r\n          task.stderr.on('data', (data: string) => {\r\n            writer.writeError(data);\r\n            this._hasWarningOrError = true;\r\n          });\r\n        }\r\n\r\n        return new Promise((resolve: (status: TaskStatus) => void, reject: (error: TaskError) => void) => {\r\n          task.on('close', (code: number) => {\r\n            this._writeLogsToDisk(writer);\r\n\r\n            if (code !== 0) {\r\n              reject(new TaskError('error', `Returned error code: ${code}`));\r\n            } else if (this._hasWarningOrError) {\r\n              resolve(TaskStatus.SuccessWithWarning);\r\n            } else {\r\n              // Write deps on success.\r\n              if (currentPackageDeps) {\r\n                JsonFile.save(currentPackageDeps, currentDepsPath, {\r\n                  ensureFolderExists: true\r\n                });\r\n              }\r\n              resolve(TaskStatus.Success);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      this._writeLogsToDisk(writer);\r\n      return Promise.reject(new TaskError('error', error.toString()));\r\n    }\r\n  }\r\n\r\n  // @todo #179371: add log files to list of things that get gulp cleaned\r\n  private _writeLogsToDisk(writer: ITaskWriter): void {\r\n    try {\r\n      const logFilename: string = path.basename(this._rushProject.projectFolder);\r\n\r\n      const stdout: string = writer.getStdOutput().replace(/\\x1B[[(?);]{0,2}(;?\\d)*./g, '');\r\n      if (stdout) {\r\n        FileSystem.writeFile(path.join(this._rushProject.projectFolder, logFilename + '.build.log'), stdout);\r\n      }\r\n\r\n      const stderr: string = writer.getStdError().replace(/\\x1B[[(?);]{0,2}(;?\\d)*./g, '');\r\n      if (stderr) {\r\n        FileSystem.writeFile(path.join(this._rushProject.projectFolder, logFilename + '.build.error.log'), stderr);\r\n      }\r\n    } catch (e) {\r\n      console.log(`Error writing logs to disk: ${e}`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _areShallowEqual(object1: Object, object2: Object, writer: ITaskWriter): boolean {\r\n  for (const n in object1) {\r\n    if (!(n in object2) || object1[n] !== object2[n]) {\r\n      writer.writeLine(`Found mismatch: \"${n}\": \"${object1[n]}\" !== \"${object2[n]}\"`);\r\n      return false;\r\n    }\r\n  }\r\n  for (const n in object2) {\r\n    if (!(n in object1)) {\r\n      writer.writeLine(`Found new prop in obj2: \"${n}\" value=\"${object2[n]}\"`);\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * When running a command from the \"scripts\" block in package.json, if the command\r\n * contains Unix-style path slashes and the OS is Windows, the package managers will\r\n * convert slashes to backslashes.  This is a complicated undertaking.  For example, they\r\n * need to convert \"node_modules/bin/this && ./scripts/that --name keep/this\"\r\n * to \"node_modules\\bin\\this && .\\scripts\\that --name keep/this\", and they don't want to\r\n * convert ANY of the slashes in \"cmd.exe /c echo a/b\".  NPM and PNPM use npm-lifecycle for this,\r\n * but it unfortunately has a dependency on the entire node-gyp kitchen sink.  Yarn has a\r\n * simplified implementation in fix-cmd-win-slashes.js, but it's not exposed as a library.\r\n *\r\n * Fundamentally NPM's whole feature seems misguided:  They start by inviting people to write\r\n * shell scripts that will be executed by wildly different shell languages (e.g. cmd.exe and Bash).\r\n * It's very tricky for a developer to guess what's safe to do without testing every OS.\r\n * Even simple path separators are not portable, so NPM added heuristics to figure out which\r\n * slashes are part of a path or not, and convert them.  These workarounds end up having tons\r\n * of special cases.  They probably could have implemented their own entire minimal cross-platform\r\n * shell language with less code and less confusion than npm-lifecycle's approach.\r\n *\r\n * We've deprecated shell operators inside package.json.  Instead, we advise people to move their\r\n * scripts into conventional script files, and put only a file path in package.json.  So, for\r\n * Rush's workaround here, we really only care about supporting the small set of cases seen in the\r\n * unit tests.  For anything that doesn't fit those patterns, we leave the string untouched\r\n * (i.e. err on the side of not breaking anything).  We could revisit this later if someone\r\n * complains about it, but so far nobody has.  :-)\r\n */\r\nexport function convertSlashesForWindows(command: string): string {\r\n  // The first group will match everything up to the first space, \"&\", \"|\", \"<\", \">\", or quote.\r\n  // The second group matches the remainder.\r\n  const commandRegExp: RegExp = /^([^\\s&|<>\"]+)(.*)$/;\r\n\r\n  const match: RegExpMatchArray | null = commandRegExp.exec(command);\r\n  if (match) {\r\n    // Example input: \"bin/blarg --path ./config/blah.json && a/b\"\r\n    // commandPart=\"bin/blarg\"\r\n    // remainder=\" --path ./config/blah.json && a/b\"\r\n    const commandPart: string = match[1];\r\n    const remainder: string = match[2];\r\n\r\n    // If the command part already contains a backslash, then leave it alone\r\n    if (commandPart.indexOf('\\\\') < 0) {\r\n      // Replace all the slashes with backslashes, e.g. to produce:\r\n      // \"bin\\blarg --path ./config/blah.json && a/b\"\r\n      //\r\n      // NOTE: we don't attempt to process the path parameter or stuff after \"&&\"\r\n      return Text.replaceAll(commandPart, '/', '\\\\') + remainder;\r\n    }\r\n  }\r\n\r\n  // Don't change anything\r\n  return command;\r\n}\r\n"]}