"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const semver = require("semver");
/**
 * This constant is the major version of the next LTS node Node.js release. This constant should be updated when
 * a new LTS version is added to Rush's support matrix.
 */
const UPCOMING_NODE_LTS_VERSION = 12;
const nodeVersion = process.versions.node;
const nodeMajorVersion = semver.major(nodeVersion);
/**
 * This class provides useful functions for warning if the current Node.js runtime isn't supported.
 *
 * @internal
 */
class NodeJsCompatibility {
    static warnAboutCompatibilityIssues(options) {
        // Only show the first warning
        return (NodeJsCompatibility.warnAboutVersionTooOld() ||
            NodeJsCompatibility.warnAboutVersionTooNew(options) ||
            NodeJsCompatibility.warnAboutOddNumberedVersion() ||
            NodeJsCompatibility.warnAboutNonLtsVersion(options.rushConfiguration));
    }
    static warnAboutVersionTooOld() {
        if (semver.satisfies(nodeVersion, '< 8.9.0')) {
            // We are on an ancient version of Node.js that is known not to work with Rush
            console.error(colors.red(`Your version of Node.js (${nodeVersion}) is very old and incompatible with Rush. ` +
                `Please upgrade to the latest Long-Term Support (LTS) version.`));
            return true;
        }
        else {
            return false;
        }
    }
    static warnAboutVersionTooNew(options) {
        if (!options.alreadyReportedNodeTooNewError && nodeMajorVersion >= (UPCOMING_NODE_LTS_VERSION + 1)) {
            // We are on a much newer release than we have tested and support
            if (options.isRushLib) {
                console.warn(colors.yellow(`Your version of Node.js (${nodeVersion}) has not been tested with this release ` +
                    `of the Rush engine. Please consider upgrading the "rushVersion" setting in rush.json, ` +
                    `or downgrading Node.js.`));
            }
            else {
                console.warn(colors.yellow(`Your version of Node.js (${nodeVersion}) has not been tested with this release ` +
                    `of Rush. Please consider installing a newer version of the "@microsoft/rush" ` +
                    `package, or downgrading Node.js.`));
            }
            return true;
        }
        else {
            return false;
        }
    }
    static warnAboutNonLtsVersion(rushConfiguration) {
        if (rushConfiguration &&
            !rushConfiguration.suppressNodeLtsWarning &&
            !NodeJsCompatibility.isLtsVersion) {
            console.warn(colors.yellow(`Your version of Node.js (${nodeVersion}) is not a Long-Term Support (LTS) release. ` +
                'These versions frequently have bugs. Please consider installing a stable release.'));
            return true;
        }
        else {
            return false;
        }
    }
    static warnAboutOddNumberedVersion() {
        if (NodeJsCompatibility.isOddNumberedVersion) {
            console.warn(colors.yellow(`Your version of Node.js (${nodeVersion}) is an odd-numbered release. ` +
                `These releases frequently have bugs. Please consider installing a Long Term Support (LTS) ` +
                `version instead.`));
            return true;
        }
        else {
            return false;
        }
    }
    static get isLtsVersion() {
        return !!process.release.lts;
    }
    static get isOddNumberedVersion() {
        return (nodeMajorVersion % 2) !== 0;
    }
}
exports.NodeJsCompatibility = NodeJsCompatibility;
//# sourceMappingURL=NodeJsCompatibility.js.map