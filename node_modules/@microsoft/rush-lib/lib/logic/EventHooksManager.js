"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const colors = require("colors");
const Utilities_1 = require("../utilities/Utilities");
const EventHooks_1 = require("../api/EventHooks");
const Stopwatch_1 = require("../utilities/Stopwatch");
class EventHooksManager {
    constructor(rushConfiguration) {
        this._rushConfiguration = rushConfiguration;
        this._eventHooks = rushConfiguration.eventHooks;
        this._commonTempFolder = rushConfiguration.commonTempFolder;
    }
    handle(event, isDebug) {
        if (!this._eventHooks) {
            return;
        }
        const scripts = this._eventHooks.get(event);
        if (scripts.length > 0) {
            const stopwatch = Stopwatch_1.Stopwatch.start();
            console.log(os.EOL + colors.green(`Executing event hooks for ${EventHooks_1.Event[event]}`));
            scripts.forEach((script) => {
                try {
                    Utilities_1.Utilities.executeLifecycleCommand(script, {
                        rushConfiguration: this._rushConfiguration,
                        workingDirectory: this._rushConfiguration.rushJsonFolder,
                        initCwd: this._commonTempFolder,
                        handleOutput: true,
                        environmentPathOptions: {
                            includeRepoBin: true
                        }
                    });
                }
                catch (error) {
                    console.error(`${os.EOL} Event hook "${script}" failed. Run "rush" with --debug` +
                        ` to see detailed error information.`);
                    if (isDebug) {
                        console.error(os.EOL + error.message);
                    }
                }
            });
            stopwatch.stop();
            console.log(os.EOL + colors.green(`Event hooks finished. (${stopwatch.toString()})`));
        }
    }
}
exports.EventHooksManager = EventHooksManager;
//# sourceMappingURL=EventHooksManager.js.map