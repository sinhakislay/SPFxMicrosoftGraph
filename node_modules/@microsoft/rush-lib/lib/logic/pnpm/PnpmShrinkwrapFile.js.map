{"version":3,"file":"PnpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yaml from 'js-yaml';\r\nimport * as os from 'os';\r\nimport * as semver from 'semver';\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\r\nimport { DependencySpecifier } from '../DependencySpecifier';\r\n\r\n// This is based on PNPM's own configuration:\r\n// https://github.com/pnpm/pnpm-shrinkwrap/blob/master/src/write.ts\r\nconst SHRINKWRAP_YAML_FORMAT: yaml.DumpOptions = {\r\n  lineWidth: 1000,\r\n  noCompatMode: true,\r\n  noRefs: true,\r\n  sortKeys: true\r\n};\r\n\r\nexport interface IPnpmShrinkwrapDependencyYaml {\r\n  /** Information about the resolved package */\r\n  resolution: {\r\n    /** The hash of the tarball, to ensure archive integrity */\r\n    integrity: string;\r\n    /** The name of the tarball, if this was from a TGX file */\r\n    tarball?: string;\r\n  };\r\n  /** The list of dependencies and the resolved version */\r\n  dependencies: { [dependency: string]: string };\r\n  /** The list of optional dependencies and the resolved version */\r\n  optionalDependencies: { [dependency: string]: string };\r\n  /** The list of peer dependencies and the resolved version */\r\n  peerDependencies: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * This interface represents the raw pnpm-lock.YAML file\r\n * Example:\r\n *  {\r\n *    \"dependencies\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    },\r\n *    \"packages\": {\r\n *      \"file:projects/library1.tgz\": {\r\n *        \"dependencies: {\r\n *          \"markdown\": \"0.5.0\"\r\n *        },\r\n *        \"name\": \"@rush-temp/library1\",\r\n *        \"resolution\": {\r\n *          \"tarball\": \"file:projects/library1.tgz\"\r\n *        },\r\n *        \"version\": \"0.0.0\"\r\n *      },\r\n *      \"markdown/0.5.0\": {\r\n *        \"resolution\": {\r\n *          \"integrity\": \"sha1-KCBbVlqK51kt4gdGPWY33BgnIrI=\"\r\n *        }\r\n *      }\r\n *    },\r\n *    \"registry\": \"http://localhost:4873/\",\r\n *    \"shrinkwrapVersion\": 3,\r\n *    \"specifiers\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    }\r\n *  }\r\n */\r\ninterface IPnpmShrinkwrapYaml {\r\n  /** The list of resolved version numbers for direct dependencies */\r\n  dependencies: { [dependency: string]: string };\r\n  /** The description of the solved graph */\r\n  packages: { [dependencyVersion: string]: IPnpmShrinkwrapDependencyYaml };\r\n  /** URL of the registry which was used */\r\n  registry: string;\r\n  /** The list of specifiers used to resolve direct dependency versions */\r\n  specifiers: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * Given an encoded \"dependency key\" from the PNPM shrinkwrap file, this parses it into an equivalent\r\n * DependencySpecifier.\r\n *\r\n * @returns a SemVer string, or undefined if the version specifier cannot be parsed\r\n */\r\nexport function parsePnpmDependencyKey(dependencyName: string, dependencyKey: string): DependencySpecifier | undefined {\r\n  if (!dependencyKey) {\r\n    return undefined;\r\n  }\r\n\r\n  if (/^\\w+:/.test(dependencyKey)) {\r\n    // If it starts with an NPM scheme such as \"file:projects/my-app.tgz\", we don't support that\r\n    return undefined;\r\n  }\r\n\r\n  // The package name parsed from the dependency key, or dependencyName if it was omitted.\r\n  // Example: \"@scope/depame\"\r\n  let parsedPackageName: string;\r\n\r\n  // The trailing portion of the dependency key that includes the version and optional peer dependency path.\r\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\"\r\n  let parsedInstallPath: string;\r\n\r\n  // Example: \"path.pkgs.visualstudio.com/@scope/depame/1.4.0\"  --> 0=\"@scope/depame\" 1=\"1.4.0\"\r\n  // Example: \"/isarray/2.0.1\"                                  --> 0=\"isarray\"       1=\"2.0.1\"\r\n  // Example: \"/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7\"       --> 0=\"sinon-chai\"    1=\"2.8.0/chai@3.5.0+sinon@1.17.7\"\r\n  const packageNameMatch: RegExpMatchArray | null = /^[^\\/]*\\/((?:@[^\\/]+\\/)?[^\\/]+)\\/(.*)$/.exec(dependencyKey);\r\n  if (packageNameMatch) {\r\n    parsedPackageName = packageNameMatch[1];\r\n    parsedInstallPath = packageNameMatch[2];\r\n  } else {\r\n    parsedPackageName = dependencyName;\r\n\r\n    // Example: \"23.6.0_babel-core@6.26.3\"\r\n    // Example: \"23.6.0\"\r\n    parsedInstallPath = dependencyKey;\r\n  }\r\n\r\n  // The SemVer value\r\n  // Example: \"2.8.0\"\r\n  let parsedVersionPart: string;\r\n\r\n  // Example: \"23.6.0_babel-core@6.26.3\" --> \"23.6.0\"\r\n  // Example: \"2.8.0/chai@3.5.0+sinon@1.17.7\" --> \"2.8.0\"\r\n  const versionMatch: RegExpMatchArray | null = /^([^\\/_]+)[\\/_]/.exec(parsedInstallPath);\r\n  if (versionMatch) {\r\n    parsedVersionPart = versionMatch[1];\r\n  } else {\r\n    // Example: \"2.8.0\"\r\n    parsedVersionPart = parsedInstallPath;\r\n  }\r\n\r\n  // By this point, we expect parsedVersionPart to be a valid SemVer range\r\n  if (!parsedVersionPart) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!semver.valid(parsedVersionPart)) {\r\n    return undefined;\r\n  }\r\n\r\n  // Is it an alias for a different package?\r\n  if (parsedPackageName === dependencyName) {\r\n    // No, it's a regular dependency\r\n    return new DependencySpecifier(parsedPackageName, parsedVersionPart);\r\n  } else {\r\n    // If the parsed package name is different from the dependencyName, then this is an NPM package alias\r\n    return new DependencySpecifier(dependencyName, `npm:${parsedPackageName}@${parsedVersionPart}`);\r\n  }\r\n}\r\n\r\nexport class PnpmShrinkwrapFile extends BaseShrinkwrapFile {\r\n  /**\r\n   * The filename of the shrinkwrap file.\r\n   */\r\n  public readonly shrinkwrapFilename: string;\r\n\r\n  private _shrinkwrapJson: IPnpmShrinkwrapYaml;\r\n\r\n  public static loadFromFile(shrinkwrapYamlFilename: string): PnpmShrinkwrapFile | undefined {\r\n    try {\r\n      if (!FileSystem.exists(shrinkwrapYamlFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\r\n      // and typically very large, so we want to load it the same way that NPM does.\r\n      const parsedData: IPnpmShrinkwrapYaml = yaml.safeLoad(FileSystem.readFile(shrinkwrapYamlFilename).toString());\r\n\r\n      return new PnpmShrinkwrapFile(parsedData, shrinkwrapYamlFilename);\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapYamlFilename}\":${os.EOL}  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\r\n  }\r\n\r\n  /**\r\n   * Gets the path to the tarball file if the package is a tarball.\r\n   * Returns undefined if the package entry doesn't exist or the package isn't a tarball.\r\n   * Example of return value: file:projects/build-tools.tgz\r\n   */\r\n  public getTarballPath(packageName: string): string | undefined {\r\n    const dependency: IPnpmShrinkwrapDependencyYaml = this._shrinkwrapJson.packages[packageName];\r\n\r\n    if (!dependency) {\r\n      return undefined;\r\n    }\r\n\r\n    return dependency.resolution.tarball;\r\n  }\r\n\r\n  public getTopLevelDependencyKey(dependencyName: string): string | undefined {\r\n    return BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n  }\r\n\r\n  /**\r\n   * Gets the version number from the list of top-level dependencies in the \"dependencies\" section\r\n   * of the shrinkwrap file. Sample return values:\r\n   *   '2.1.113'\r\n   *   '1.9.0-dev.27'\r\n   *   'file:projects/empty-webpart-project.tgz'\r\n   *   undefined\r\n   *\r\n   * @override\r\n   */\r\n  public getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\r\n    let value: string | undefined = BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n    if (value) {\r\n\r\n      // Getting the top level depenedency version from a PNPM lockfile version 5.1\r\n      // --------------------------------------------------------------------------\r\n      //\r\n      // 1) Top-level tarball dependency entries in pnpm-lock.yaml look like:\r\n      //    '@rush-temp/sp-filepicker': 'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5'\r\n\r\n      //    Then, it would be defined below:\r\n      //    'file:projects/sp-filepicker.tgz_0ec79d3b08edd81ebf49cd19ca50b3f5':\r\n      //      dependencies:\r\n      //       '@microsoft/load-themed-styles': 1.10.7\r\n      //       ...\r\n      //      resolution:\r\n      //       integrity: sha512-guuoFIc**==\r\n      //       tarball: 'file:projects/sp-filepicker.tgz'\r\n\r\n      //    Here, we are interested in the part 'file:projects/sp-filepicker.tgz'. Splitting by underscores is not the\r\n      //    best way to get this because file names could have underscores in them. Instead, we could use the tarball\r\n      //    field in the resolution section.\r\n\r\n      // 2) Top-level non-tarball dependency entries in pnpm-lock.yaml would look like:\r\n      //    '@microsoft/set-webpack-public-path-plugin': 2.1.133\r\n      //    @microsoft/sp-build-node': 1.9.0-dev.27_typescript@2.9.2\r\n\r\n      //    Here, we could just split by underscores and take the first part.\r\n\r\n      // The below code is also compatible with lockfile versions < 5.1\r\n\r\n      const dependency: IPnpmShrinkwrapDependencyYaml = this._shrinkwrapJson.packages[value];\r\n\r\n      if (dependency && dependency.resolution && dependency.resolution.tarball &&\r\n        value.startsWith(dependency.resolution.tarball)) {\r\n        return new DependencySpecifier(dependencyName, dependency.resolution.tarball);\r\n      } else {\r\n        const underscoreIndex: number = value.indexOf('_');\r\n        if (underscoreIndex >= 0) {\r\n          value = value.substr(0, underscoreIndex);\r\n        }\r\n      }\r\n\r\n      return new DependencySpecifier(dependencyName, value);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * The PNPM shrinkwrap file has top-level dependencies on the temp projects like this:\r\n   *\r\n   * ```\r\n   * dependencies:\r\n   *   '@rush-temp/my-app': 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0'\r\n   * packages:\r\n   *   /@types/node/10.14.15:\r\n   *     dev: false\r\n   *   'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0':\r\n   *     dev: false\r\n   *     name: '@rush-temp/my-app'\r\n   *     version: 0.0.0\r\n   * ```\r\n   *\r\n   * We refer to 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0' as the temp project dependency key\r\n   * of the temp project '@rush-temp/my-app'.\r\n   */\r\n  public getTempProjectDependencyKey(tempProjectName: string): string | undefined {\r\n    const tempProjectDependencyKey: string | undefined =\r\n      BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, tempProjectName);\r\n\r\n    if (tempProjectDependencyKey) {\r\n      return tempProjectDependencyKey;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  public getShrinkwrapEntryFromTempProjectDependencyKey(\r\n    tempProjectDependencyKey: string\r\n  ): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    return this._shrinkwrapJson.packages[tempProjectDependencyKey];\r\n  }\r\n\r\n  public getShrinkwrapEntry(name: string, version: string): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    // Version can sometimes be in the form of a path that's already in the /name/version format.\r\n    const packageId: string = version.indexOf('/') !== -1\r\n      ? version\r\n      : `/${name}/${version}`;\r\n    return this._shrinkwrapJson.packages[packageId];\r\n  }\r\n\r\n  /**\r\n   * Serializes the PNPM Shrinkwrap file\r\n   *\r\n   * @override\r\n   */\r\n  protected serialize(): string {\r\n    return yaml.safeDump(this._shrinkwrapJson, SHRINKWRAP_YAML_FORMAT);\r\n  }\r\n\r\n  /**\r\n   * Gets the resolved version number of a dependency for a specific temp project.\r\n   * For PNPM, we can reuse the version that another project is using.\r\n   * Note that this function modifies the shrinkwrap data.\r\n   *\r\n   * @override\r\n   */\r\n  protected tryEnsureDependencyVersion(dependencySpecifier: DependencySpecifier,\r\n    tempProjectName: string): DependencySpecifier | undefined {\r\n\r\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\r\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\r\n    // or underneath the package we are looking at.\r\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\r\n    // to recreate the graph..\r\n    // Because of this, we actually need to check for a version that this package is directly\r\n    // linked to.\r\n\r\n    const packageName: string = dependencySpecifier.packageName;\r\n\r\n    const tempProjectDependencyKey: string | undefined = this.getTempProjectDependencyKey(tempProjectName);\r\n    if (!tempProjectDependencyKey) {\r\n      return undefined;\r\n    }\r\n\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\r\n      this._getPackageDescription(tempProjectDependencyKey);\r\n    if (!packageDescription) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(packageName)) {\r\n      if (dependencySpecifier.versionSpecifier) {\r\n        // this means the current temp project doesn't provide this dependency,\r\n        // however, we may be able to use a different version. we prefer the latest version\r\n        let latestVersion: string | undefined = undefined;\r\n\r\n        for (const otherTempProject of this.getTempProjectNames()) {\r\n          const otherVersionSpecifier: DependencySpecifier | undefined = this._getDependencyVersion(\r\n            dependencySpecifier.packageName, otherTempProject);\r\n\r\n          if (otherVersionSpecifier) {\r\n            const otherVersion: string = otherVersionSpecifier.versionSpecifier;\r\n\r\n            if (semver.satisfies(otherVersion, dependencySpecifier.versionSpecifier)) {\r\n              if (!latestVersion || semver.gt(otherVersion, latestVersion)) {\r\n                latestVersion = otherVersion;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (latestVersion) {\r\n          // go ahead and fixup the shrinkwrap file to point at this\r\n          const dependencies: { [key: string]: string } | undefined =\r\n            this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies || {};\r\n          dependencies[packageName] = latestVersion;\r\n          this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies = dependencies;\r\n\r\n          return new DependencySpecifier(dependencySpecifier.packageName, latestVersion);\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    const dependencyKey: string = packageDescription.dependencies[packageName];\r\n    return this._parsePnpmDependencyKey(packageName, dependencyKey);\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: IPnpmShrinkwrapYaml, shrinkwrapFilename: string) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n    this.shrinkwrapFilename = shrinkwrapFilename;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.registry) {\r\n      this._shrinkwrapJson.registry = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = { };\r\n    }\r\n    if (!this._shrinkwrapJson.specifiers) {\r\n      this._shrinkwrapJson.specifiers = { };\r\n    }\r\n    if (!this._shrinkwrapJson.packages) {\r\n      this._shrinkwrapJson.packages = { };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the version of a dependency being used by a given project\r\n   */\r\n  private _getDependencyVersion(dependencyName: string, tempProjectName: string): DependencySpecifier | undefined {\r\n    const tempProjectDependencyKey: string | undefined = this.getTempProjectDependencyKey(tempProjectName);\r\n    if (!tempProjectDependencyKey) {\r\n      throw new Error(`Cannot get dependency key for temp project: ${tempProjectName}`);\r\n    }\r\n\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined =\r\n      this._getPackageDescription(tempProjectDependencyKey);\r\n    if (!packageDescription) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {\r\n      return undefined;\r\n    }\r\n\r\n    return this._parsePnpmDependencyKey(dependencyName, packageDescription.dependencies[dependencyName]);\r\n  }\r\n\r\n  /**\r\n   * Gets the package description for a tempProject from the shrinkwrap file.\r\n   */\r\n  private _getPackageDescription(tempProjectDependencyKey: string): IPnpmShrinkwrapDependencyYaml | undefined {\r\n    const packageDescription: IPnpmShrinkwrapDependencyYaml | undefined\r\n      = BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.packages, tempProjectDependencyKey);\r\n\r\n    if (!packageDescription || !packageDescription.dependencies) {\r\n      return undefined;\r\n    }\r\n\r\n    return packageDescription;\r\n  }\r\n\r\n  private _parsePnpmDependencyKey(dependencyName: string, pnpmDependencyKey: string): DependencySpecifier | undefined {\r\n\r\n    if (pnpmDependencyKey) {\r\n      const result: DependencySpecifier | undefined = parsePnpmDependencyKey(dependencyName, pnpmDependencyKey);\r\n\r\n      if (!result) {\r\n        throw new Error(`Cannot parse PNPM shrinkwrap version specifier: \"${pnpmDependencyKey}\"`\r\n          + ` for \"${dependencyName}\"`);\r\n      }\r\n\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"]}