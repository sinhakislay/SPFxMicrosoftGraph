import { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';
import { DependencySpecifier } from '../DependencySpecifier';
export interface IPnpmShrinkwrapDependencyYaml {
    /** Information about the resolved package */
    resolution: {
        /** The hash of the tarball, to ensure archive integrity */
        integrity: string;
        /** The name of the tarball, if this was from a TGX file */
        tarball?: string;
    };
    /** The list of dependencies and the resolved version */
    dependencies: {
        [dependency: string]: string;
    };
    /** The list of optional dependencies and the resolved version */
    optionalDependencies: {
        [dependency: string]: string;
    };
    /** The list of peer dependencies and the resolved version */
    peerDependencies: {
        [dependency: string]: string;
    };
}
/**
 * Given an encoded "dependency key" from the PNPM shrinkwrap file, this parses it into an equivalent
 * DependencySpecifier.
 *
 * @returns a SemVer string, or undefined if the version specifier cannot be parsed
 */
export declare function parsePnpmDependencyKey(dependencyName: string, dependencyKey: string): DependencySpecifier | undefined;
export declare class PnpmShrinkwrapFile extends BaseShrinkwrapFile {
    /**
     * The filename of the shrinkwrap file.
     */
    readonly shrinkwrapFilename: string;
    private _shrinkwrapJson;
    static loadFromFile(shrinkwrapYamlFilename: string): PnpmShrinkwrapFile | undefined;
    /** @override */
    getTempProjectNames(): ReadonlyArray<string>;
    /**
     * Gets the path to the tarball file if the package is a tarball.
     * Returns undefined if the package entry doesn't exist or the package isn't a tarball.
     * Example of return value: file:projects/build-tools.tgz
     */
    getTarballPath(packageName: string): string | undefined;
    getTopLevelDependencyKey(dependencyName: string): string | undefined;
    /**
     * Gets the version number from the list of top-level dependencies in the "dependencies" section
     * of the shrinkwrap file. Sample return values:
     *   '2.1.113'
     *   '1.9.0-dev.27'
     *   'file:projects/empty-webpart-project.tgz'
     *   undefined
     *
     * @override
     */
    getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined;
    /**
     * The PNPM shrinkwrap file has top-level dependencies on the temp projects like this:
     *
     * ```
     * dependencies:
     *   '@rush-temp/my-app': 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0'
     * packages:
     *   /@types/node/10.14.15:
     *     dev: false
     *   'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0':
     *     dev: false
     *     name: '@rush-temp/my-app'
     *     version: 0.0.0
     * ```
     *
     * We refer to 'file:projects/my-app.tgz_25c559a5921686293a001a397be4dce0' as the temp project dependency key
     * of the temp project '@rush-temp/my-app'.
     */
    getTempProjectDependencyKey(tempProjectName: string): string | undefined;
    getShrinkwrapEntryFromTempProjectDependencyKey(tempProjectDependencyKey: string): IPnpmShrinkwrapDependencyYaml | undefined;
    getShrinkwrapEntry(name: string, version: string): IPnpmShrinkwrapDependencyYaml | undefined;
    /**
     * Serializes the PNPM Shrinkwrap file
     *
     * @override
     */
    protected serialize(): string;
    /**
     * Gets the resolved version number of a dependency for a specific temp project.
     * For PNPM, we can reuse the version that another project is using.
     * Note that this function modifies the shrinkwrap data.
     *
     * @override
     */
    protected tryEnsureDependencyVersion(dependencySpecifier: DependencySpecifier, tempProjectName: string): DependencySpecifier | undefined;
    private constructor();
    /**
     * Returns the version of a dependency being used by a given project
     */
    private _getDependencyVersion;
    /**
     * Gets the package description for a tempProject from the shrinkwrap file.
     */
    private _getPackageDescription;
    private _parsePnpmDependencyKey;
}
//# sourceMappingURL=PnpmShrinkwrapFile.d.ts.map