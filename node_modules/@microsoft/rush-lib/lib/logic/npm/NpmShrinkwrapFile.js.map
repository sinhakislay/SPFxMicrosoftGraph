{"version":3,"file":"NpmShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/npm/NpmShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as os from 'os';\r\n\r\nimport {\r\n  JsonFile,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  BaseShrinkwrapFile\r\n} from '../base/BaseShrinkwrapFile';\r\nimport { DependencySpecifier } from '../DependencySpecifier';\r\n\r\ninterface INpmShrinkwrapDependencyJson {\r\n  version: string;\r\n  from: string;\r\n  resolved: string;\r\n  dependencies: { [dependency: string]: INpmShrinkwrapDependencyJson };\r\n}\r\n\r\ninterface INpmShrinkwrapJson {\r\n  name: string;\r\n  version: string;\r\n  dependencies: { [dependency: string]: INpmShrinkwrapDependencyJson };\r\n}\r\n\r\nexport class NpmShrinkwrapFile extends BaseShrinkwrapFile {\r\n  private _shrinkwrapJson: INpmShrinkwrapJson;\r\n\r\n  public static loadFromFile(shrinkwrapJsonFilename: string): NpmShrinkwrapFile | undefined {\r\n    let data: string | undefined = undefined;\r\n    try {\r\n      if (!FileSystem.exists(shrinkwrapJsonFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\r\n      // and typically very large, so we want to load it the same way that NPM does.\r\n      data = FileSystem.readFile(shrinkwrapJsonFilename);\r\n      if (data.charCodeAt(0) === 0xFEFF) {  // strip BOM\r\n        data = data.slice(1);\r\n      }\r\n\r\n      return new NpmShrinkwrapFile(JSON.parse(data));\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapJsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\r\n  }\r\n\r\n  /** @override */\r\n  protected serialize(): string {\r\n    return JsonFile.stringify(this._shrinkwrapJson);\r\n  }\r\n\r\n  /** @override */\r\n  protected getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\r\n     // First, check under tempProjectName, as this is the first place \"rush link\" looks.\r\n    const dependencyJson: INpmShrinkwrapDependencyJson | undefined =\r\n      NpmShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n\r\n     if (!dependencyJson) {\r\n       return undefined;\r\n     }\r\n\r\n     return new DependencySpecifier(dependencyName, dependencyJson.version);\r\n  }\r\n\r\n  /**\r\n   * @param dependencyName the name of the dependency to get a version for\r\n   * @param tempProjectName the name of the temp project to check for this dependency\r\n   * @param versionRange Not used, just exists to satisfy abstract API contract\r\n   * @override\r\n   */\r\n  protected tryEnsureDependencyVersion(dependencySpecifier: DependencySpecifier,\r\n    tempProjectName: string): DependencySpecifier | undefined {\r\n\r\n    // First, check under tempProjectName, as this is the first place \"rush link\" looks.\r\n    let dependencyJson: INpmShrinkwrapDependencyJson | undefined = undefined;\r\n\r\n    const tempDependency: INpmShrinkwrapDependencyJson | undefined = NpmShrinkwrapFile.tryGetValue(\r\n      this._shrinkwrapJson.dependencies, tempProjectName);\r\n    if (tempDependency && tempDependency.dependencies) {\r\n      dependencyJson = NpmShrinkwrapFile.tryGetValue(tempDependency.dependencies, dependencySpecifier.packageName);\r\n    }\r\n\r\n    // Otherwise look at the root of the shrinkwrap file\r\n    if (!dependencyJson) {\r\n      return this.getTopLevelDependencyVersion(dependencySpecifier.packageName);\r\n    }\r\n\r\n    return new DependencySpecifier(dependencySpecifier.packageName, dependencyJson.version);\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: INpmShrinkwrapJson) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.version) {\r\n      this._shrinkwrapJson.version = '';\r\n    }\r\n    if (!this._shrinkwrapJson.name) {\r\n      this._shrinkwrapJson.name = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = { };\r\n    }\r\n  }\r\n}"]}