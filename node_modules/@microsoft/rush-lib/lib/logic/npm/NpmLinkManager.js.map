{"version":3,"file":"NpmLinkManager.js","sourceRoot":"","sources":["../../../src/logic/npm/NpmLinkManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport * as tar from 'tar';\r\nimport readPackageTree = require('read-package-tree');\r\n\r\nimport {\r\n  JsonFile,\r\n  PackageName,\r\n  FileSystem,\r\n  FileConstants,\r\n  LegacyAdapters\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { IRushLinkJson } from '../../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport {\r\n  NpmPackage,\r\n  IResolveOrCreateResult,\r\n  PackageDependencyKind\r\n} from './NpmPackage';\r\nimport { PackageLookup } from '../PackageLookup';\r\nimport {\r\n  BaseLinkManager,\r\n  SymlinkKind\r\n} from '../base/BaseLinkManager';\r\n\r\ninterface IQueueItem {\r\n  // A project from somewhere under \"common/temp/node_modules\"\r\n  commonPackage: NpmPackage;\r\n\r\n  // A symlinked virtual package that we will create somewhere under \"this-project/node_modules\"\r\n  localPackage: NpmPackage;\r\n\r\n  // If we encounter a dependency listed in cyclicDependencyProjects, this will be set to the root\r\n  // of the localPackage subtree where we will stop creating local links.\r\n  cyclicSubtreeRoot: NpmPackage | undefined;\r\n}\r\n\r\nexport class NpmLinkManager extends BaseLinkManager {\r\n  protected _linkProjects(): Promise<void> {\r\n    return LegacyAdapters.convertCallbackToPromise<readPackageTree.PackageNode, Error, string>(\r\n      readPackageTree,\r\n      this._rushConfiguration.commonTempFolder\r\n    ).then(\r\n      (npmPackage: readPackageTree.PackageNode) => {\r\n        const commonRootPackage: NpmPackage = NpmPackage.createFromNpm(npmPackage);\r\n\r\n        const commonPackageLookup: PackageLookup = new PackageLookup();\r\n        commonPackageLookup.loadTree(commonRootPackage);\r\n\r\n        const rushLinkJson: IRushLinkJson = {\r\n          localLinks: {}\r\n        };\r\n\r\n        for (const rushProject of this._rushConfiguration.projects) {\r\n          console.log(os.EOL + 'LINKING: ' + rushProject.packageName);\r\n          this._linkProject(rushProject, commonRootPackage, commonPackageLookup, rushLinkJson);\r\n        }\r\n\r\n        console.log(`Writing \"${this._rushConfiguration.rushLinkJsonFilename}\"`);\r\n        JsonFile.save(rushLinkJson, this._rushConfiguration.rushLinkJsonFilename);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This is called once for each local project from Rush.json.\r\n   * @param project             The local project that we will create symlinks for\r\n   * @param commonRootPackage   The common/temp/package.json package\r\n   * @param commonPackageLookup A dictionary for finding packages under common/temp/node_modules\r\n   * @param rushConfiguration   The rush.json file contents\r\n   * @param rushLinkJson        The common/temp/rush-link.json output file\r\n   * @param options             Command line options for \"rush link\"\r\n   */\r\n  private _linkProject(\r\n    project: RushConfigurationProject,\r\n    commonRootPackage: NpmPackage,\r\n    commonPackageLookup: PackageLookup,\r\n    rushLinkJson: IRushLinkJson): void {\r\n\r\n    let commonProjectPackage: NpmPackage | undefined =\r\n      commonRootPackage.getChildByName(project.tempProjectName) as NpmPackage;\r\n    if (!commonProjectPackage) {\r\n      // Normally we would expect the temp project to have been installed into the common\\node_modules\r\n      // folder.  However, if it was recently added, \"rush install\" doesn't technically require\r\n      // this, as long as its dependencies can be found at the root of the NPM shrinkwrap file.\r\n      // This avoids the need to run \"rush generate\" unnecessarily.\r\n\r\n      // Example: \"project1\"\r\n      const unscopedTempProjectName: string = PackageName.getUnscopedName(project.tempProjectName);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\r\n      const extractedFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        RushConstants.rushTempProjectsFolderName, unscopedTempProjectName);\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1.tgz\"\r\n      const tarballFile: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        RushConstants.rushTempProjectsFolderName, unscopedTempProjectName + '.tgz');\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\\package.json\"\r\n      const packageJsonFilename: string = path.join(extractedFolder, 'package', FileConstants.PackageJson);\r\n\r\n      Utilities.createFolderWithRetry(extractedFolder);\r\n      tar.extract({\r\n        cwd: extractedFolder,\r\n        file: tarballFile,\r\n        sync: true\r\n      });\r\n\r\n      // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\"\r\n      const installFolderName: string = path.join(this._rushConfiguration.commonTempFolder,\r\n        RushConstants.nodeModulesFolderName, RushConstants.rushTempNpmScope, unscopedTempProjectName);\r\n\r\n      commonProjectPackage = NpmPackage.createVirtualTempPackage(packageJsonFilename, installFolderName);\r\n\r\n      // remove the extracted tarball contents\r\n      FileSystem.deleteFile(packageJsonFilename);\r\n      FileSystem.deleteFile(extractedFolder);\r\n\r\n      commonRootPackage.addChild(commonProjectPackage);\r\n    }\r\n\r\n    // TODO: Validate that the project's package.json still matches the common folder\r\n    const localProjectPackage: NpmPackage = NpmPackage.createLinkedNpmPackage(\r\n      project.packageJsonEditor.name,\r\n      commonProjectPackage.version,\r\n      commonProjectPackage.dependencies,\r\n      project.projectFolder\r\n    );\r\n\r\n    const queue: IQueueItem[] = [];\r\n    queue.push({\r\n      commonPackage: commonProjectPackage,\r\n      localPackage: localProjectPackage,\r\n      cyclicSubtreeRoot: undefined\r\n    });\r\n\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      const queueItem: IQueueItem | undefined = queue.shift();\r\n      if (!queueItem) {\r\n        break;\r\n      }\r\n\r\n      // A project from somewhere under \"common/temp/node_modules\"\r\n      const commonPackage: NpmPackage = queueItem.commonPackage;\r\n\r\n      // A symlinked virtual package somewhere under \"this-project/node_modules\",\r\n      // where \"this-project\" corresponds to the \"project\" parameter for linkProject().\r\n      const localPackage: NpmPackage = queueItem.localPackage;\r\n\r\n      // If we encounter a dependency listed in cyclicDependencyProjects, this will be set to the root\r\n      // of the localPackage subtree where we will stop creating local links.\r\n      const cyclicSubtreeRoot: NpmPackage | undefined = queueItem.cyclicSubtreeRoot;\r\n\r\n      // NOTE: It's important that this traversal follows the dependencies in the Common folder,\r\n      // because for Rush projects this will be the union of\r\n      // devDependencies / dependencies / optionalDependencies.\r\n      for (const dependency of commonPackage.dependencies) {\r\n        let startingCyclicSubtree: boolean = false;\r\n\r\n        // Should this be a \"local link\" to a top-level Rush project (i.e. versus a regular link\r\n        // into the Common folder)?\r\n        const matchedRushPackage: RushConfigurationProject | undefined =\r\n          this._rushConfiguration.getProjectByName(dependency.name);\r\n\r\n        if (matchedRushPackage) {\r\n          const matchedVersion: string = matchedRushPackage.packageJsonEditor.version;\r\n\r\n          // The dependency name matches an Rush project, but are there any other reasons not\r\n          // to create a local link?\r\n          if (cyclicSubtreeRoot) {\r\n            // DO NOT create a local link, because this is part of an existing\r\n            // cyclicDependencyProjects subtree\r\n          } else if (project.cyclicDependencyProjects.has(dependency.name)) {\r\n            // DO NOT create a local link, because we are starting a new\r\n            // cyclicDependencyProjects subtree\r\n            startingCyclicSubtree = true;\r\n          } else if (dependency.kind !== PackageDependencyKind.LocalLink\r\n            && !semver.satisfies(matchedVersion, dependency.versionRange)) {\r\n            // DO NOT create a local link, because the local project's version isn't SemVer compatible.\r\n\r\n            // (Note that in order to make version bumping work as expected, we ignore SemVer for\r\n            // immediate dependencies of top-level projects, indicated by PackageDependencyKind.LocalLink.\r\n            // Is this wise?)\r\n\r\n            console.log(colors.yellow(`Rush will not locally link ${dependency.name} for ${localPackage.name}`\r\n              + ` because the requested version \"${dependency.versionRange}\" is incompatible`\r\n              + ` with the local version ${matchedVersion}`));\r\n          } else {\r\n            // Yes, it is compatible, so create a symlink to the Rush project.\r\n\r\n            // If the link is coming from our top-level Rush project, then record a\r\n            // build dependency in rush-link.json:\r\n            if (localPackage === localProjectPackage) {\r\n              let localLinks: string[] = rushLinkJson.localLinks[localPackage.name];\r\n              if (!localLinks) {\r\n                localLinks = [];\r\n                rushLinkJson.localLinks[localPackage.name] = localLinks;\r\n              }\r\n              localLinks.push(dependency.name);\r\n            }\r\n\r\n            // Is the dependency already resolved?\r\n            const resolution: IResolveOrCreateResult = localPackage.resolveOrCreate(dependency.name);\r\n\r\n            if (!resolution.found || resolution.found.version !== matchedVersion) {\r\n              // We did not find a suitable match, so place a new local package that\r\n              // symlinks to the Rush project\r\n              const newLocalFolderPath: string = path.join(\r\n                resolution.parentForCreate!.folderPath, 'node_modules', dependency.name);\r\n\r\n              const newLocalPackage: NpmPackage = NpmPackage.createLinkedNpmPackage(\r\n                dependency.name,\r\n                matchedVersion,\r\n                // Since matchingRushProject does not have a parent, its dependencies are\r\n                // guaranteed to be already fully resolved inside its node_modules folder.\r\n                [],\r\n                newLocalFolderPath\r\n              );\r\n\r\n              newLocalPackage.symlinkTargetFolderPath = matchedRushPackage.projectFolder;\r\n\r\n              resolution.parentForCreate!.addChild(newLocalPackage);\r\n\r\n              // (There are no dependencies, so we do not need to push it onto the queue.)\r\n            }\r\n\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // We can't symlink to an Rush project, so instead we will symlink to a folder\r\n        // under the \"Common\" folder\r\n        const commonDependencyPackage: NpmPackage | undefined = commonPackage.resolve(dependency.name);\r\n        if (commonDependencyPackage) {\r\n          // This is the version that was chosen when \"npm install\" ran in the common folder\r\n          const effectiveDependencyVersion: string | undefined = commonDependencyPackage.version;\r\n\r\n          // Is the dependency already resolved?\r\n          let resolution: IResolveOrCreateResult;\r\n          if (!cyclicSubtreeRoot || !matchedRushPackage) {\r\n            // Perform normal module resolution.\r\n            resolution = localPackage.resolveOrCreate(dependency.name);\r\n          } else {\r\n            // We are inside a cyclicDependencyProjects subtree (i.e. cyclicSubtreeRoot != undefined),\r\n            // and the dependency is a local project (i.e. matchedRushPackage != undefined), so\r\n            // we use a special module resolution strategy that places everything under the\r\n            // cyclicSubtreeRoot.\r\n            resolution = localPackage.resolveOrCreate(dependency.name, cyclicSubtreeRoot);\r\n          }\r\n\r\n          if (!resolution.found || resolution.found.version !== effectiveDependencyVersion) {\r\n            // We did not find a suitable match, so place a new local package\r\n\r\n            const newLocalFolderPath: string = path.join(\r\n              resolution.parentForCreate!.folderPath, 'node_modules', commonDependencyPackage.name);\r\n\r\n            const newLocalPackage: NpmPackage = NpmPackage.createLinkedNpmPackage(\r\n              commonDependencyPackage.name,\r\n              commonDependencyPackage.version,\r\n              commonDependencyPackage.dependencies,\r\n              newLocalFolderPath\r\n            );\r\n\r\n            const commonPackageFromLookup: NpmPackage | undefined =\r\n              commonPackageLookup.getPackage(newLocalPackage.nameAndVersion) as NpmPackage;\r\n            if (!commonPackageFromLookup) {\r\n              throw new Error(`The ${localPackage.name}@${localPackage.version} package was not found`\r\n                + ` in the common folder`);\r\n            }\r\n            newLocalPackage.symlinkTargetFolderPath = commonPackageFromLookup.folderPath;\r\n\r\n            let newCyclicSubtreeRoot: NpmPackage | undefined = cyclicSubtreeRoot;\r\n            if (startingCyclicSubtree) {\r\n              // If we are starting a new subtree, then newLocalPackage will be its root\r\n              // NOTE: cyclicSubtreeRoot is guaranteed to be undefined here, since we never start\r\n              // a new tree inside an existing tree\r\n              newCyclicSubtreeRoot = newLocalPackage;\r\n            }\r\n\r\n            resolution.parentForCreate!.addChild(newLocalPackage);\r\n            queue.push({\r\n              commonPackage: commonDependencyPackage,\r\n              localPackage: newLocalPackage,\r\n              cyclicSubtreeRoot: newCyclicSubtreeRoot\r\n            });\r\n          }\r\n        } else {\r\n          if (dependency.kind !== PackageDependencyKind.Optional) {\r\n            throw new Error(`The dependency \"${dependency.name}\" needed by \"${localPackage.name}\"`\r\n              + ` was not found in the common folder -- do you need to run \"rush install\"?`);\r\n          } else {\r\n            console.log('Skipping optional dependency: ' + dependency.name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // When debugging, you can uncomment this line to dump the data structure\r\n    // to the console:\r\n    // localProjectPackage.printTree();\r\n\r\n    NpmLinkManager._createSymlinksForTopLevelProject(localProjectPackage);\r\n\r\n    // Also symlink the \".bin\" folder\r\n    if (localProjectPackage.children.length > 0) {\r\n      const commonBinFolder: string = path.join(this._rushConfiguration.commonTempFolder, 'node_modules', '.bin');\r\n      const projectBinFolder: string = path.join(localProjectPackage.folderPath, 'node_modules', '.bin');\r\n\r\n      if (FileSystem.exists(commonBinFolder)) {\r\n        NpmLinkManager._createSymlink({\r\n          linkTargetPath: commonBinFolder,\r\n          newLinkPath: projectBinFolder,\r\n          symlinkKind: SymlinkKind.Directory\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}