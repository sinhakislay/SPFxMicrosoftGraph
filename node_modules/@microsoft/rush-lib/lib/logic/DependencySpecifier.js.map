{"version":3,"file":"DependencySpecifier.js","sourceRoot":"","sources":["../../src/logic/DependencySpecifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iDAAkD;AAClD,oEAA6D;AAE7D;;;;GAIG;AACH,MAAa,mBAAmB;IAiC9B,YAAmB,WAAmB,EAAE,gBAAwB;QAC9D,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAEzC,MAAM,MAAM,GAA0B,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;QAE3F,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC;QAEjC,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE;gBAC3C,MAAM,IAAI,iCAAa,CAAC,wCAAwC,CAAC,CAAC;aACnE;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACzF;aAAM;YACL,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;SAC9B;IACH,CAAC;CACF;AAlDD,kDAkDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport npmPackageArg = require('npm-package-arg');\r\nimport { InternalError } from '@microsoft/node-core-library';\r\n\r\n/**\r\n * An NPM \"version specifier\" is a string that can appear as a package.json \"dependencies\" value.\r\n * Example version specifiers: `^1.2.3`, `file:./blah.tgz`, `npm:other-package@~1.2.3`, and so forth.\r\n * A \"dependency specifier\" is the version specifier information, combined with the dependency package name.\r\n */\r\nexport class DependencySpecifier {\r\n  /**\r\n   * The dependency package name, i.e. the key from a \"dependencies\" key/value table.\r\n   */\r\n  public readonly packageName: string;\r\n\r\n  /**\r\n   * The dependency version specifier, i.e. the value from a \"dependencies\" key/value table.\r\n   * Example values: `^1.2.3`, `file:./blah.tgz`, `npm:other-package@~1.2.3`\r\n   */\r\n  public readonly versionSpecifier: string;\r\n\r\n  /**\r\n   * The type of `versionSpecifier`:\r\n   *\r\n   * git - a git repository\r\n   * tag - a tagged version, e.g. \"example@latest\"\r\n   * version - A specific version number, e.g. \"example@1.2.3\"\r\n   * range - A version range, e.g. \"example@2.x\"\r\n   * file - A local .tar.gz, .tar or .tgz file\r\n   * directory - A local directory\r\n   * remote - An HTTP url to a .tar.gz, .tar or .tgz file\r\n   * alias - A package alias such as \"npm:other-package@^1.2.3\"\r\n   */\r\n  public readonly specifierType: npmPackageArg.SpecType;\r\n\r\n  /**\r\n   * If `specifierType` is `alias`, then this is the parsed target dependency.\r\n   * For example, if version specifier i `\"npm:other-package@^1.2.3\"` then this is the parsed object for\r\n   * `other-package@^1.2.3`.\r\n   */\r\n  public readonly aliasTarget: DependencySpecifier | undefined;\r\n\r\n  public constructor(packageName: string, versionSpecifier: string) {\r\n    this.packageName = packageName;\r\n    this.versionSpecifier = versionSpecifier;\r\n\r\n    const result: npmPackageArg.IResult = npmPackageArg.resolve(packageName, versionSpecifier);\r\n\r\n    this.specifierType = result.type;\r\n\r\n    if (result.type === 'alias') {\r\n      if (!result.subSpec || !result.subSpec.name) {\r\n        throw new InternalError('Unexpected result from npm-package-arg');\r\n      }\r\n      this.aliasTarget = new DependencySpecifier(result.subSpec.name, result.subSpec.rawSpec);\r\n    } else {\r\n      this.aliasTarget = undefined;\r\n    }\r\n  }\r\n}\r\n"]}