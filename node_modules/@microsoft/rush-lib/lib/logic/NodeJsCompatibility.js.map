{"version":3,"file":"NodeJsCompatibility.js","sourceRoot":"","sources":["../../src/logic/NodeJsCompatibility.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,iCAAiC;AAIjC;;;GAGG;AACH,MAAM,yBAAyB,GAAW,EAAE,CAAC;AAC7C,MAAM,WAAW,GAAW,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;AAClD,MAAM,gBAAgB,GAAW,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AAW3D;;;;GAIG;AACH,MAAa,mBAAmB;IACvB,MAAM,CAAC,4BAA4B,CAAC,OAA6C;QACtF,8BAA8B;QAC9B,OAAO,CACL,mBAAmB,CAAC,sBAAsB,EAAE;YAC5C,mBAAmB,CAAC,sBAAsB,CAAC,OAAO,CAAC;YACnD,mBAAmB,CAAC,2BAA2B,EAAE;YACjD,mBAAmB,CAAC,sBAAsB,CAAC,OAAO,CAAC,iBAAiB,CAAC,CACtE,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,sBAAsB;QAClC,IAAI,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE;YAC5C,8EAA8E;YAC9E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CACtB,4BAA4B,WAAW,4CAA4C;gBACnF,+DAA+D,CAChE,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEM,MAAM,CAAC,sBAAsB,CAAC,OAAuC;QAC1E,IAAI,CAAC,OAAO,CAAC,8BAA8B,IAAI,gBAAgB,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC,EAAE;YAClG,iEAAiE;YACjE,IAAI,OAAO,CAAC,SAAS,EAAE;gBACrB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CACxB,4BAA4B,WAAW,0CAA0C;oBACjF,wFAAwF;oBACxF,yBAAyB,CAC1B,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CACxB,4BAA4B,WAAW,0CAA0C;oBACjF,+EAA+E;oBAC/E,kCAAkC,CACnC,CAAC,CAAC;aACJ;YAED,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEM,MAAM,CAAC,sBAAsB,CAAC,iBAAgD;QACpF,IACG,iBAAiB;YACjB,CAAC,iBAAiB,CAAC,sBAAsB;YACzC,CAAC,mBAAmB,CAAC,YAAY,EACjC;YACA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CACxB,4BAA4B,WAAW,8CAA8C;gBACrF,mFAAmF,CACpF,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEM,MAAM,CAAC,2BAA2B;QACvC,IAAI,mBAAmB,CAAC,oBAAoB,EAAE;YAC5C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CACxB,4BAA4B,WAAW,gCAAgC;gBACvE,4FAA4F;gBAC5F,kBAAkB,CACnB,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEM,MAAM,KAAK,YAAY;QAC3B,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;IAChC,CAAC;IAEM,MAAM,KAAK,oBAAoB;QACpC,OAAO,CAAC,gBAAgB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CACF;AAtFD,kDAsFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as semver from 'semver';\r\n\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\n\r\n/**\r\n * This constant is the major version of the next LTS node Node.js release. This constant should be updated when\r\n * a new LTS version is added to Rush's support matrix.\r\n */\r\nconst UPCOMING_NODE_LTS_VERSION: number = 12;\r\nconst nodeVersion: string = process.versions.node;\r\nconst nodeMajorVersion: number = semver.major(nodeVersion);\r\n\r\nexport interface IWarnAboutVersionTooNewOptions {\r\n  isRushLib: boolean;\r\n  alreadyReportedNodeTooNewError: boolean;\r\n}\r\n\r\nexport interface IWarnAboutCompatibilityIssuesOptions extends IWarnAboutVersionTooNewOptions {\r\n  rushConfiguration: RushConfiguration | undefined;\r\n}\r\n\r\n/**\r\n * This class provides useful functions for warning if the current Node.js runtime isn't supported.\r\n *\r\n * @internal\r\n */\r\nexport class NodeJsCompatibility {\r\n  public static warnAboutCompatibilityIssues(options: IWarnAboutCompatibilityIssuesOptions): boolean {\r\n    // Only show the first warning\r\n    return (\r\n      NodeJsCompatibility.warnAboutVersionTooOld() ||\r\n      NodeJsCompatibility.warnAboutVersionTooNew(options) ||\r\n      NodeJsCompatibility.warnAboutOddNumberedVersion() ||\r\n      NodeJsCompatibility.warnAboutNonLtsVersion(options.rushConfiguration)\r\n    );\r\n  }\r\n\r\n  public static warnAboutVersionTooOld(): boolean {\r\n    if (semver.satisfies(nodeVersion, '< 8.9.0')) {\r\n      // We are on an ancient version of Node.js that is known not to work with Rush\r\n      console.error(colors.red(\r\n        `Your version of Node.js (${nodeVersion}) is very old and incompatible with Rush. ` +\r\n        `Please upgrade to the latest Long-Term Support (LTS) version.`\r\n      ));\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public static warnAboutVersionTooNew(options: IWarnAboutVersionTooNewOptions): boolean {\r\n    if (!options.alreadyReportedNodeTooNewError && nodeMajorVersion >= (UPCOMING_NODE_LTS_VERSION + 1)) {\r\n      // We are on a much newer release than we have tested and support\r\n      if (options.isRushLib) {\r\n        console.warn(colors.yellow(\r\n          `Your version of Node.js (${nodeVersion}) has not been tested with this release ` +\r\n          `of the Rush engine. Please consider upgrading the \"rushVersion\" setting in rush.json, ` +\r\n          `or downgrading Node.js.`\r\n        ));\r\n      } else {\r\n        console.warn(colors.yellow(\r\n          `Your version of Node.js (${nodeVersion}) has not been tested with this release ` +\r\n          `of Rush. Please consider installing a newer version of the \"@microsoft/rush\" ` +\r\n          `package, or downgrading Node.js.`\r\n        ));\r\n      }\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public static warnAboutNonLtsVersion(rushConfiguration: RushConfiguration | undefined): boolean {\r\n   if (\r\n      rushConfiguration &&\r\n      !rushConfiguration.suppressNodeLtsWarning &&\r\n      !NodeJsCompatibility.isLtsVersion\r\n    ) {\r\n      console.warn(colors.yellow(\r\n        `Your version of Node.js (${nodeVersion}) is not a Long-Term Support (LTS) release. ` +\r\n        'These versions frequently have bugs. Please consider installing a stable release.'\r\n      ));\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public static warnAboutOddNumberedVersion(): boolean {\r\n    if (NodeJsCompatibility.isOddNumberedVersion) {\r\n      console.warn(colors.yellow(\r\n        `Your version of Node.js (${nodeVersion}) is an odd-numbered release. ` +\r\n        `These releases frequently have bugs. Please consider installing a Long Term Support (LTS) ` +\r\n        `version instead.`\r\n      ));\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public static get isLtsVersion(): boolean {\r\n     return !!process.release.lts;\r\n  }\r\n\r\n  public static get isOddNumberedVersion(): boolean {\r\n    return (nodeMajorVersion % 2) !== 0;\r\n  }\r\n}\r\n"]}