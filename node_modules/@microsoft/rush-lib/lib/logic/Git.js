"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const gitInfo = require("git-repo-info");
const os = require("os");
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const Utilities_1 = require("../utilities/Utilities");
const AlreadyReportedError_1 = require("../utilities/AlreadyReportedError");
const GitEmailPolicy_1 = require("./policy/GitEmailPolicy");
class Git {
    /**
     * Returns the path to the Git binary if found. Otherwise, return undefined.
     */
    static getGitPath() {
        if (!Git._checkedGitPath) {
            Git._gitPath = node_core_library_1.Executable.tryResolve('git');
            Git._checkedGitPath = true;
        }
        return Git._gitPath;
    }
    /**
     * Returns true if the Git binary can be found.
     */
    static isGitPresent() {
        return !!Git.getGitPath();
    }
    /**
     * Returns true if the Git binary was found and the current path is under a Git working tree.
     * @param repoInfo - If provided, do the check based on this Git repo info. If not provided,
     * the result of `Git.getGitInfo()` is used.
     */
    static isPathUnderGitWorkingTree(repoInfo) {
        if (Git.isGitPresent()) { // Do we even have a Git binary?
            if (!repoInfo) {
                repoInfo = Git.getGitInfo();
            }
            return !!(repoInfo && repoInfo.sha);
        }
        else {
            return false;
        }
    }
    /**
     * If a Git email address is configured and is nonempty, this returns it.
     * Otherwise, undefined is returned.
     */
    static tryGetGitEmail(rushConfiguration) {
        const emailResult = Git._tryGetGitEmail();
        if (emailResult.result !== undefined && emailResult.result.length > 0) {
            return emailResult.result;
        }
        return undefined;
    }
    /**
     * If a Git email address is configured and is nonempty, this returns it.
     * Otherwise, configuration instructions are printed to the console,
     * and AlreadyReportedError is thrown.
     */
    static getGitEmail(rushConfiguration) {
        // Determine the user's account
        // Ex: "bob@example.com"
        const emailResult = Git._tryGetGitEmail();
        if (emailResult.error) {
            console.log([
                `Error: ${emailResult.error.message}`,
                'Unable to determine your Git configuration using this command:',
                '',
                '    git config user.email',
                ''
            ].join(os.EOL));
            throw new AlreadyReportedError_1.AlreadyReportedError();
        }
        if (emailResult.result === undefined || emailResult.result.length === 0) {
            console.log([
                'This operation requires that a Git email be specified.',
                '',
                `If you didn't configure your email yet, try something like this:`,
                '',
                ...GitEmailPolicy_1.GitEmailPolicy.getEmailExampleLines(rushConfiguration),
                ''
            ].join(os.EOL));
            throw new AlreadyReportedError_1.AlreadyReportedError();
        }
        return emailResult.result;
    }
    /**
     * Get the folder where Git hooks should go for the current working tree.
     * Returns undefined if the current path is not under a Git working tree.
     */
    static getHooksFolder() {
        const repoInfo = Git.getGitInfo();
        if (repoInfo && repoInfo.worktreeGitDir) {
            return path.join(repoInfo.worktreeGitDir, 'hooks');
        }
        return undefined;
    }
    /**
     * Get information about the current Git working tree.
     * Returns undefined if the current path is not under a Git working tree.
     */
    static getGitInfo() {
        if (!Git._checkedGitInfo) {
            let repoInfo;
            try {
                // gitInfo() shouldn't usually throw, but wrapping in a try/catch just in case
                repoInfo = gitInfo();
            }
            catch (ex) {
                // if there's an error, assume we're not in a Git working tree
            }
            if (repoInfo && Git.isPathUnderGitWorkingTree(repoInfo)) {
                Git._gitInfo = repoInfo;
            }
            Git._checkedGitInfo = true;
        }
        return Git._gitInfo;
    }
    static _tryGetGitEmail() {
        if (Git._gitEmailResult === undefined) {
            if (!Git.isGitPresent()) {
                Git._gitEmailResult = {
                    error: new Error('Git isn\'t present on the path')
                };
            }
            else {
                try {
                    Git._gitEmailResult = {
                        result: Utilities_1.Utilities.executeCommandAndCaptureOutput('git', ['config', 'user.email'], '.').trim()
                    };
                }
                catch (e) {
                    Git._gitEmailResult = {
                        error: e
                    };
                }
            }
        }
        return Git._gitEmailResult;
    }
}
Git._checkedGitPath = false;
Git._checkedGitInfo = false;
Git._gitEmailResult = undefined;
exports.Git = Git;
//# sourceMappingURL=Git.js.map