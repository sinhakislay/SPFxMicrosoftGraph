import { LastInstallFlag } from '../api/LastInstallFlag';
import { PurgeManager } from './PurgeManager';
import { RushConfiguration } from '../api/RushConfiguration';
import { RushGlobalFolder } from '../api/RushGlobalFolder';
export interface CreateOptions {
    /**
     * "Set to true to omit writing mtime values for entries. Note that this prevents using other
     * mtime-based features like tar.update or the keepNewer option with the resulting tar archive."
     */
    noMtime?: boolean;
}
export interface IInstallManagerOptions {
    /**
     * Whether the global "--debug" flag was specified.
     */
    debug: boolean;
    /**
     * Whether or not Rush will automatically update the shrinkwrap file.
     * True for "rush update", false for "rush install".
     */
    allowShrinkwrapUpdates: boolean;
    /**
     * Whether to skip policy checks.
     */
    bypassPolicy: boolean;
    /**
     * Whether to skip linking, i.e. require "rush link" to be done manually later.
     */
    noLink: boolean;
    /**
     * Whether to delete the shrinkwrap file before installation, i.e. so that all dependenices
     * will be upgraded to the latest SemVer-compatible version.
     */
    fullUpgrade: boolean;
    /**
     * Whether to force an update to the shrinkwrap file even if it appears to be unnecessary.
     * Normally Rush uses heuristics to determine when "pnpm install" can be skipped,
     * but sometimes the heuristics can be inaccurate due to external influences
     * (pnpmfile.js script logic, registry changes, etc).
     */
    recheckShrinkwrap: boolean;
    /**
     * The value of the "--network-concurrency" command-line parameter, which
     * is a diagnostic option used to troubleshoot network failures.
     *
     * Currently only supported for PNPM.
     */
    networkConcurrency: number | undefined;
    /**
     * Whether or not to collect verbose logs from the package manager.
     * If specified when using PNPM, the logs will be in /common/temp/pnpm.log
     */
    collectLogFile: boolean;
    /**
     * The variant to consider when performing installations and validating shrinkwrap updates.
     */
    variant?: string | undefined;
}
/**
 * This class implements common logic between "rush install" and "rush update".
 */
export declare class InstallManager {
    private _rushConfiguration;
    private _rushGlobalFolder;
    private _commonNodeModulesMarker;
    private _commonTempFolderRecycler;
    private _options;
    /**
     * Returns a map of all direct dependencies that only have a single semantic version specifier.
     * Returns a map: dependency name --> version specifier
     */
    static collectImplicitlyPreferredVersions(rushConfiguration: RushConfiguration, options?: {
        variant?: string | undefined;
    }): Map<string, string>;
    private static _updateVersionsForDependencies;
    private static _collectVersionsForDependencies;
    readonly commonNodeModulesMarker: LastInstallFlag;
    constructor(rushConfiguration: RushConfiguration, rushGlobalFolder: RushGlobalFolder, purgeManager: PurgeManager, options: IInstallManagerOptions);
    doInstall(): Promise<void>;
    /**
     * If the "(p)npm-local" symlink hasn't been set up yet, this creates it, installing the
     * specified (P)npm version in the user's home directory if needed.
     */
    ensureLocalPackageManager(): Promise<void>;
    /**
     * Regenerates the common/package.json and all temp_modules projects.
     * If shrinkwrapFile is provided, this function also validates whether it contains
     * everything we need to install and returns true if so; in all other cases,
     * the return value is false.
     */
    private _createTempModulesAndCheckShrinkwrap;
    /**
     * Runs "npm install" in the common folder.
     */
    private _installCommonModules;
    private _checkIfReleaseIsPublished;
    private _queryIfReleaseIsPublished;
    /**
     * Used when invoking the NPM tool.  Appends the common configuration options
     * to the command-line.
     */
    private _pushConfigurationArgs;
    /**
     * Copies the file "sourcePath" to "destinationPath", overwriting the target file location.
     * If the source file does not exist, then the target file is deleted.
     */
    private _syncFile;
    /**
     * Gets the path to the tarball
     * Example: "C:\MyRepo\common\temp\projects\my-project-2.tgz"
     */
    private _getTarballFilePath;
    /**
     * This is a workaround for a bug introduced in NPM 5 (and still unfixed as of NPM 5.5.1):
     * https://github.com/npm/npm/issues/19006
     *
     * The regression is that "npm install" sets the package.json "version" field for the
     * @rush-temp projects to a value like "file:projects/example.tgz", when it should be "0.0.0".
     * This causes "rush link" to fail later, when read-package-tree tries to parse the bad version.
     * The error looks like this:
     *
     * ERROR: Failed to parse package.json for foo: Invalid version: "file:projects/example.tgz"
     *
     * Our workaround is to rewrite the package.json files for each of the @rush-temp projects
     * in the node_modules folder, after "npm install" completes.
     */
    private _fixupNpm5Regression;
    /**
     * Checks for temp projects that exist in the shrinkwrap file, but don't exist
     * in rush.json.  This might occur, e.g. if a project was recently deleted or renamed.
     *
     * @returns true if orphans were found, or false if everything is okay
     */
    private _findOrphanedTempProjects;
    private readonly _shrinkwrapFilePhrase;
}
//# sourceMappingURL=InstallManager.d.ts.map