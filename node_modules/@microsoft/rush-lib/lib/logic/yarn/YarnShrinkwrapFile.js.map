{"version":3,"file":"YarnShrinkwrapFile.js","sourceRoot":"","sources":["../../../src/logic/yarn/YarnShrinkwrapFile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as os from 'os';\r\nimport * as lockfile from '@yarnpkg/lockfile';\r\nimport {\r\n  BaseShrinkwrapFile\r\n} from '../base/BaseShrinkwrapFile';\r\nimport { FileSystem, PackageName, IParsedPackageNameOrError, InternalError } from '@microsoft/node-core-library';\r\nimport { RushConstants } from '../RushConstants';\r\nimport { DependencySpecifier } from '../DependencySpecifier';\r\n\r\n/**\r\n * Used with YarnShrinkwrapFile._encodePackageNameAndSemVer() and _decodePackageNameAndSemVer().\r\n */\r\ninterface IPackageNameAndSemVer {\r\n  packageName: string;\r\n  semVerRange: string;\r\n}\r\n\r\n/**\r\n * Part of IYarnShrinkwrapJson\r\n */\r\ninterface IYarnShrinkwrapEntry {\r\n  /**\r\n   * The specific version that was chosen for this entry (i.e. package name and SemVer range)/\r\n   *\r\n   */\r\n  version: string;\r\n\r\n  /**\r\n   * The source (e.g. registry tarball URL) of the package that was installed\r\n   * with the integrity hash as a suffix.\r\n   *\r\n   * Examples:\r\n   * https://registry.yarnpkg.com/@pnpm/types/-/types-1.7.0.tgz#9d66a8bed3fabcd80f288b3e7884b7418b05b5a9\r\n   * file:./projects/api-documenter.tgz#d95f9779aa45df3ef1bbd95dec324793540765ba\r\n   */\r\n  resolved: string;\r\n\r\n  /**\r\n   * Records the original (unsolved) \"dependencies\" from the package.json.\r\n   */\r\n  dependencies?: { [dependency: string]: string };\r\n\r\n  /**\r\n   * Records the original (unsolved) \"optionalDependencies\" from the package.json.\r\n   *\r\n   * NOTE: Interestingly \"peerDependencies\" are apparently not tracked by the shrinkwrap file.\r\n   * The \"devDependencies\" are not tracked either, because they are always indirect dependencies\r\n   * for the installation.\r\n   */\r\n  optionalDependencies?: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * Used by YarnShrinkwrapFile to interpret the `@yarnpkg/lockfile` data structure.\r\n */\r\ninterface IYarnShrinkwrapJson {\r\n  /**\r\n   * Example keys:\r\n   * `js-tokens@^3.0.0 || ^4.0.0`\r\n   * `@rush-temp/api-extractor-test-03@file:./projects/api-extractor-test-03.tgz`\r\n   *\r\n   * The value records how the SemVer range was solved.\r\n   */\r\n  [packageNameAndSemVer: string]: IYarnShrinkwrapEntry;\r\n}\r\n\r\n/**\r\n * Support for consuming the \"yarn.lock\" file.\r\n *\r\n * Yarn refers to its shrinkwrap file as a \"lock file\", even though it has nothing to do\r\n * with file locking.  Apparently this was based on a convention of the Ruby bundler.\r\n * Since Rush has to work interchangeably with 3 different package managers, here we refer\r\n * generically to yarn.lock as a \"shrinkwrap file\".\r\n *\r\n * If Rush's Yarn support gains popularity, we will try to improve the wording of\r\n * logging messages to use terminology more consistent with Yarn's own documentation.\r\n */\r\nexport class YarnShrinkwrapFile extends BaseShrinkwrapFile {\r\n  // Example inputs:\r\n  // \"js-tokens@^3.0.0 || ^4.0.0\"\r\n  // \"@rush-temp/api-extractor-test-03@file:./projects/api-extractor-test-03.tgz\"\r\n  private static packageNameAndSemVerRegExp: RegExp = /^(@?[^@\\s]+)(?:@(.*))?$/;\r\n\r\n  private _shrinkwrapJson: IYarnShrinkwrapJson;\r\n  private _tempProjectNames: string[];\r\n\r\n  public static loadFromFile(shrinkwrapFilename: string): YarnShrinkwrapFile | undefined {\r\n    let shrinkwrapString: string;\r\n    let shrinkwrapJson: lockfile.ParseResult;\r\n    try {\r\n      if (!FileSystem.exists(shrinkwrapFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      shrinkwrapString = FileSystem.readFile(shrinkwrapFilename);\r\n      shrinkwrapJson = lockfile.parse(shrinkwrapString);\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n\r\n    return new YarnShrinkwrapFile(shrinkwrapJson.object as IYarnShrinkwrapJson);\r\n  }\r\n\r\n  /**\r\n   * The `@yarnpkg/lockfile` API only partially deserializes its data, and expects the caller\r\n   * to parse the yarn.lock lookup keys (sometimes called a \"pattern\").\r\n   *\r\n   * Example input:  \"js-tokens@^3.0.0 || ^4.0.0\"\r\n   * Example output: { packageName: \"js-tokens\", semVerRange: \"^3.0.0 || ^4.0.0\" }\r\n   */\r\n  private static _decodePackageNameAndSemVer(packageNameAndSemVer: string): IPackageNameAndSemVer {\r\n    const result: RegExpExecArray | null = YarnShrinkwrapFile.packageNameAndSemVerRegExp.exec(packageNameAndSemVer);\r\n    if (!result) {\r\n      // Sanity check -- this should never happen\r\n      throw new Error('Unable to parse package/semver expression in the Yarn shrinkwrap file (yarn.lock): '\r\n        + JSON.stringify(packageNameAndSemVer));\r\n    }\r\n\r\n    const packageName: string = result[1] || '';\r\n    const parsedPackageName: IParsedPackageNameOrError = PackageName.tryParse(packageName);\r\n    if (parsedPackageName.error) {\r\n      // Sanity check -- this should never happen\r\n      throw new Error('Invalid package name the Yarn shrinkwrap file (yarn.lock): '\r\n        + JSON.stringify(packageNameAndSemVer) + '\\n' + parsedPackageName.error);\r\n    }\r\n\r\n    return {\r\n      packageName,\r\n      semVerRange: result[2] || ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This is the inverse of _decodePackageNameAndSemVer():\r\n   * Given an IPackageNameAndSemVer object, recreate the yarn.lock lookup key\r\n   * (sometimes called a \"pattern\").\r\n   */\r\n  private static _encodePackageNameAndSemVer(packageNameAndSemVer: IPackageNameAndSemVer): string {\r\n    return packageNameAndSemVer.packageName + '@' + packageNameAndSemVer.semVerRange;\r\n  }\r\n\r\n  /** @override */\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._tempProjectNames;\r\n  }\r\n\r\n  /** @override */\r\n  public hasCompatibleTopLevelDependency(dependencySpecifier: DependencySpecifier): boolean {\r\n    // It seems like we should normalize the key somehow, but Yarn apparently does not\r\n    // do any normalization.\r\n    const key: string = YarnShrinkwrapFile._encodePackageNameAndSemVer({\r\n      packageName: dependencySpecifier.packageName,\r\n      semVerRange: dependencySpecifier.versionSpecifier\r\n    });\r\n\r\n    // Check whether this exact key appears in the shrinkwrap file\r\n    return Object.hasOwnProperty.call(this._shrinkwrapJson, key);\r\n  }\r\n\r\n  /** @override */\r\n  public tryEnsureCompatibleDependency(dependencySpecifier: DependencySpecifier, tempProjectName: string): boolean {\r\n    return this.hasCompatibleTopLevelDependency(dependencySpecifier);\r\n  }\r\n\r\n  /** @override */\r\n  protected serialize(): string {\r\n    return lockfile.stringify(this._shrinkwrapJson);\r\n  }\r\n\r\n  /** @override */\r\n  protected getTopLevelDependencyVersion(dependencyName: string): DependencySpecifier | undefined {\r\n    throw new InternalError('Not implemented');\r\n  }\r\n\r\n  /** @override */\r\n  protected tryEnsureDependencyVersion(dependencySpecifier: DependencySpecifier,\r\n    tempProjectName: string): DependencySpecifier | undefined {\r\n\r\n    throw new InternalError('Not implemented');\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: IYarnShrinkwrapJson) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n    this._tempProjectNames = [];\r\n\r\n    const seenEntries: Set<string> = new Set();\r\n\r\n    for (const key of Object.keys(this._shrinkwrapJson)) {\r\n      // Example key:\r\n      const packageNameAndSemVer: IPackageNameAndSemVer = YarnShrinkwrapFile._decodePackageNameAndSemVer(key);\r\n\r\n      // If it starts with @rush-temp, then include it:\r\n      if (PackageName.getScope(packageNameAndSemVer.packageName) === RushConstants.rushTempNpmScope) {\r\n        if (!/^file:/i.test(packageNameAndSemVer.semVerRange)) {\r\n          // Sanity check to make sure this is a real package.\r\n          // (Nobody should ever have an actual dependency on an \"@rush-temp/\" package.\r\n          throw new Error('Unexpected package/semver expression found in the Yarn shrinkwrap file (yarn.lock): '\r\n            + JSON.stringify(key));\r\n        }\r\n\r\n        if (!seenEntries.add(packageNameAndSemVer.packageName)) {\r\n          // Sanity check -- this should never happen\r\n          throw new Error('Duplicate @rush-temp package found in the Yarn shrinkwrap file (yarn.lock): '\r\n            + JSON.stringify(key));\r\n        }\r\n\r\n        this._tempProjectNames.push(packageNameAndSemVer.packageName);\r\n\r\n        const entry: IYarnShrinkwrapEntry = this._shrinkwrapJson[key];\r\n\r\n        // Yarn fails installation if the integrity hash does not match a \"file://\" reference to a tarball.\r\n        // This is incorrect:  Normally a mismatched integrity hash does indicate a corrupted download,\r\n        // since an NPM registry normally guarantees that a specific version number cannot be republished\r\n        // with different content.  But this is NOT true for a \"file://\" reference, and there are valid\r\n        // reasons why someone would update the file.  (PNPM handles this correctly, by simply reinstalling\r\n        // the tarball if its hash has changed.)\r\n        //\r\n        // As a workaround, we can simply remove the hashes from the shrinkwrap file.  We will convert this:\r\n        //   \"file:./projects/my-project.tgz#80cefe05fd715e65219d1ed481209dc4023408aa\"\r\n        // ..to this:\r\n        //   \"file:./projects/my-project.tgz\"\r\n        const indexOfHash: number = entry.resolved.indexOf('#');\r\n        if (indexOfHash >= 0) {\r\n          entry.resolved = entry.resolved.substring(0, indexOfHash);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._tempProjectNames.sort();  // make the result deterministic\r\n  }\r\n}\r\n"]}