{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Rush main config File",
  "description": "The main configuration file for the Rush multi-project build tool. See http://rushjs.io for details.",
  "type": "object",

  "properties": {
    "$schema": {
      "description": "Part of the JSON Schema standard, this optional keyword declares the URL of the schema that the file conforms to. Editors may download the schema and use it to perform syntax highlighting.",
      "type": "string"
    },

    "npmVersion": {
      "description": "If specified, selects NPM as the package manager and specifies the deterministic version to be installed by Rush.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },

    "pnpmVersion": {
      "description": "If specified, selects PNPM as the package manager and specifies the deterministic version to be installed by Rush.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },

    "yarnVersion": {
      "description": "If specified, selects Yarn as the package manager and specifies the deterministic version to be installed by Rush.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },

    "rushVersion": {
      "description": "The version of the Rush tool that will be used to build this repository.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },
    "nodeSupportedVersionRange": {
      "description": "A node-semver expression (e.g. \">=1.2.3 <2.0.0\", see https://github.com/npm/node-semver) indicating which versions of Node.js can safely be used to build this repository.  If omitted, no validation is performed.",
      "type": "string"
    },
    "suppressNodeLtsWarning": {
      "description": "Rush normally prints a warning if it detects a pre-LTS Node.js version. If you are testing pre-LTS versions in preparation for supporting the first LTS version, you can use this setting to disable Rush's warning.",
      "type": "boolean"
    },
    "projectFolderMinDepth": {
      "description": "The minimum folder depth for the projectFolder field.  The default value is 1, i.e. no slashes in the path name.",
      "type": "number"
    },
    "ensureConsistentVersions": {
      "description": "If true, consistent version specifiers for dependencies will be enforced (i.e. \"rush check\" is run before some commands).",
      "type": "boolean"
    },
    "hotfixChangeEnabled": {
      "description": "Allows creation of hotfix changes. This feature is experimental so it is disabled by default. If this is set, \"rush change\" only allows a \"hotfix\" change type to be specified. This change type will be used when publishing subsequent changes from the monorepo.",
      "type": "boolean"
    },
    "pnpmOptions": {
      "description": "Options that are only used when the PNPM pacakge manager is selected.",
      "type": "object",
      "properties": {
        "strictPeerDependencies": {
          "description": "If true, then Rush will add the \"--strict-peer-dependencies\" option when invoking PNPM. This causes \"rush install\" to fail if there are unsatisfied peer dependencies, which is an invalid state that can cause build failures or incompatible dependency versions. (For historical reasons, JavaScript package managers generally do not treat this invalid state as an error.) The default value is false.",
          "type": "boolean"
        },
        "resolutionStrategy": {
          "description": "Configures the strategy used to select versions during installation.  This feature requires PNPM version 3.1 or newer.  It corresponds to the \"--resolution-strategy\" command-line option for PNPM.  Possible values are \"fast\" and \"fewer-dependencies\".  PNPM's default is \"fast\", but this may be incompatible with certain packages, for example the \"@types\" packages from DefinitelyTyped.  Rush's default is \"fewer-dependencies\", which causes PNPM to avoid installing a newer version if an already installed version can be reused; this is more similar to NPM's algorithm.",
          "type": "string",
          "enum": ["fewer-dependencies", "fast"]
        }
      },
      "additionalProperties": false
    },
    "yarnOptions": {
      "description": "Options that are only used when the Yarn pacakge manager is selected.",
      "type": "object",
      "properties": {
        "ignoreEngines": {
          "description": "If true, then Rush will add the \"--ignore-engines\" option when invoking Yarn. * This allows \"rush install\" to succeed if there are dependencies with engines defined in package.json which do not match the current environment. The default value is false.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "projectFolderMaxDepth": {
      "description": "The maximum folder depth for the projectFolder field.  The default value is 2, i.e. a single slash in the path name.",
      "type": "number"
    },
    "approvedPackagesPolicy": {
      "description": "Controls a package review workflow driven by the two config files \"browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\"",
      "type": "object",
      "properties": {
        "reviewCategories": {
          "description": "A list of category names that can be applied to each project, and then referenced in \"browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredNpmScopes": {
          "description": "A list of NPM package scopes that will be excluded from review (e.g. \"@types\")",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^@"
          }
        }
      },
      "additionalProperties": false
    },
    "gitPolicy": {
      "description": "If the project is stored in a Git repository, additional settings related to Git",
      "type": "object",
      "properties": {
        "allowedEmailRegExps": {
          "description": "A list of regular expressions describing allowable e-mail patterns for Git commits.  They are case-insensitive anchored JavaScript RegExps.  Example: \".*@example\\.com\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sampleEmail": {
          "description": "An example valid e-mail address for \"Mr. Example\" that conforms to one of the allowedEmailRegExps.  Example: \"mr-example@contoso\\.com\"",
          "type": "string"
        },
        "versionBumpCommitMessage": {
          "description": "The commit message to use when committing changes during \"rush publish\". Defaults to \"Applying package updates.\"",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "variants": {
      "description": "Defines the list of installation variants for this repository. For more details about this feature, see this article: https://rushjs.io/pages/advanced/installation_variants/",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "variantName": {
            "description": "The name of the variant. Maps to common/rush/variants/{name} under the repository root.",
            "type": "string"
          },
          "description": {
            "description": "",
            "type": "string"
          }
        },
        "required": [
          "variantName",
          "description"
        ]
      }
    },
    "repository": {
      "description": "The repository location",
      "type": "object",
      "properties": {
        "url": {
          "description": "The remote url of the repository. If a value is provided, \"rush change\" will use it to find the right remote to compare against.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "telemetryEnabled": {
      "description": "Indicates whether telemetry data should be collected and stored in the Rush temp folder during Rush runs.",
      "type": "boolean"
    },
    "projects": {
      "description": "A list of projects managed by this tool.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "packageName": {
            "description": "The NPM package name of the project.",
            "type": "string"
          },
          "projectFolder": {
            "description": "The path to the project folder relative to the Rush config file.",
            "type": "string"
          },
          "reviewCategory": {
            "description": "An optional category for usage in the \"browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\" files.  Only strings from reviewCategories are allowed here.",
            "type": "string"
          },
          "cyclicDependencyProjects": {
            "description": "A list of local projects that appear as devDependencies for this project, but cannot be locally linked because it would create a cyclic dependency; instead, the last published version will be installed in the Common folder.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "shouldPublish": {
            "description": "A flag indicating that changes to this project will be published to npm, which affects the Rush change and publish workflows.",
            "type": "boolean"
          },
          "skipRushCheck": {
            "description": "If true, then this project will be ignored by the \"rush check\" command.  The default value is false.",
            "type": "boolean"
          },
          "versionPolicyName": {
            "description": "An optional version policy associated with the project. Version policies are defined in \"version-policies.json\" file.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "packageName",
          "projectFolder"
        ]
      }
    },
    "eventHooks": {
      "description": "Hooks are customized script actions that Rush executes when specific events occur.",
      "type": "object",
      "properties": {
        "preRushInstall": {
          "description": "The list of scripts to run before the Rush installation starts.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postRushInstall": {
          "description": "The list of scripts to run after the Rush installation finishes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "preRushBuild": {
          "description": "The list of scripts to run before the Rush build command starts.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postRushBuild": {
          "description": "The list of scripts to run after the Rush build command finishes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "required": [
    "rushVersion",
    "projects"
  ]
}
