export declare class VersionControl {
    static getRepositoryRootPath(): string | undefined;
    static getChangedFolders(targetBranch: string, skipFetch?: boolean): Array<string | undefined> | undefined;
    /**
     * @param pathPrefix - An optional path prefix "git diff"s should be filtered by.
     * @returns
     * An array of paths of repo-root-relative paths of files that are different from
     * those in the provided {@param targetBranch}. If a {@param pathPrefix} is provided,
     * this function only returns results under the that path.
     */
    static getChangedFiles(targetBranch: string, skipFetch?: boolean, pathPrefix?: string): string[];
    /**
     * Gets the remote master branch that maps to the provided repository url.
     * This method is used by 'Rush change' to find the default remote branch to compare against.
     * If repository url is not provided or if there is no match, returns the default remote
     * master branch 'origin/master'.
     * If there are more than one matches, returns the first remote's master branch.
     *
     * @param repositoryUrl - repository url
     */
    static getRemoteMasterBranch(repositoryUrl?: string): string;
    static hasUncommittedChanges(): boolean;
    /**
     * The list of files changed but not committed
     */
    static getUncommittedChanges(): ReadonlyArray<string>;
    private static _getUntrackedChanges;
    private static _getDiffOnHEAD;
    private static _tryFetchRemoteBranch;
    private static _fetchRemoteBranch;
}
//# sourceMappingURL=VersionControl.d.ts.map