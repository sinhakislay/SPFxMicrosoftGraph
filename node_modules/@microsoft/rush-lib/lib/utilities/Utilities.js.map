{"version":3,"file":"Utilities.js","sourceRoot":"","sources":["../../src/utilities/Utilities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as fs from 'fs';\r\nimport * as os from 'os';\r\nimport * as tty from 'tty';\r\nimport * as path from 'path';\r\nimport * as wordwrap from 'wordwrap';\r\nimport {\r\n  JsonFile,\r\n  IPackageJson,\r\n  FileSystem,\r\n  FileConstants\r\n} from '@microsoft/node-core-library';\r\nimport { RushConfiguration } from '../api/RushConfiguration';\r\nimport { Stream } from 'stream';\r\n\r\nexport interface IEnvironment {\r\n  // NOTE: the process.env doesn't actually support \"undefined\" as a value.\r\n  // If you try to assign it, it will be converted to the text string \"undefined\".\r\n  // But this typing is needed for reading values from the dictionary, and for\r\n  // subsets that get combined.\r\n  [environmentVariableName: string]: string | undefined;\r\n}\r\n\r\n/**\r\n * Options for Utilities.installPackageInDirectory().\r\n */\r\nexport interface IInstallPackageInDirectoryOptions {\r\n  directory: string;\r\n  packageName: string;\r\n  version: string;\r\n  tempPackageTitle: string;\r\n  maxInstallAttempts: number;\r\n  commonRushConfigFolder: string | undefined;\r\n  suppressOutput?: boolean;\r\n}\r\n\r\nexport interface ILifecycleCommandOptions {\r\n  /**\r\n   * The rush configuration, if the command is running in a rush repo.\r\n   */\r\n  rushConfiguration: RushConfiguration | undefined;\r\n\r\n  /**\r\n   * Working directory for running the command\r\n   */\r\n  workingDirectory: string;\r\n\r\n  /**\r\n   * The folder containing a local .npmrc, which will be used for the INIT_CWD environment variable\r\n   */\r\n  initCwd: string;\r\n\r\n  /**\r\n   * If true, suppress the process's output, but if there is a nonzero exit code then print stderr\r\n   */\r\n  handleOutput: boolean;\r\n\r\n  /**\r\n   * Options for what should be added to the PATH variable\r\n   */\r\n  environmentPathOptions: IEnvironmentPathOptions;\r\n}\r\n\r\nexport interface IEnvironmentPathOptions {\r\n  /**\r\n   * If true, include <project root>/node_modules/.bin in the PATH. If both this and\r\n   * {@link IEnvironmentPathOptions.includeRepoBin} are set, this path will take precedence.\r\n   */\r\n  includeProjectBin?: boolean;\r\n\r\n  /**\r\n   * If true, include <repo root>/common/temp/node_modules/.bin in the PATH.\r\n   */\r\n  includeRepoBin?: boolean;\r\n}\r\n\r\ninterface ICreateEnvironmentForRushCommandPathOptions extends IEnvironmentPathOptions {\r\n  projectRoot: string | undefined;\r\n  commonTempFolder: string | undefined;\r\n}\r\n\r\ninterface ICreateEnvironmentForRushCommandOptions {\r\n  /**\r\n   * The INIT_CWD environment variable\r\n   */\r\n  initCwd?: string;\r\n\r\n  /**\r\n   * an existing environment to copy instead of process.env\r\n   */\r\n  initialEnvironment?: IEnvironment;\r\n\r\n  /**\r\n   * Options for what should be added to the PATH variable\r\n   */\r\n  pathOptions?: ICreateEnvironmentForRushCommandPathOptions;\r\n}\r\n\r\nexport class Utilities {\r\n  /**\r\n   * Get the user's home directory. On windows this looks something like \"C:\\users\\username\\\" and on UNIX\r\n   * this looks something like \"/usr/username/\"\r\n   */\r\n  public static getHomeDirectory(): string {\r\n    const unresolvedUserFolder: string | undefined = process.env[\r\n      (process.platform === 'win32') ? 'USERPROFILE' : 'HOME'\r\n    ];\r\n    const dirError: string = 'Unable to determine the current user\\'s home directory';\r\n    if (unresolvedUserFolder === undefined) {\r\n      throw new Error(dirError);\r\n    }\r\n    const homeFolder: string = path.resolve(unresolvedUserFolder);\r\n    if (!FileSystem.exists(homeFolder)) {\r\n      throw new Error(dirError);\r\n    }\r\n\r\n    return homeFolder;\r\n  }\r\n\r\n  /**\r\n   * Node.js equivalent of performance.now().\r\n   */\r\n  public static getTimeInMs(): number {\r\n    let seconds: number;\r\n    let nanoseconds: number;\r\n    [seconds, nanoseconds] = process.hrtime();\r\n    return seconds * 1000 + nanoseconds / 1000000;\r\n  }\r\n\r\n  /**\r\n   * Returns the values from a Set<T>\r\n   */\r\n  public static getSetAsArray<T>(set: Set<T>): T[] {\r\n    // When ES6 is supported, we can use Array.from() instead.\r\n    const result: T[] = [];\r\n    set.forEach((value: T) => {\r\n      result.push(value);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retries a function until a timeout is reached. The function is expected to throw if it failed and\r\n   *  should be retried.\r\n   */\r\n  public static retryUntilTimeout<TResult>(\r\n    fn: () => TResult,\r\n    maxWaitTimeMs: number,\r\n    getTimeoutError: (innerError: Error) => Error,\r\n    fnName: string\r\n  ): TResult {\r\n    const startTime: number = Utilities.getTimeInMs();\r\n    let looped: boolean = false;\r\n\r\n    let result: TResult;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      try {\r\n        result = fn();\r\n        break;\r\n      } catch (e) {\r\n        looped = true;\r\n        const currentTime: number = Utilities.getTimeInMs();\r\n        if (currentTime - startTime > maxWaitTimeMs) {\r\n          throw getTimeoutError(e);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (looped) {\r\n      const currentTime: number = Utilities.getTimeInMs();\r\n      const totalSeconds: string = ((currentTime - startTime) / 1000.0).toFixed(2);\r\n      // This logging statement isn't meaningful to the end-user. `fnName` should be updated\r\n      // to something like `operationDescription`\r\n      console.log(`${fnName}() stalled for ${totalSeconds} seconds`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates the specified folder by calling FileSystem.ensureFolder(), but using a\r\n   * retry loop to recover from temporary locks that may be held by other processes.\r\n   * If the folder already exists, no error occurs.\r\n   */\r\n  public static createFolderWithRetry(folderName: string): void {\r\n    // Note: If a file exists with the same name, then we fall through and report\r\n    // an error.\r\n    if (Utilities.directoryExists(folderName)) {\r\n      return;\r\n    }\r\n\r\n    // We need to do a simple \"FileSystem.ensureFolder(localModulesFolder)\" here,\r\n    // however if the folder we deleted above happened to contain any files,\r\n    // then there seems to be some OS process (virus scanner?) that holds\r\n    // a lock on the folder for a split second, which causes mkdirSync to\r\n    // fail.  To workaround that, retry for up to 7 seconds before giving up.\r\n    const maxWaitTimeMs: number = 7 * 1000;\r\n\r\n    return Utilities.retryUntilTimeout(\r\n      () => FileSystem.ensureFolder(folderName),\r\n      maxWaitTimeMs,\r\n      (e) => new Error(\r\n        `Error: ${e}${os.EOL}Often this is caused by a file lock ` +\r\n        'from a process such as your text editor, command prompt, ' +\r\n        'or \"gulp serve\"'\r\n      ),\r\n      'createFolderWithRetry'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if the path points to a file and that it exists.\r\n   */\r\n  public static fileExists(filePath: string): boolean {\r\n    let exists: boolean = false;\r\n\r\n    try {\r\n      const lstat: fs.Stats = FileSystem.getLinkStatistics(filePath);\r\n      exists = lstat.isFile();\r\n    } catch (e) { /* no-op */ }\r\n\r\n    return exists;\r\n  }\r\n\r\n  /**\r\n   * Determines if a path points to a directory and that it exists.\r\n   */\r\n  public static directoryExists(directoryPath: string): boolean {\r\n    let exists: boolean = false;\r\n\r\n    try {\r\n      const lstat: fs.Stats = FileSystem.getLinkStatistics(directoryPath);\r\n      exists = lstat.isDirectory();\r\n    } catch (e) { /* no-op */ }\r\n\r\n    return exists;\r\n  }\r\n\r\n  /**\r\n   * BE VERY CAREFUL CALLING THIS FUNCTION!\r\n   * If you specify the wrong folderPath (e.g. \"/\"), it could potentially delete your entire\r\n   * hard disk.\r\n   */\r\n  public static dangerouslyDeletePath(folderPath: string): void {\r\n    try {\r\n      FileSystem.deleteFolder(folderPath);\r\n    } catch (e) {\r\n      throw new Error(e.message + os.EOL + 'Often this is caused by a file lock'\r\n        + ' from a process such as your text editor, command prompt, or \"gulp serve\"');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to delete a file. If it does not exist, or the path is not a file, it no-ops.\r\n   */\r\n  public static deleteFile(filePath: string): void {\r\n    if (Utilities.fileExists(filePath)) {\r\n      console.log(`Deleting: ${filePath}`);\r\n      FileSystem.deleteFile(filePath);\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Returns true if outputFilename has a more recent last modified timestamp\r\n   * than all of the inputFilenames, which would imply that we don't need to rebuild it.\r\n   * Returns false if any of the files does not exist.\r\n   * NOTE: The filenames can also be paths for directories, in which case the directory\r\n   * timestamp is compared.\r\n   */\r\n  public static isFileTimestampCurrent(outputFilename: string, inputFilenames: string[]): boolean {\r\n    if (!FileSystem.exists(outputFilename)) {\r\n      return false;\r\n    }\r\n    const outputStats: fs.Stats = FileSystem.getStatistics(outputFilename);\r\n\r\n    for (const inputFilename of inputFilenames) {\r\n      if (!FileSystem.exists(inputFilename)) {\r\n        return false;\r\n      }\r\n\r\n      const inputStats: fs.Stats = FileSystem.getStatistics(inputFilename);\r\n      if (outputStats.mtime < inputStats.mtime) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the console, measured in columns\r\n   */\r\n  public static getConsoleWidth(): number {\r\n    const stdout: tty.WriteStream = process.stdout as tty.WriteStream;\r\n    if (stdout && stdout.columns) {\r\n      return stdout.columns;\r\n    }\r\n\r\n    return 80;\r\n  }\r\n\r\n  /**\r\n   * Applies word wrapping.  If maxLineLength is unspecified, then it defaults to the console\r\n   * width.\r\n   */\r\n  public static wrapWords(text: string, maxLineLength?: number, indent?: number): string {\r\n    if (!indent) {\r\n      indent = 0;\r\n    }\r\n    if (!maxLineLength) {\r\n      maxLineLength = Utilities.getConsoleWidth();\r\n    }\r\n\r\n    const wrap: (textToWrap: string) => string = wordwrap.soft(indent, maxLineLength);\r\n    return wrap(text);\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  public static executeCommand(command: string, args: string[], workingDirectory: string,\r\n    environment?: IEnvironment, suppressOutput: boolean = false,\r\n    keepEnvironment: boolean = false\r\n  ): void {\r\n\r\n    Utilities._executeCommandInternal(command, args, workingDirectory,\r\n      suppressOutput ? undefined : [0, 1, 2],\r\n      environment,\r\n      keepEnvironment\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  public static executeCommandAndCaptureOutput(command: string, args: string[], workingDirectory: string,\r\n    environment?: IEnvironment,\r\n    keepEnvironment: boolean = false\r\n  ): string {\r\n\r\n    const  result: child_process.SpawnSyncReturns<Buffer> = Utilities._executeCommandInternal(\r\n      command,\r\n      args,\r\n      workingDirectory,\r\n      ['pipe', 'pipe', 'pipe'],\r\n      environment,\r\n      keepEnvironment\r\n    );\r\n\r\n    return result.stdout.toString();\r\n  }\r\n\r\n  /**\r\n   * Attempts to run Utilities.executeCommand() up to maxAttempts times before giving up.\r\n   */\r\n  public static executeCommandWithRetry(maxAttempts: number, command: string, args: string[],\r\n    workingDirectory: string,  environment?: IEnvironment, suppressOutput: boolean = false,\r\n    retryCallback?: () => void): void {\r\n\r\n    if (maxAttempts < 1) {\r\n      throw new Error('The maxAttempts parameter cannot be less than 1');\r\n    }\r\n\r\n    let attemptNumber: number = 1;\r\n\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      try {\r\n        Utilities.executeCommand(command, args, workingDirectory, environment, suppressOutput);\r\n      } catch (error) {\r\n        console.log(os.EOL + 'The command failed:');\r\n        console.log(` ${command} ` + args.join(' '));\r\n        console.log(`ERROR: ${error.toString()}`);\r\n\r\n        if (attemptNumber < maxAttempts) {\r\n          ++attemptNumber;\r\n          console.log(`Trying again (attempt #${attemptNumber})...` + os.EOL);\r\n          if (retryCallback) {\r\n            retryCallback();\r\n          }\r\n\r\n          continue;\r\n        } else {\r\n          console.error(`Giving up after ${attemptNumber} attempts` + os.EOL);\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\r\n   * @param command - the command to run on shell\r\n   * @param options - options for how the command should be run\r\n   */\r\n  public static executeLifecycleCommand(\r\n    command: string,\r\n    options: ILifecycleCommandOptions\r\n  ): number {\r\n    const result: child_process.SpawnSyncReturns<Buffer> = Utilities._executeLifecycleCommandInternal(\r\n      command,\r\n      child_process.spawnSync,\r\n      options\r\n    );\r\n\r\n    if (options.handleOutput) {\r\n      Utilities._processResult(result);\r\n    }\r\n    return result.status;\r\n  }\r\n\r\n  /**\r\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\r\n   * @param command - the command to run on shell\r\n   * @param options - options for how the command should be run\r\n   */\r\n  public static executeLifecycleCommandAsync(\r\n    command: string,\r\n    options: ILifecycleCommandOptions\r\n  ): child_process.ChildProcess {\r\n    return Utilities._executeLifecycleCommandInternal(\r\n      command,\r\n      child_process.spawn,\r\n      options\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For strings passed to a shell command, this adds appropriate escaping\r\n   * to avoid misinterpretation of spaces or special characters.\r\n   *\r\n   * Example: 'hello there' --> '\"hello there\"'\r\n   */\r\n  public static escapeShellParameter(parameter: string): string {\r\n    return `\"${parameter}\"`;\r\n  }\r\n\r\n  /**\r\n   * Installs a package by name and version in the specified directory.\r\n   */\r\n  public static installPackageInDirectory(options: IInstallPackageInDirectoryOptions): void {\r\n    const directory: string = path.resolve(options.directory);\r\n    if (FileSystem.exists(directory)) {\r\n      console.log('Deleting old files from ' + directory);\r\n    }\r\n\r\n    FileSystem.ensureEmptyFolder(directory);\r\n\r\n    const npmPackageJson: IPackageJson = {\r\n      dependencies: {\r\n        [options.packageName]: options.version\r\n      },\r\n      description: 'Temporary file generated by the Rush tool',\r\n      name: options.tempPackageTitle,\r\n      private: true,\r\n      version: '0.0.0'\r\n    };\r\n    JsonFile.save(npmPackageJson, path.join(directory, FileConstants.PackageJson));\r\n\r\n    if (options.commonRushConfigFolder) {\r\n      Utilities.syncNpmrc(options.commonRushConfigFolder, directory);\r\n    }\r\n\r\n    console.log(os.EOL + 'Running \"npm install\" in ' + directory);\r\n\r\n    // NOTE: Here we use whatever version of NPM we happen to find in the PATH\r\n    Utilities.executeCommandWithRetry(\r\n      options.maxInstallAttempts,\r\n      'npm',\r\n      ['install'],\r\n      directory,\r\n      Utilities._createEnvironmentForRushCommand({}),\r\n      options.suppressOutput\r\n    );\r\n  }\r\n\r\n  public static withFinally<T>(options: { promise: Promise<T>, finally: () => void }): Promise<T> {\r\n    return options.promise.then<T>((result: T) => {\r\n      try {\r\n        options.finally();\r\n      } catch (error) {\r\n        return Promise.reject(error);\r\n      }\r\n      return result;\r\n    }).catch<T>((error: Error) => {\r\n      try {\r\n        options.finally();\r\n      } catch (innerError) {\r\n        return Promise.reject(innerError);\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * As a workaround, syncNpmrc() copies the .npmrc file to the target folder, and also trims\r\n   * unusable lines from the .npmrc file.  If the source .npmrc file not exist, then syncNpmrc()\r\n   * will delete an .npmrc that is found in the target folder.\r\n   *\r\n   * Why are we trimming the .npmrc lines?  NPM allows environment variables to be specified in\r\n   * the .npmrc file to provide different authentication tokens for different registry.\r\n   * However, if the environment variable is undefined, it expands to an empty string, which\r\n   * produces a valid-looking mapping with an invalid URL that causes an error.  Instead,\r\n   * we'd prefer to skip that line and continue looking in other places such as the user's\r\n   * home directory.\r\n   *\r\n   * IMPORTANT: THIS CODE SHOULD BE KEPT UP TO DATE WITH _syncNpmrc() FROM scripts/install-run.ts\r\n   */\r\n  public static syncNpmrc(sourceNpmrcFolder: string, targetNpmrcFolder: string): void {\r\n    const sourceNpmrcPath: string = path.join(sourceNpmrcFolder, '.npmrc');\r\n    const targetNpmrcPath: string = path.join(targetNpmrcFolder, '.npmrc');\r\n    try {\r\n      if (FileSystem.exists(sourceNpmrcPath)) {\r\n        console.log(`Copying ${sourceNpmrcPath} --> ${targetNpmrcPath}`);\r\n        let npmrcFileLines: string[] = FileSystem.readFile(sourceNpmrcPath).split('\\n');\r\n        npmrcFileLines = npmrcFileLines.map((line) => (line || '').trim());\r\n        const resultLines: string[] = [];\r\n        // Trim out lines that reference environment variables that aren't defined\r\n        for (const line of npmrcFileLines) {\r\n          // This finds environment variable tokens that look like \"${VAR_NAME}\"\r\n          const regex: RegExp = /\\$\\{([^\\}]+)\\}/g;\r\n          const environmentVariables: string[] | null = line.match(regex);\r\n          let lineShouldBeTrimmed: boolean = false;\r\n          if (environmentVariables) {\r\n            for (const token of environmentVariables) {\r\n              // Remove the leading \"${\" and the trailing \"}\" from the token\r\n              const environmentVariableName: string = token.substring(2, token.length - 1);\r\n              if (!process.env[environmentVariableName]) {\r\n                lineShouldBeTrimmed = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (lineShouldBeTrimmed) {\r\n            // Example output:\r\n            // \"; MISSING ENVIRONMENT VARIABLE: //my-registry.com/npm/:_authToken=${MY_AUTH_TOKEN}\"\r\n            resultLines.push('; MISSING ENVIRONMENT VARIABLE: ' + line);\r\n          } else {\r\n            resultLines.push(line);\r\n          }\r\n        }\r\n\r\n        FileSystem.writeFile(targetNpmrcPath, resultLines.join(os.EOL));\r\n      } else if (FileSystem.exists(targetNpmrcPath)) {\r\n        // If the source .npmrc doesn't exist and there is one in the target, delete the one in the target\r\n        console.log(`Deleting ${targetNpmrcPath}`);\r\n        FileSystem.deleteFile(targetNpmrcPath);\r\n      }\r\n    } catch (e) {\r\n      throw new Error(`Error syncing .npmrc file: ${e}`);\r\n    }\r\n  }\r\n\r\n  public static getRushConfigNotFoundError(): Error {\r\n    return new Error('Unable to find rush.json configuration file');\r\n  }\r\n\r\n  public static getPackageDepsFilenameForCommand(command: string): string {\r\n    return `package-deps_${command}.json`;\r\n  }\r\n\r\n  private static _executeLifecycleCommandInternal<TCommandResult>(\r\n    command: string,\r\n    spawnFunction: (command: String, args: string[], spawnOptions: child_process.SpawnOptions) => TCommandResult,\r\n    options: ILifecycleCommandOptions\r\n  ): TCommandResult {\r\n    let shellCommand: string = process.env.comspec || 'cmd';\r\n    let commandFlags: string = '/d /s /c';\r\n    let useShell: boolean = true;\r\n    if (process.platform !== 'win32') {\r\n      shellCommand = 'sh';\r\n      commandFlags = '-c';\r\n      useShell = false;\r\n    }\r\n\r\n    const environment: IEnvironment = Utilities._createEnvironmentForRushCommand(\r\n      {\r\n        initCwd: options.initCwd,\r\n        pathOptions: {\r\n          ...options.environmentPathOptions,\r\n          projectRoot: options.workingDirectory,\r\n          commonTempFolder: options.rushConfiguration ? options.rushConfiguration.commonTempFolder : undefined\r\n        }\r\n      }\r\n    );\r\n\r\n    return spawnFunction(\r\n      shellCommand,\r\n      [commandFlags, command],\r\n      {\r\n        cwd: options.workingDirectory,\r\n        shell: useShell,\r\n        env: environment,\r\n        stdio: options.handleOutput ? ['pipe', 'pipe', 'pipe'] : [0, 1, 2]\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a process.env environment suitable for executing lifecycle scripts.\r\n   * @param initialEnvironment - an existing environment to copy instead of process.env\r\n   */\r\n  private static _createEnvironmentForRushCommand(options: ICreateEnvironmentForRushCommandOptions): IEnvironment {\r\n    if (options.initialEnvironment === undefined) {\r\n      options.initialEnvironment = process.env;\r\n    }\r\n\r\n    const environment: IEnvironment = {};\r\n    for (const key of Object.getOwnPropertyNames(options.initialEnvironment)) {\r\n      const normalizedKey: string = os.platform() === 'win32' ? key.toUpperCase() : key;\r\n\r\n      // If Rush itself was invoked inside a lifecycle script, this may be set and would interfere\r\n      // with Rush's installations.  If we actually want it, we will set it explicitly below.\r\n      if (normalizedKey === 'INIT_CWD') {\r\n        continue;\r\n      }\r\n\r\n      // When NPM invokes a lifecycle event, it copies its entire configuration into environment\r\n      // variables.  Rush is supposed to be a deterministic controlled environment, so don't bring\r\n      // this along.\r\n      //\r\n      // NOTE: Longer term we should clean out the entire environment and use rush.json to bring\r\n      // back specific environment variables that the repo maintainer has determined to be safe.\r\n      if (normalizedKey.match(/^NPM_CONFIG_/)) {\r\n        continue;\r\n      }\r\n\r\n      // Use the uppercased environment variable name on Windows because environment variable names\r\n      // are case-insensitive on Windows\r\n      environment[normalizedKey] = options.initialEnvironment[key];\r\n    }\r\n\r\n    // When NPM invokes a lifecycle script, it sets an environment variable INIT_CWD that remembers\r\n    // the directory that NPM started in.  This allows naive scripts to change their current working directory\r\n    // and invoke NPM operations, while still be able to find a local .npmrc file.  Although Rush recommends\r\n    // for toolchain scripts to be professionally written (versus brittle stuff like\r\n    // \"cd ./lib && npm run tsc && cd ..\"), we support INIT_CWD for compatibility.\r\n    //\r\n    // More about this feature: https://github.com/npm/npm/pull/12356\r\n    if (options.initCwd) {\r\n      environment['INIT_CWD'] = options.initCwd; // tslint:disable-line:no-string-literal\r\n    }\r\n\r\n    if (options.pathOptions) {\r\n      if (options.pathOptions.includeRepoBin && options.pathOptions.commonTempFolder) {\r\n        environment.PATH = Utilities._prependNodeModulesBinToPath(\r\n          environment.PATH,\r\n          options.pathOptions.commonTempFolder\r\n        );\r\n      }\r\n\r\n      if (options.pathOptions.includeProjectBin && options.pathOptions.projectRoot) {\r\n        environment.PATH = Utilities._prependNodeModulesBinToPath(\r\n          environment.PATH,\r\n          options.pathOptions.projectRoot\r\n        );\r\n      }\r\n    }\r\n\r\n    return environment;\r\n  }\r\n\r\n  /**\r\n   * Prepend the node_modules/.bin folder under the specified folder to the specified PATH variable. For example,\r\n   * if `rootDirectory` is \"/foobar\" and `existingPath` is \"/bin\", this function will return\r\n   * \"/foobar/node_modules/.bin:/bin\"\r\n   */\r\n  private static _prependNodeModulesBinToPath(existingPath: string | undefined, rootDirectory: string): string {\r\n    const binPath: string = path.resolve(rootDirectory, 'node_modules', '.bin');\r\n    if (existingPath) {\r\n      return `${binPath}${path.delimiter}${existingPath}`;\r\n    } else {\r\n      return binPath;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  private static _executeCommandInternal(\r\n    command: string, args: string[], workingDirectory: string,\r\n    stdio: 'pipe'|'ignore'|'inherit'|(number|'pipe'|'ignore'|'inherit'|'ipc'|Stream|null|undefined)[]|undefined,\r\n    environment?: IEnvironment,\r\n    keepEnvironment: boolean = false\r\n  ): child_process.SpawnSyncReturns<Buffer> {\r\n    const options: child_process.SpawnSyncOptions = {\r\n      cwd: workingDirectory,\r\n      shell: true,\r\n      stdio: stdio,\r\n      env: keepEnvironment\r\n        ? environment\r\n        : Utilities._createEnvironmentForRushCommand({ initialEnvironment: environment })\r\n    };\r\n\r\n    // This is needed since we specify shell=true below.\r\n    // NOTE: On Windows if we escape \"NPM\", the spawnSync() function runs something like this:\r\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"\"NPM\" \"install\"\"' ]\r\n    //\r\n    // Due to a bug with Windows cmd.exe, the npm.cmd batch file's \"%~dp0\" variable will\r\n    // return the current working directory instead of the batch file's directory.\r\n    // The workaround is to not escape, npm, i.e. do this instead:\r\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"npm \"install\"\"' ]\r\n    //\r\n    // We will come up with a better solution for this when we promote executeCommand()\r\n    // into node-core-library, but for now this hack will unblock people:\r\n\r\n    // Only escape the command if it actually contains spaces:\r\n    const escapedCommand: string = command.indexOf(' ') < 0\r\n      ? command\r\n      : Utilities.escapeShellParameter(command);\r\n\r\n    const escapedArgs: string[] = args.map((x) => Utilities.escapeShellParameter(x));\r\n\r\n    let result: child_process.SpawnSyncReturns<Buffer> = child_process.spawnSync(escapedCommand,\r\n      escapedArgs, options);\r\n\r\n    if (result.error && (result.error as any).errno === 'ENOENT') { // tslint:disable-line:no-any\r\n      // This is a workaround for GitHub issue #25330\r\n      // https://github.com/nodejs/node-v0.x-archive/issues/25330\r\n      result = child_process.spawnSync(command + '.cmd', args, options);\r\n    }\r\n\r\n    Utilities._processResult(result);\r\n    return result;\r\n  }\r\n\r\n  private static _processResult(result: child_process.SpawnSyncReturns<Buffer>): void {\r\n    if (result.error) {\r\n      result.error.message += os.EOL + (result.stderr ? result.stderr.toString() + os.EOL : '');\r\n      throw result.error;\r\n    }\r\n\r\n    if (result.status) {\r\n      throw new Error('The command failed with exit code ' + result.status + os.EOL +\r\n        (result.stderr ? result.stderr.toString() : ''));\r\n    }\r\n  }\r\n}\r\n"]}