{"version":3,"file":"VersionControl.js","sourceRoot":"","sources":["../../src/utilities/VersionControl.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as colors from 'colors';\r\nimport {\r\n  Executable,\r\n  Path\r\n} from '@microsoft/node-core-library';\r\n\r\nconst DEFAULT_BRANCH: string = 'master';\r\nconst DEFAULT_REMOTE: string = 'origin';\r\nconst DEFAULT_FULLY_QUALIFIED_BRANCH: string = `${DEFAULT_REMOTE}/${DEFAULT_BRANCH}`;\r\n\r\nexport class VersionControl {\r\n  public static getRepositoryRootPath(): string | undefined {\r\n    const output: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n      'git',\r\n      ['rev-parse', '--show-toplevel']\r\n    );\r\n\r\n    if (output.status !== 0) {\r\n      return undefined;\r\n    } else {\r\n      return output.stdout.trim();\r\n    }\r\n  }\r\n\r\n  public static getChangedFolders(\r\n    targetBranch: string,\r\n    skipFetch: boolean = false\r\n  ): Array<string | undefined> | undefined {\r\n    if (!skipFetch) {\r\n      VersionControl._fetchRemoteBranch(targetBranch);\r\n    }\r\n\r\n    const output: string = child_process.execSync(`git diff ${targetBranch}... --dirstat=files,0`).toString();\r\n    return output.split('\\n').map((line) => {\r\n      if (line) {\r\n        const delimiterIndex: number = line.indexOf('%');\r\n        if (delimiterIndex > 0 && delimiterIndex + 1 < line.length) {\r\n          return line.substring(delimiterIndex + 1).trim();\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param pathPrefix - An optional path prefix \"git diff\"s should be filtered by.\r\n   * @returns\r\n   * An array of paths of repo-root-relative paths of files that are different from\r\n   * those in the provided {@param targetBranch}. If a {@param pathPrefix} is provided,\r\n   * this function only returns results under the that path.\r\n   */\r\n  public static getChangedFiles(targetBranch: string, skipFetch: boolean = false, pathPrefix?: string): string[] {\r\n    if (!skipFetch) {\r\n      VersionControl._fetchRemoteBranch(targetBranch);\r\n    }\r\n\r\n    const output: string = child_process.execSync(\r\n      `git diff ${targetBranch}... --name-only --no-renames --diff-filter=A`\r\n    ).toString();\r\n    return output.split('\\n').map((line) => {\r\n      if (line) {\r\n        const trimmedLine: string = line.trim();\r\n        if (!pathPrefix || Path.isUnderOrEqual(trimmedLine, pathPrefix)) {\r\n          return trimmedLine;\r\n        }\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }).filter((line) => {\r\n      return line && line.length > 0;\r\n    }) as string[];\r\n  }\r\n\r\n  /**\r\n   * Gets the remote master branch that maps to the provided repository url.\r\n   * This method is used by 'Rush change' to find the default remote branch to compare against.\r\n   * If repository url is not provided or if there is no match, returns the default remote\r\n   * master branch 'origin/master'.\r\n   * If there are more than one matches, returns the first remote's master branch.\r\n   *\r\n   * @param repositoryUrl - repository url\r\n   */\r\n  public static getRemoteMasterBranch(repositoryUrl?: string): string {\r\n    if (repositoryUrl) {\r\n      const output: string = child_process\r\n        .execSync(`git remote`)\r\n        .toString();\r\n      const normalizedRepositoryUrl: string = repositoryUrl.toUpperCase();\r\n      const matchingRemotes: string[] = output.split('\\n').filter((remoteName) => {\r\n        if (remoteName) {\r\n          const remoteUrl: string = child_process.execSync(`git remote get-url ${remoteName}`)\r\n            .toString()\r\n            .trim();\r\n\r\n          if (!remoteUrl) {\r\n            return false;\r\n          }\r\n\r\n          const normalizedRemoteUrl: string = remoteUrl.toUpperCase();\r\n          if (normalizedRemoteUrl.toUpperCase() === normalizedRepositoryUrl) {\r\n            return true;\r\n          }\r\n\r\n          // When you copy a URL from the GitHub web site, they append the \".git\" file extension to the URL.\r\n          // We allow that to be specified in rush.json, even though the file extension gets dropped\r\n          // by \"git clone\".\r\n          if (`${normalizedRemoteUrl}.GIT` === normalizedRepositoryUrl) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      if (matchingRemotes.length > 0) {\r\n        if (matchingRemotes.length > 1) {\r\n          console.log(\r\n            `More than one git remote matches the repository URL. Using the first remote (${matchingRemotes[0]}).`\r\n          );\r\n        }\r\n\r\n        return `${matchingRemotes[0]}/${DEFAULT_BRANCH}`;\r\n      } else {\r\n        console.log(colors.yellow(\r\n          `Unable to find a git remote matching the repository URL (${repositoryUrl}). ` +\r\n          'Detected changes are likely to be incorrect.'\r\n        ));\r\n\r\n        return DEFAULT_FULLY_QUALIFIED_BRANCH;\r\n      }\r\n    } else {\r\n      console.log(colors.yellow(\r\n        'A git remote URL has not been specified in rush.json. Setting the baseline remote URL is recommended.'\r\n      ));\r\n      return DEFAULT_FULLY_QUALIFIED_BRANCH;\r\n    }\r\n  }\r\n\r\n  public static hasUncommittedChanges(): boolean {\r\n    return VersionControl.getUncommittedChanges().length > 0;\r\n  }\r\n\r\n  /**\r\n   * The list of files changed but not committed\r\n   */\r\n  public static getUncommittedChanges(): ReadonlyArray<string> {\r\n    const changes: string[] = [];\r\n    changes.push(...VersionControl._getUntrackedChanges());\r\n    changes.push(...VersionControl._getDiffOnHEAD());\r\n\r\n    return changes.filter(change => {\r\n      return change.trim().length > 0;\r\n    });\r\n  }\r\n\r\n  private static _getUntrackedChanges(): string[] {\r\n    const output: string = child_process\r\n      .execSync(`git ls-files --exclude-standard --others`)\r\n      .toString();\r\n    return output.trim().split('\\n');\r\n  }\r\n\r\n  private static _getDiffOnHEAD(): string[] {\r\n    const output: string = child_process\r\n      .execSync(`git diff HEAD --name-only`)\r\n      .toString();\r\n    return output.trim().split('\\n');\r\n  }\r\n\r\n  private static _tryFetchRemoteBranch(remoteBranchName: string): boolean {\r\n    const firstSlashIndex: number = remoteBranchName.indexOf('/');\r\n    if (firstSlashIndex === -1) {\r\n      throw new Error(\r\n        `Unexpected git remote branch format: ${remoteBranchName}. ` +\r\n        'Expected branch to be in the <remote>/<branch name> format.'\r\n      );\r\n    }\r\n\r\n    const remoteName: string = remoteBranchName.substr(0, firstSlashIndex);\r\n    const branchName: string = remoteBranchName.substr(firstSlashIndex + 1);\r\n    const spawnResult: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n      'git',\r\n      ['fetch', remoteName, branchName],\r\n      {\r\n        stdio: 'ignore'\r\n      }\r\n    );\r\n    return spawnResult.status === 0;\r\n  }\r\n\r\n  private static _fetchRemoteBranch(remoteBranchName: string): void {\r\n    console.log(`Checking for updates to ${remoteBranchName}...`);\r\n    const fetchResult: boolean = VersionControl._tryFetchRemoteBranch(remoteBranchName);\r\n    if (!fetchResult) {\r\n      console.log(colors.yellow(\r\n        `Error fetching git remote branch ${remoteBranchName}. Detected changed files may be incorrect.`\r\n      ));\r\n    }\r\n  }\r\n}\r\n"]}