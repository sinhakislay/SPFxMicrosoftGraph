{"version":3,"file":"Stopwatch.js","sourceRoot":"","sources":["../../src/utilities/Stopwatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Utilities } from './Utilities';\r\n\r\n/**\r\n * Used with the Stopwatch class.\r\n */\r\nexport enum StopwatchState {\r\n  Stopped = 1,\r\n  Started = 2\r\n}\r\n\r\n/**\r\n * Represents a typical timer/stopwatch which keeps track\r\n * of elapsed time in between two events.\r\n */\r\nexport class Stopwatch {\r\n  private _startTime: number | undefined;\r\n  private _endTime: number | undefined;\r\n  private _state: StopwatchState;\r\n\r\n  private _getTime: () => number;\r\n\r\n  /**\r\n   * Static helper function which creates a stopwatch which is immediately started\r\n   */\r\n  public static start(): Stopwatch {\r\n    return new Stopwatch().start();\r\n  }\r\n\r\n  constructor(getTime: () => number = Utilities.getTimeInMs) {\r\n    this._startTime = undefined;\r\n    this._endTime = undefined;\r\n    this._getTime = getTime;\r\n    this._state = StopwatchState.Stopped;\r\n  }\r\n\r\n  public get state(): StopwatchState {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Starts the stopwatch. Note that if end() has been called,\r\n   * reset() should be called before calling start() again.\r\n   */\r\n  public start(): Stopwatch {\r\n    if (this._startTime !== undefined) {\r\n      throw new Error('Call reset() before starting the Stopwatch');\r\n    }\r\n    this._startTime = this._getTime();\r\n    this._endTime = undefined;\r\n    this._state = StopwatchState.Started;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stops executing the stopwatch and saves the current timestamp\r\n   */\r\n  public stop(): Stopwatch {\r\n    this._endTime = (this._startTime !== undefined ? this._getTime() : undefined);\r\n    this._state = StopwatchState.Stopped;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Resets all values of the stopwatch back to the original\r\n   */\r\n  public reset(): Stopwatch {\r\n    this._endTime = this._startTime = undefined;\r\n    this._state = StopwatchState.Stopped;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Displays how long the stopwatch has been executing in a human readable format.\r\n   */\r\n  public toString(): string {\r\n    if (this._state === StopwatchState.Stopped && this._startTime === undefined) {\r\n      return '0.00 seconds (stopped)';\r\n    }\r\n    const totalSeconds: number = this.duration;\r\n\r\n    if (totalSeconds > 60) {\r\n      const minutes: number = Math.floor(totalSeconds / 60);\r\n      const seconds: number = totalSeconds % 60.0;\r\n\r\n      return `${minutes.toFixed(0)} minute${minutes === 1 ? '' : 's'}` +\r\n        ` ${seconds.toFixed(1)} seconds`;\r\n    } else {\r\n      return `${totalSeconds.toFixed(2)} seconds`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the duration in seconds.\r\n   */\r\n  public get duration(): number {\r\n    if (this._startTime === undefined) {\r\n      return 0;\r\n    }\r\n    const curTime: number = this._endTime !== undefined\r\n      ? this._endTime\r\n      : this._getTime();\r\n\r\n    return ((curTime - this._startTime) / 1000.0);\r\n  }\r\n}\r\n"]}