import { IPackageJson } from '@microsoft/node-core-library';
/**
 * @beta
 */
export declare const enum DependencyType {
    Regular = "dependencies",
    Dev = "devDependencies",
    Optional = "optionalDependencies",
    Peer = "peerDependencies"
}
/**
 * @beta
 */
export declare class PackageJsonDependency {
    private _type;
    private _name;
    private _version;
    private _onChange;
    constructor(name: string, version: string, type: DependencyType, onChange: () => void);
    readonly name: string;
    readonly version: string;
    setVersion(newVersion: string): void;
    readonly dependencyType: DependencyType;
}
/**
 * @beta
 */
export declare class PackageJsonEditor {
    private readonly _filePath;
    private readonly _data;
    private readonly _dependencies;
    private readonly _devDependencies;
    private _modified;
    static load(filePath: string): PackageJsonEditor;
    static fromObject(object: IPackageJson, filename: string): PackageJsonEditor;
    readonly name: string;
    readonly version: string;
    readonly filePath: string;
    /**
     * The list of dependencies of type DependencyType.Regular, DependencyType.Optional, or DependencyType.Peer.
     */
    readonly dependencyList: ReadonlyArray<PackageJsonDependency>;
    /**
     * The list of dependencies of type DependencyType.Dev.
     */
    readonly devDependencyList: ReadonlyArray<PackageJsonDependency>;
    tryGetDependency(packageName: string): PackageJsonDependency | undefined;
    tryGetDevDependency(packageName: string): PackageJsonDependency | undefined;
    addOrUpdateDependency(packageName: string, newVersion: string, dependencyType: DependencyType): void;
    saveIfModified(): boolean;
    private constructor();
    private _onChange;
    private _normalize;
}
//# sourceMappingURL=PackageJsonEditor.d.ts.map