{"version":3,"file":"EnvironmentConfiguration.js","sourceRoot":"","sources":["../../src/api/EnvironmentConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport { trueCasePathSync } from 'true-case-path';\r\n\r\nexport interface IEnvironmentConfigurationInitializeOptions {\r\n  doNotNormalizePaths?: boolean;\r\n}\r\n\r\n/**\r\n * Names of environment variables used by Rush.\r\n * @public\r\n */\r\nexport const enum EnvironmentVariableNames {\r\n  /**\r\n   * This variable overrides the temporary folder used by Rush.\r\n   * The default value is \"common/temp\" under the repository root.\r\n   */\r\n  RUSH_TEMP_FOLDER = 'RUSH_TEMP_FOLDER',\r\n\r\n  /**\r\n   * This variable overrides the version of Rush that will be installed by\r\n   * the version selector.  The default value is determined by the \"rushVersion\"\r\n   * field from rush.json.\r\n   */\r\n  RUSH_PREVIEW_VERSION = 'RUSH_PREVIEW_VERSION',\r\n\r\n  /**\r\n   * If this variable is set to \"true\", Rush will not fail the build when running a version\r\n   * of Node that does not match the criteria specified in the \"nodeSupportedVersionRange\"\r\n   * field from rush.json.\r\n   */\r\n  RUSH_ALLOW_UNSUPPORTED_NODEJS = 'RUSH_ALLOW_UNSUPPORTED_NODEJS',\r\n\r\n  /**\r\n   * This variable selects a specific installation variant for Rush to use when installing\r\n   * and linking package dependencies.  For more information, see this article:\r\n   * https://rushjs.io/pages/advanced/installation_variants/\r\n   */\r\n  RUSH_VARIANT = 'RUSH_VARIANT',\r\n\r\n  /**\r\n   * If this variable is set to \"true\", Rush will create symlinks with absolute paths instead\r\n   * of relative paths. This can be necessary when a repository is moved during a build or\r\n   * if parts of a repository are moved into a sandbox.\r\n   */\r\n  RUSH_ABSOLUTE_SYMLINKS = 'RUSH_ABSOLUTE_SYMLINKS'\r\n}\r\n\r\n/**\r\n * Provides Rush-specific environment variable data. All Rush environment variables must start with \"RUSH_\". This class\r\n * is designed to be used by RushConfiguration.\r\n *\r\n * @remarks\r\n * Initialize will throw if any unknown parameters are present.\r\n */\r\nexport class EnvironmentConfiguration {\r\n  private static _hasBeenInitialized: boolean = false;\r\n\r\n  private static _rushTempFolderOverride: string | undefined;\r\n\r\n  private static _absoluteSymlinks: boolean = false;\r\n\r\n  private static _allowUnsupportedNodeVersion: boolean = false;\r\n\r\n  /**\r\n   * An override for the common/temp folder path.\r\n   */\r\n  public static get rushTempFolderOverride(): string | undefined {\r\n    EnvironmentConfiguration._ensureInitialized();\r\n    return EnvironmentConfiguration._rushTempFolderOverride;\r\n  }\r\n\r\n  /**\r\n   * If \"true\", create symlinks with absolute paths instead of relative paths.\r\n   * See {@link EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS}\r\n   */\r\n  public static get absoluteSymlinks(): boolean {\r\n    EnvironmentConfiguration._ensureInitialized();\r\n    return EnvironmentConfiguration._absoluteSymlinks;\r\n  }\r\n\r\n  /**\r\n   * If this environment variable is set to \"true\", the Node.js version check will print a warning\r\n   * instead of causing a hard error if the environment's Node.js version doesn't match the\r\n   * version specifier in `rush.json`'s \"nodeSupportedVersionRange\" property.\r\n   *\r\n   * See {@link EnvironmentVariableNames.RUSH_ALLOW_UNSUPPORTED_NODEJS}.\r\n   */\r\n  public static get allowUnsupportedNodeVersion(): boolean {\r\n    EnvironmentConfiguration._ensureInitialized();\r\n    return EnvironmentConfiguration._allowUnsupportedNodeVersion;\r\n  }\r\n\r\n  /**\r\n   * Reads and validates environment variables. If any are invalid, this function will throw.\r\n   */\r\n  public static initialize(options: IEnvironmentConfigurationInitializeOptions = {}): void {\r\n    EnvironmentConfiguration.reset();\r\n\r\n    const unknownEnvVariables: string[] = [];\r\n    for (const envVarName in process.env) {\r\n      if (process.env.hasOwnProperty(envVarName) && envVarName.match(/^RUSH_/i)) {\r\n        const value: string | undefined = process.env[envVarName];\r\n        // Environment variables are only case-insensitive on Windows\r\n        const normalizedEnvVarName: string = os.platform() === 'win32' ? envVarName.toUpperCase() : envVarName;\r\n        switch (normalizedEnvVarName) {\r\n          case EnvironmentVariableNames.RUSH_TEMP_FOLDER: {\r\n            EnvironmentConfiguration._rushTempFolderOverride = (value && !options.doNotNormalizePaths)\r\n              ? EnvironmentConfiguration._normalizeDeepestParentFolderPath(value) || value\r\n              : value;\r\n            break;\r\n          }\r\n\r\n          case EnvironmentVariableNames.RUSH_ABSOLUTE_SYMLINKS: {\r\n            EnvironmentConfiguration._absoluteSymlinks = value === 'true';\r\n            break;\r\n          }\r\n\r\n          case EnvironmentVariableNames.RUSH_ALLOW_UNSUPPORTED_NODEJS: {\r\n            EnvironmentConfiguration._allowUnsupportedNodeVersion = value === 'true';\r\n            break;\r\n          }\r\n\r\n          case EnvironmentVariableNames.RUSH_PREVIEW_VERSION:\r\n          case EnvironmentVariableNames.RUSH_VARIANT:\r\n            // Handled by @microsoft/rush front end\r\n            break;\r\n          default:\r\n            unknownEnvVariables.push(envVarName);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // This strictness intends to catch mistakes where variables are misspelled or not used correctly.\r\n    if (unknownEnvVariables.length > 0) {\r\n      throw new Error(\r\n        'The following environment variables were found with the \"RUSH_\" prefix, but they are not ' +\r\n        `recognized by this version of Rush: ${unknownEnvVariables.join(', ')}`\r\n      );\r\n    }\r\n\r\n    EnvironmentConfiguration._hasBeenInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Resets EnvironmentConfiguration into an un-initialized state.\r\n   */\r\n  public static reset(): void {\r\n    EnvironmentConfiguration._rushTempFolderOverride = undefined;\r\n\r\n    EnvironmentConfiguration._hasBeenInitialized = false;\r\n  }\r\n\r\n  private static _ensureInitialized(): void {\r\n    if (!EnvironmentConfiguration._hasBeenInitialized) {\r\n      throw new Error('The EnvironmentConfiguration must be initialized before values can be accessed.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a path to a folder (that may or may not exist), normalize the path, including casing,\r\n   * to the first existing parent folder in the path.\r\n   *\r\n   * If no existing path can be found (for example, if the root is a volume that doesn't exist),\r\n   * this function returns undefined.\r\n   *\r\n   * @example\r\n   * If the following path exists on disk: C:\\Folder1\\folder2\\\r\n   * _normalizeFirstExistingFolderPath('c:\\\\folder1\\\\folder2\\\\temp\\\\subfolder')\r\n   * returns 'C:\\\\Folder1\\\\folder2\\\\temp\\\\subfolder'\r\n   */\r\n  private static _normalizeDeepestParentFolderPath(folderPath: string): string | undefined {\r\n    folderPath = path.normalize(folderPath);\r\n    const endsWithSlash: boolean = folderPath.charAt(folderPath.length - 1) === path.sep;\r\n    const parsedPath: path.ParsedPath = path.parse(folderPath);\r\n    const pathRoot: string = parsedPath.root;\r\n    const pathWithoutRoot: String = parsedPath.dir.substr(pathRoot.length);\r\n    const pathParts: string[] = [...pathWithoutRoot.split(path.sep), parsedPath.name].filter((part) => !!part);\r\n\r\n    // Starting with all path sections, and eliminating one from the end during each loop iteration,\r\n    // run trueCasePathSync. If trueCasePathSync returns without exception, we've found a subset\r\n    // of the path that exists and we've now gotten the correct casing.\r\n    //\r\n    // Once we've found a parent folder that exists, append the path sections that didn't exist.\r\n    for (let i: number = pathParts.length; i >= 0; i--) {\r\n      const constructedPath: string = path.join(pathRoot, ...pathParts.slice(0, i));\r\n      try {\r\n        const normalizedConstructedPath: string = trueCasePathSync(constructedPath);\r\n        const result: string = path.join(normalizedConstructedPath, ...pathParts.slice(i));\r\n        if (endsWithSlash) {\r\n          return `${result}${path.sep}`;\r\n        } else {\r\n          return result;\r\n        }\r\n      } catch (e) {\r\n        // This path doesn't exist, continue to the next subpath\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n"]}