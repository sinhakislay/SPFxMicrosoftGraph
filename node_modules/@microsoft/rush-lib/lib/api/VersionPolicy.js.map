{"version":3,"file":"VersionPolicy.js","sourceRoot":"","sources":["../../src/api/VersionPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { cloneDeep } from 'lodash';\r\nimport * as semver from 'semver';\r\nimport { IPackageJson } from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  IVersionPolicyJson,\r\n  ILockStepVersionJson,\r\n  IIndividualVersionJson,\r\n  VersionFormatForCommit,\r\n  VersionFormatForPublish,\r\n  IVersionPolicyDependencyJson\r\n} from './VersionPolicyConfiguration';\r\nimport { PackageJsonEditor } from './PackageJsonEditor';\r\nimport { RushConfiguration } from './RushConfiguration';\r\nimport { RushConfigurationProject } from './RushConfigurationProject';\r\n\r\n/**\r\n * Type of version bumps\r\n * @beta\r\n */\r\nexport enum BumpType {\r\n  // No version bump\r\n  'none',\r\n  // Prerelease version bump\r\n  'prerelease',\r\n  // Patch version bump\r\n  'patch',\r\n  // Preminor version bump\r\n  'preminor',\r\n  // Minor version bump\r\n  'minor',\r\n  // Major version bump\r\n  'major'\r\n}\r\n\r\n/**\r\n * Version policy base type names\r\n * @beta\r\n */\r\nexport enum VersionPolicyDefinitionName {\r\n  'lockStepVersion',\r\n  'individualVersion'\r\n}\r\n\r\n/**\r\n * This is the base class for version policy which controls how versions get bumped.\r\n * @beta\r\n */\r\nexport abstract class VersionPolicy {\r\n  private _policyName: string;\r\n  private _definitionName: VersionPolicyDefinitionName;\r\n  private _exemptFromRushChange: boolean;\r\n  private _versionFormatForCommit: VersionFormatForCommit;\r\n  private _versionFormatForPublish: VersionFormatForPublish;\r\n\r\n  /**\r\n   * Loads from version policy json\r\n   *\r\n   * @param versionPolicyJson - version policy Json\r\n   *\r\n   * @internal\r\n   */\r\n  public static load(versionPolicyJson: IVersionPolicyJson): VersionPolicy | undefined {\r\n    const definition: VersionPolicyDefinitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];\r\n    if (definition === VersionPolicyDefinitionName.lockStepVersion) {\r\n       // tslint:disable-next-line:no-use-before-declare\r\n      return new LockStepVersionPolicy(versionPolicyJson as ILockStepVersionJson);\r\n    } else if (definition === VersionPolicyDefinitionName.individualVersion) {\r\n      // tslint:disable-next-line:no-use-before-declare\r\n      return new IndividualVersionPolicy(versionPolicyJson as IIndividualVersionJson);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(versionPolicyJson: IVersionPolicyJson) {\r\n    this._policyName = versionPolicyJson.policyName;\r\n    this._definitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];\r\n    this._exemptFromRushChange = versionPolicyJson.exemptFromRushChange || false;\r\n\r\n    const jsonDependencies: IVersionPolicyDependencyJson = versionPolicyJson.dependencies || { };\r\n    this._versionFormatForCommit = jsonDependencies.versionFormatForCommit || VersionFormatForCommit.original;\r\n    this._versionFormatForPublish = jsonDependencies.versionFormatForPublish || VersionFormatForPublish.original;\r\n  }\r\n\r\n  /**\r\n   * Version policy name\r\n   */\r\n  public get policyName(): string {\r\n    return this._policyName;\r\n  }\r\n\r\n  /**\r\n   * Version policy definition name\r\n   */\r\n  public get definitionName(): VersionPolicyDefinitionName {\r\n    return this._definitionName;\r\n  }\r\n\r\n  /**\r\n   * Whether it is a lockstepped version policy\r\n   */\r\n  public get isLockstepped(): boolean {\r\n    return this.definitionName === VersionPolicyDefinitionName.lockStepVersion;\r\n  }\r\n\r\n  /**\r\n   * Determines if a version policy wants to opt out of changelog files.\r\n   */\r\n  public get exemptFromRushChange(): boolean {\r\n    return this._exemptFromRushChange;\r\n  }\r\n\r\n  /**\r\n   * Returns an updated package json that satisfies the policy.\r\n   *\r\n   * @param project - package json\r\n   * @param force - force update even when the project version is higher than the policy version.\r\n   */\r\n  public abstract ensure(project: IPackageJson, force?: boolean): IPackageJson | undefined;\r\n\r\n  /**\r\n   * Bumps version based on the policy\r\n   *\r\n   * @param bumpType - (optional) override bump type\r\n   * @param identifier - (optional) override prerelease Id\r\n   */\r\n  public abstract bump(bumpType?: BumpType, identifier?: string): void;\r\n\r\n  /**\r\n   * Serialized json for the policy\r\n   *\r\n   * @internal\r\n   */\r\n  public abstract get _json(): IVersionPolicyJson;\r\n\r\n  /**\r\n   * Validates the specified version and throws if the version does not satisfy the policy.\r\n   *\r\n   * @param versionString - version string\r\n   * @param packageName - package name\r\n   */\r\n  public abstract validate(versionString: string, packageName: string): void;\r\n\r\n  /**\r\n   * Tells the version policy to modify any dependencies in the target package\r\n   * to values used for publishing.\r\n   */\r\n  public setDependenciesBeforePublish(packageName: string, configuration: RushConfiguration): void {\r\n    if (this._versionFormatForPublish === VersionFormatForPublish.exact) {\r\n      const project: RushConfigurationProject = configuration.getProjectByName(packageName)!;\r\n\r\n      const packageJsonEditor: PackageJsonEditor = project.packageJsonEditor;\r\n\r\n      for (const dependency of packageJsonEditor.dependencyList) {\r\n        const rushDependencyProject: RushConfigurationProject | undefined =\r\n          configuration.getProjectByName(dependency.name);\r\n\r\n        if (rushDependencyProject) {\r\n          const dependencyVersion: string = rushDependencyProject.packageJson.version;\r\n\r\n          dependency.setVersion(dependencyVersion);\r\n        }\r\n      }\r\n\r\n      packageJsonEditor.saveIfModified();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells the version policy to modify any dependencies in the target package\r\n   * to values used for checked-in source.\r\n   */\r\n  public setDependenciesBeforeCommit(packageName: string, configuration: RushConfiguration): void {\r\n    if (this._versionFormatForCommit === VersionFormatForCommit.wildcard) {\r\n      const project: RushConfigurationProject = configuration.getProjectByName(packageName)!;\r\n\r\n      const packageJsonEditor: PackageJsonEditor = project.packageJsonEditor;\r\n\r\n      for (const dependency of packageJsonEditor.dependencyList) {\r\n        const rushDependencyProject: RushConfigurationProject | undefined =\r\n          configuration.getProjectByName(dependency.name);\r\n\r\n        if (rushDependencyProject) {\r\n          dependency.setVersion('*');\r\n        }\r\n      }\r\n\r\n      packageJsonEditor.saveIfModified();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This policy indicates all related projects should use the same version.\r\n * @beta\r\n */\r\nexport class LockStepVersionPolicy extends VersionPolicy {\r\n  private _version: semver.SemVer;\r\n  // nextBump is probably not needed. It can be prerelease only.\r\n  // Other types of bumps can be passed in as a parameter to bump method, so can identifier.\r\n  private _nextBump: BumpType;\r\n  private _mainProject: string | undefined;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(versionPolicyJson: ILockStepVersionJson) {\r\n    super(versionPolicyJson);\r\n    this._version = new semver.SemVer(versionPolicyJson.version);\r\n    this._nextBump = BumpType[versionPolicyJson.nextBump];\r\n    this._mainProject = versionPolicyJson.mainProject;\r\n  }\r\n\r\n  /**\r\n   * The value of the lockstep version\r\n   */\r\n  public get version(): string {\r\n    return this._version.format();\r\n  }\r\n\r\n  /**\r\n   * The type of bump for next bump.\r\n   */\r\n  public get nextBump(): BumpType {\r\n    return this._nextBump;\r\n  }\r\n\r\n  /**\r\n   * The main project for the version policy.\r\n   *\r\n   * If the value is provided, change logs will only be generated in that project.\r\n   * If the value is not provided, change logs will be hosted in each project associated with the policy.\r\n   */\r\n  public get mainProject(): string | undefined {\r\n    return this._mainProject;\r\n  }\r\n\r\n  /**\r\n   * Serialized json for this policy\r\n   *\r\n   * @internal\r\n   */\r\n  public get _json(): ILockStepVersionJson {\r\n    const json: ILockStepVersionJson = {\r\n      policyName: this.policyName,\r\n      definitionName: VersionPolicyDefinitionName[this.definitionName],\r\n      version: this.version,\r\n      nextBump: BumpType[this.nextBump]\r\n    };\r\n    if (this._mainProject) {\r\n      json.mainProject = this._mainProject;\r\n    }\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * Returns an updated package json that satisfies the version policy.\r\n   *\r\n   * @param project - input package json\r\n   * @param force - force update even when the project version is higher than the policy version.\r\n   */\r\n  public ensure(project: IPackageJson, force?: boolean): IPackageJson | undefined {\r\n    const packageVersion: semver.SemVer = new semver.SemVer(project.version);\r\n    const compareResult: number = packageVersion.compare(this._version);\r\n    if (compareResult === 0) {\r\n      return undefined;\r\n    } else if (compareResult > 0 && !force) {\r\n      const errorMessage: string = `Version ${project.version} in package ${project.name}`\r\n        + ` is higher than locked version ${this._version.format()}.`;\r\n      throw new Error(errorMessage);\r\n    }\r\n    return this._updatePackageVersion(project, this._version);\r\n  }\r\n\r\n  /**\r\n   * Bumps the version of the lockstep policy\r\n   *\r\n   * @param bumpType - Overwrite bump type in version-policy.json with the provided value.\r\n   * @param identifier - Prerelease identifier if bump type is prerelease.\r\n   */\r\n  public bump(bumpType?: BumpType, identifier?: string): void {\r\n    this._version.inc(this._getReleaseType(bumpType || this.nextBump), identifier);\r\n  }\r\n\r\n  /**\r\n   * Updates the version of the policy directly with a new value\r\n   * @param newVersionString - New version\r\n   */\r\n  public update(newVersionString: string): boolean {\r\n    const newVersion: semver.SemVer = new semver.SemVer(newVersionString);\r\n    if (!newVersion || this._version === newVersion) {\r\n      return false;\r\n    }\r\n    this._version = newVersion;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Validates the specified version and throws if the version does not satisfy lockstep version.\r\n   *\r\n   * @param versionString - version string\r\n   * @param packageName - package name\r\n   */\r\n  public validate(versionString: string, packageName: string): void {\r\n    const versionToTest: semver.SemVer = new semver.SemVer(versionString, false);\r\n    if (this._version.compare(versionToTest) !== 0) {\r\n      throw new Error(`Invalid version ${versionString} in ${packageName}`);\r\n    }\r\n  }\r\n\r\n  private _updatePackageVersion(project: IPackageJson, newVersion: semver.SemVer): IPackageJson {\r\n    const updatedProject: IPackageJson = cloneDeep(project);\r\n    updatedProject.version = newVersion.format();\r\n    return updatedProject;\r\n  }\r\n\r\n  private _getReleaseType(bumpType: BumpType): semver.ReleaseType {\r\n    // Eventually we should just use ReleaseType and get rid of bump type.\r\n    return BumpType[bumpType] as semver.ReleaseType;\r\n  }\r\n}\r\n\r\n/**\r\n * This policy indicates all related projects get version bump driven by their own changes.\r\n * @beta\r\n */\r\nexport class IndividualVersionPolicy extends VersionPolicy {\r\n  private _lockedMajor: number | undefined;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(versionPolicyJson: IIndividualVersionJson) {\r\n    super(versionPolicyJson);\r\n    this._lockedMajor = versionPolicyJson.lockedMajor;\r\n  }\r\n\r\n  /**\r\n   * The major version that has been locked\r\n   */\r\n  public get lockedMajor(): number | undefined {\r\n    return this._lockedMajor;\r\n  }\r\n\r\n  /**\r\n   * Serialized json for this policy\r\n   *\r\n   * @internal\r\n   */\r\n  public get _json(): IIndividualVersionJson {\r\n    const json: IIndividualVersionJson = {\r\n      policyName: this.policyName,\r\n      definitionName: VersionPolicyDefinitionName[this.definitionName]\r\n    };\r\n    if (this.lockedMajor !== undefined) {\r\n      json.lockedMajor = this.lockedMajor;\r\n    }\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * Returns an updated package json that satisfies the version policy.\r\n   *\r\n   * @param project - input package json\r\n   * @param force - force update even when the project version is higher than the policy version.\r\n   */\r\n  public ensure(project: IPackageJson, force?: boolean): IPackageJson | undefined {\r\n    if (this.lockedMajor) {\r\n      const version: semver.SemVer = new semver.SemVer(project.version);\r\n      if (version.major < this.lockedMajor) {\r\n        const updatedProject: IPackageJson = cloneDeep(project);\r\n        updatedProject.version = `${this._lockedMajor}.0.0`;\r\n        return updatedProject;\r\n      } else if (version.major > this.lockedMajor) {\r\n        const errorMessage: string = `Version ${project.version} in package ${project.name}`\r\n          + ` is higher than locked major version ${this._lockedMajor}.`;\r\n        throw new Error(errorMessage);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Bumps version.\r\n   * Individual version policy lets change files drive version bump. This method currently does not do anything.\r\n   *\r\n   * @param bumpType - bump type\r\n   * @param identifier - prerelease id\r\n   */\r\n  public bump(bumpType?: BumpType, identifier?: string): void {\r\n    // individual version policy lets change files drive version bump.\r\n  }\r\n\r\n  /**\r\n   * Validates the specified version and throws if the version does not satisfy the policy.\r\n   *\r\n   * @param versionString - version string\r\n   * @param packageName - package name\r\n   */\r\n  public validate(versionString: string, packageName: string): void {\r\n    const versionToTest: semver.SemVer = new semver.SemVer(versionString, false);\r\n    if (this._lockedMajor !== undefined) {\r\n      if (this._lockedMajor !== versionToTest.major) {\r\n        throw new Error(`Invalid major version ${versionString} in ${packageName}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}