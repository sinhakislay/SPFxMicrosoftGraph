{"version":3,"file":"Rush.js","sourceRoot":"","sources":["../../src/api/Rush.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,2BAAyB;AACzB,iCAAiC;AACjC,oEAAiE;AAEjE,wEAAqE;AACrE,0DAAuD;AACvD,8DAA2D;AAC3D,oFAAiF;AACjF,sEAAmE;AAsBnE;;;;GAIG;AACH,MAAa,IAAI;IACf;;;;;;;;;;;;OAYG;IACI,MAAM,CAAC,MAAM,CAAC,eAAuB,EAAE,GAAmB;QAC/D,MAAM,OAAO,GAAmB,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAElE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE5C,IAAI,CAAC,yDAA2B,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxD,4DAA4D;YAC5D,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;YACrB,OAAO;SACR;QAED,MAAM,MAAM,GAA0B,IAAI,6CAAqB,CAAC;YAC9D,8BAA8B,EAAE,OAAO,CAAC,8BAA8B;SACvE,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,8DAA8D;IACvG,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,WAAW,CAAC,eAAuB,EAAE,OAAuB;QACxE,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE5C,mCAAgB,CAAC,oBAAoB,CAAC,eAAe,oBAAO,OAAO,EAAG,CAAC;IACzE,CAAC;IAED;;;OAGG;IACI,MAAM,KAAK,OAAO;QACvB,OAAO,qCAAiB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;IACjE,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,uBAAuB,CAAC,GAAmB;QACxD,OAAO,CAAC,OAAO,GAAG,KAAK,SAAS,CAAC;YAC/B,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,4FAA4F;YACjH,CAAC,CAAC,GAAG,CAAC;IACV,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,SAAkB;QACnD,MAAM,WAAW,GAAW,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,MAAM,gBAAgB,GAAW,CAAC,yCAAmB,CAAC,oBAAoB,CAAC;YAC3E,CAAC,CAAC,UAAU;YACZ,CAAC,CAAC,CAAC,yCAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAEzD,OAAO,CAAC,GAAG,CACT,QAAG;YACH,MAAM,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YAC7G,MAAM,CAAC,IAAI,CAAC,MAAM,6BAAa,CAAC,cAAc,EAAE,CAAC;YACjD,QAAG;YACH,sBAAsB,WAAW,KAAK,gBAAgB,GAAG;YACzD,QAAG,CACJ,CAAC;IACJ,CAAC;CACF;AA9ED,oBA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { EOL } from 'os';\r\nimport * as colors from 'colors';\r\nimport { PackageJsonLookup } from '@microsoft/node-core-library';\r\n\r\nimport { RushCommandLineParser } from '../cli/RushCommandLineParser';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { RushXCommandLine } from '../cli/RushXCommandLine';\r\nimport { CommandLineMigrationAdvisor } from '../cli/CommandLineMigrationAdvisor';\r\nimport { NodeJsCompatibility } from '../logic/NodeJsCompatibility';\r\n\r\n/**\r\n * Options to pass to the rush \"launch\" functions.\r\n *\r\n * @public\r\n */\r\nexport interface ILaunchOptions {\r\n  /**\r\n   * True if the tool was invoked from within a project with a rush.json file, otherwise false. We\r\n   * consider a project without a rush.json to be \"unmanaged\" and we'll print that to the command line when\r\n   * the tool is executed. This is mainly used for debugging purposes.\r\n   */\r\n  isManaged: boolean;\r\n\r\n  /**\r\n   * If true, the wrapper process already printed a warning that the version of Node.js hasn't been tested\r\n   * with this version of Rush, so we shouldn't print a similar error.\r\n   */\r\n  alreadyReportedNodeTooNewError?: boolean;\r\n}\r\n\r\n/**\r\n * General operations for the Rush engine.\r\n *\r\n * @public\r\n */\r\nexport class Rush {\r\n  /**\r\n   * This API is used by the `@microsoft/rush` front end to launch the \"rush\" command-line.\r\n   * Third-party tools should not use this API.  Instead, they should execute the \"rush\" binary\r\n   * and start a new Node.js process.\r\n   *\r\n   * @param launcherVersion - The version of the `@microsoft/rush` wrapper used to call invoke the CLI.\r\n   *\r\n   * @remarks\r\n   * Earlier versions of the rush frontend used a different API contract. In the old contract,\r\n   * the second argument was the `isManaged` value of the {@link ILaunchOptions} object.\r\n   *\r\n   * Even though this API isn't documented, it is still supported for legacy compatibility.\r\n   */\r\n  public static launch(launcherVersion: string, arg: ILaunchOptions): void {\r\n    const options: ILaunchOptions = Rush._normalizeLaunchOptions(arg);\r\n\r\n    Rush._printStartupBanner(options.isManaged);\r\n\r\n    if (!CommandLineMigrationAdvisor.checkArgv(process.argv)) {\r\n      // The migration advisor recognized an obsolete command-line\r\n      process.exitCode = 1;\r\n      return;\r\n    }\r\n\r\n    const parser: RushCommandLineParser = new RushCommandLineParser({\r\n      alreadyReportedNodeTooNewError: options.alreadyReportedNodeTooNewError\r\n    });\r\n    parser.execute().catch(console.error); // CommandLineParser.execute() should never reject the promise\r\n  }\r\n\r\n  /**\r\n   * This API is used by the `@microsoft/rush` front end to launch the \"rushx\" command-line.\r\n   * Third-party tools should not use this API.  Instead, they should execute the \"rushx\" binary\r\n   * and start a new Node.js process.\r\n   *\r\n   * @param launcherVersion - The version of the `@microsoft/rush` wrapper used to call invoke the CLI.\r\n   */\r\n  public static launchRushX(launcherVersion: string, options: ILaunchOptions): void {\r\n    options = Rush._normalizeLaunchOptions(options);\r\n\r\n    Rush._printStartupBanner(options.isManaged);\r\n\r\n    RushXCommandLine._launchRushXInternal(launcherVersion, { ...options });\r\n  }\r\n\r\n  /**\r\n   * The currently executing version of the \"rush-lib\" library.\r\n   * This is the same as the Rush tool version for that release.\r\n   */\r\n  public static get version(): string {\r\n    return PackageJsonLookup.loadOwnPackageJson(__dirname).version;\r\n  }\r\n\r\n  /**\r\n   * This function normalizes legacy options to the current {@link ILaunchOptions} object.\r\n   */\r\n  private static _normalizeLaunchOptions(arg: ILaunchOptions): ILaunchOptions {\r\n    return (typeof arg === 'boolean')\r\n      ? { isManaged: arg } // In older versions of Rush, this the `launch` functions took a boolean arg for \"isManaged\"\r\n      : arg;\r\n  }\r\n\r\n  private static _printStartupBanner(isManaged: boolean): void {\r\n    const nodeVersion: string = process.versions.node;\r\n    const nodeReleaseLabel: string = (NodeJsCompatibility.isOddNumberedVersion)\r\n    ? 'unstable'\r\n    : (NodeJsCompatibility.isLtsVersion ? 'LTS' : 'pre-LTS');\r\n\r\n    console.log(\r\n      EOL +\r\n      colors.bold(`Rush Multi-Project Build Tool ${Rush.version}` + colors.yellow(isManaged ? '' : ' (unmanaged)')) +\r\n      colors.cyan(` - ${RushConstants.rushWebSiteUrl}`) +\r\n      EOL +\r\n      `Node.js version is ${nodeVersion} (${nodeReleaseLabel})` +\r\n      EOL\r\n    );\r\n  }\r\n}\r\n"]}