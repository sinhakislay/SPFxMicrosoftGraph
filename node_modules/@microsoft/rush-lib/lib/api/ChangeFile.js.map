{"version":3,"file":"ChangeFile.js","sourceRoot":"","sources":["../../src/api/ChangeFile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport gitInfo = require('git-repo-info');\r\n\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport { RushConfiguration } from './RushConfiguration';\r\nimport {\r\n  IChangeFile,\r\n  IChangeInfo\r\n} from './ChangeManagement';\r\nimport { Git } from '../logic/Git';\r\n\r\n/**\r\n * This class represents a single change file.\r\n */\r\nexport class ChangeFile {\r\n  private _changeFileData: IChangeFile;\r\n  private _rushConfiguration: RushConfiguration;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public constructor(\r\n    changeFileData: IChangeFile,\r\n    rushConfiguration: RushConfiguration\r\n  ) {\r\n    if (!changeFileData) {\r\n      throw new Error(`changeFileData does not have a value`);\r\n    }\r\n\r\n    if (!rushConfiguration) {\r\n      throw new Error(`rushConfiguration does not have a value`);\r\n    }\r\n\r\n    this._changeFileData = changeFileData;\r\n    this._rushConfiguration = rushConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Adds a change entry into the change file\r\n   * @param data - change information\r\n   */\r\n  public addChange(data: IChangeInfo): void {\r\n    this._changeFileData.changes.push(data);\r\n  }\r\n\r\n  /**\r\n   * Gets all the change entries about the specified package from the change file.\r\n   * @param packageName - package name\r\n   */\r\n  public getChanges(packageName: string): IChangeInfo[] {\r\n    const changes: IChangeInfo[] = [];\r\n    for (const info of this._changeFileData.changes) {\r\n      if (info.packageName === packageName) {\r\n        changes.push(info);\r\n      }\r\n    }\r\n    return changes;\r\n  }\r\n\r\n  /**\r\n   * Writes the change file to disk in sync mode.\r\n   * Returns the file path.\r\n   * @returns the path to the file that was written (based on generatePath())\r\n   */\r\n  public writeSync(): string {\r\n    const filePath: string = this.generatePath();\r\n    JsonFile.save(this._changeFileData, filePath, {\r\n      ensureFolderExists: true\r\n    });\r\n    return filePath;\r\n  }\r\n\r\n  /**\r\n   * Generates a file path for storing the change file to disk.\r\n   * Note that this value may change if called twice in a row,\r\n   * as it is partially based on the current date/time.\r\n   */\r\n  public generatePath(): string {\r\n    let branch: string | undefined = undefined;\r\n    const repoInfo: gitInfo.GitRepoInfo | undefined = Git.getGitInfo();\r\n    branch = repoInfo && repoInfo.branch;\r\n    if (!branch) {\r\n      console.log('Could not automatically detect git branch name, using timestamp instead.');\r\n    }\r\n\r\n    // example filename: yourbranchname_2017-05-01-20-20.json\r\n    const filename: string = (branch ?\r\n      this._escapeFilename(`${branch}_${this._getTimestamp()}.json`) :\r\n      `${this._getTimestamp()}.json`);\r\n    const filePath: string = path.join(this._rushConfiguration.changesFolder,\r\n      ...this._changeFileData.packageName.split('/'),\r\n      filename);\r\n    return filePath;\r\n  }\r\n\r\n  /**\r\n  * Gets the current time, formatted as YYYY-MM-DD-HH-MM\r\n  * Optionally will include seconds\r\n  */\r\n  private _getTimestamp(useSeconds: boolean = false): string | undefined {\r\n    // Create a date string with the current time\r\n\r\n    // dateString === \"2016-10-19T22:47:49.606Z\"\r\n    const dateString: string = new Date().toJSON();\r\n\r\n    // Parse out 2 capture groups, the date and the time\r\n    const dateParseRegex: RegExp = /([0-9]{4}-[0-9]{2}-[0-9]{2}).*([0-9]{2}:[0-9]{2}:[0-9]{2})/;\r\n\r\n    // matches[1] === \"2016-10-19\"\r\n    // matches[2] === \"22:47:49\"\r\n    const matches: RegExpMatchArray | null = dateString.match(dateParseRegex);\r\n\r\n    if (matches) {\r\n      // formattedDate === \"2016-10-19\"\r\n      const formattedDate: string = matches[1];\r\n\r\n      let formattedTime: string;\r\n      if (useSeconds) {\r\n        // formattedTime === \"22-47-49\"\r\n        formattedTime = matches[2].replace(':', '-');\r\n      } else {\r\n        // formattedTime === \"22-47\"\r\n        const timeParts: string[] = matches[2].split(':');\r\n        formattedTime = `${timeParts[0]}-${timeParts[1]}`;\r\n      }\r\n\r\n      return `${formattedDate}-${formattedTime}`;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private _escapeFilename(filename: string, replacer: string = '-'): string {\r\n    // Removes / ? < > \\ : * | \", really anything that isn't a letter, number, '.' '_' or '-'\r\n    const badCharacters: RegExp = /[^a-zA-Z0-9._-]/g;\r\n    return filename.replace(badCharacters, replacer);\r\n  }\r\n}"]}