{"version":3,"file":"CommandLineConfiguration.js","sourceRoot":"","sources":["../../src/api/CommandLineConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAE7B,oEAIsC;AAEtC,0DAAuD;AAQvD;;GAEG;AACH,MAAa,wBAAwB;IAqBnC;;OAEG;IACH,YAAoB,eAA6C;QApBjD,aAAQ,GAAkB,EAAE,CAAC;QAC7B,eAAU,GAAoB,EAAE,CAAC;QAoB/C,IAAI,eAAe,EAAE;YACnB,IAAI,eAAe,CAAC,QAAQ,EAAE;gBAC5B,KAAK,MAAM,OAAO,IAAI,eAAe,CAAC,QAAQ,EAAE;oBAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC7B;aACF;YAED,IAAI,eAAe,CAAC,UAAU,EAAE;gBAC9B,KAAK,MAAM,SAAS,IAAI,eAAe,CAAC,UAAU,EAAE;oBAClD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAEhC,2BAA2B;oBAC3B,QAAQ,SAAS,CAAC,aAAa,EAAE;wBAC/B,KAAK,QAAQ;4BACX,MAAM,gBAAgB,GAAa,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BAE3E,IAAI,SAAS,CAAC,YAAY,IAAI,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;gCAClF,MAAM,IAAI,KAAK,CAAC,MAAM,6BAAa,CAAC,mBAAmB,oBAAoB,SAAS,CAAC,QAAQ,IAAI;sCAC7F,+BAA+B,SAAS,CAAC,YAAY,GAAG;sCACxD,mDAAmD,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;6BACxF;4BACD,MAAM;qBACT;iBACF;aACF;SAEF;IACH,CAAC;IA7CD;;;;OAIG;IACI,MAAM,CAAC,qBAAqB,CAAC,YAAoB;QACtD,IAAI,eAAe,GAAiC,SAAS,CAAC;QAC9D,IAAI,8BAAU,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YACnC,eAAe,GAAG,4BAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,WAAW,CAAC,CAAC;SAChG;QAED,OAAO,IAAI,wBAAwB,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;;AAlBc,oCAAW,GAAe,8BAAU,CAAC,QAAQ,CAC1D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,qCAAqC,CAAC,CAAC,CAAC;AAFjE,4DAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  JsonFile,\r\n  JsonSchema,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\n\r\nimport { RushConstants } from '../logic/RushConstants';\r\n\r\nimport {\r\n  CommandJson,\r\n  ICommandLineJson,\r\n  ParameterJson\r\n} from './CommandLineJson';\r\n\r\n/**\r\n * Custom Commands and Options for the Rush Command Line\r\n */\r\nexport class CommandLineConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/command-line.schema.json'));\r\n\r\n  public readonly commands: CommandJson[] = [];\r\n  public readonly parameters: ParameterJson[] = [];\r\n\r\n  /**\r\n   * Loads the configuration from the specified file.  If the file does not exist,\r\n   * then an empty default instance is returned.  If the file contains errors, then\r\n   * an exception is thrown.\r\n   */\r\n  public static loadFromFileOrDefault(jsonFilename: string): CommandLineConfiguration {\r\n    let commandLineJson: ICommandLineJson | undefined = undefined;\r\n    if (FileSystem.exists(jsonFilename)) {\r\n      commandLineJson = JsonFile.loadAndValidate(jsonFilename, CommandLineConfiguration._jsonSchema);\r\n    }\r\n\r\n    return new CommandLineConfiguration(commandLineJson);\r\n  }\r\n\r\n  /**\r\n   * Use CommandLineConfiguration.loadFromFile()\r\n   */\r\n  private constructor(commandLineJson: ICommandLineJson | undefined) {\r\n    if (commandLineJson) {\r\n      if (commandLineJson.commands) {\r\n        for (const command of commandLineJson.commands) {\r\n          this.commands.push(command);\r\n        }\r\n      }\r\n\r\n      if (commandLineJson.parameters) {\r\n        for (const parameter of commandLineJson.parameters) {\r\n          this.parameters.push(parameter);\r\n\r\n          // Do some basic validation\r\n          switch (parameter.parameterKind) {\r\n            case 'choice':\r\n              const alternativeNames: string[] = parameter.alternatives.map(x => x.name);\r\n\r\n              if (parameter.defaultValue && alternativeNames.indexOf(parameter.defaultValue) < 0) {\r\n                throw new Error(`In ${RushConstants.commandLineFilename}, the parameter \"${parameter.longName}\",`\r\n                  + ` specifies a default value \"${parameter.defaultValue}\"`\r\n                  + ` which is not one of the defined alternatives: \"${alternativeNames.toString()}\"`);\r\n              }\r\n              break;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n}\r\n"]}