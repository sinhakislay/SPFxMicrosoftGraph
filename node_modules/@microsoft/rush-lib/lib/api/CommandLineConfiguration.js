"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const RushConstants_1 = require("../logic/RushConstants");
/**
 * Custom Commands and Options for the Rush Command Line
 */
class CommandLineConfiguration {
    /**
     * Use CommandLineConfiguration.loadFromFile()
     */
    constructor(commandLineJson) {
        this.commands = [];
        this.parameters = [];
        if (commandLineJson) {
            if (commandLineJson.commands) {
                for (const command of commandLineJson.commands) {
                    this.commands.push(command);
                }
            }
            if (commandLineJson.parameters) {
                for (const parameter of commandLineJson.parameters) {
                    this.parameters.push(parameter);
                    // Do some basic validation
                    switch (parameter.parameterKind) {
                        case 'choice':
                            const alternativeNames = parameter.alternatives.map(x => x.name);
                            if (parameter.defaultValue && alternativeNames.indexOf(parameter.defaultValue) < 0) {
                                throw new Error(`In ${RushConstants_1.RushConstants.commandLineFilename}, the parameter "${parameter.longName}",`
                                    + ` specifies a default value "${parameter.defaultValue}"`
                                    + ` which is not one of the defined alternatives: "${alternativeNames.toString()}"`);
                            }
                            break;
                    }
                }
            }
        }
    }
    /**
     * Loads the configuration from the specified file.  If the file does not exist,
     * then an empty default instance is returned.  If the file contains errors, then
     * an exception is thrown.
     */
    static loadFromFileOrDefault(jsonFilename) {
        let commandLineJson = undefined;
        if (node_core_library_1.FileSystem.exists(jsonFilename)) {
            commandLineJson = node_core_library_1.JsonFile.loadAndValidate(jsonFilename, CommandLineConfiguration._jsonSchema);
        }
        return new CommandLineConfiguration(commandLineJson);
    }
}
CommandLineConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, '../schemas/command-line.schema.json'));
exports.CommandLineConfiguration = CommandLineConfiguration;
//# sourceMappingURL=CommandLineConfiguration.js.map