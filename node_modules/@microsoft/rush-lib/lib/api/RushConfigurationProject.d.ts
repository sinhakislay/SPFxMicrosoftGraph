import { IPackageJson } from '@microsoft/node-core-library';
import { RushConfiguration } from '../api/RushConfiguration';
import { VersionPolicy } from './VersionPolicy';
import { PackageJsonEditor } from './PackageJsonEditor';
/**
 * This represents the JSON data object for a project entry in the rush.json configuration file.
 */
export interface IRushConfigurationProjectJson {
    packageName: string;
    projectFolder: string;
    reviewCategory?: string;
    cyclicDependencyProjects: string[];
    versionPolicyName?: string;
    shouldPublish?: boolean;
    skipRushCheck?: boolean;
}
/**
 * This represents the configuration of a project that is built by Rush, based on
 * the Rush.json configuration file.
 * @public
 */
export declare class RushConfigurationProject {
    private _packageName;
    private _projectFolder;
    private _projectRelativeFolder;
    private _projectRushTempFolder;
    private _reviewCategory;
    private _packageJson;
    private _packageJsonEditor;
    private _tempProjectName;
    private _unscopedTempProjectName;
    private _cyclicDependencyProjects;
    private _versionPolicyName;
    private _versionPolicy;
    private _shouldPublish;
    private _skipRushCheck;
    private _downstreamDependencyProjects;
    private readonly _rushConfiguration;
    /** @internal */
    constructor(projectJson: IRushConfigurationProjectJson, rushConfiguration: RushConfiguration, tempProjectName: string);
    /**
     * The name of the NPM package.  An error is reported if this name is not
     * identical to packageJson.name.
     *
     * Example: `@scope/MyProject`
     */
    readonly packageName: string;
    /**
     * The full path of the folder that contains the project to be built by Rush.
     *
     * Example: `C:\MyRepo\libraries\my-project`
     */
    readonly projectFolder: string;
    /**
     * The relative path of the folder that contains the project to be built by Rush.
     *
     * Example: `libraries\my-project`
     */
    readonly projectRelativeFolder: string;
    /**
     * The project-specific Rush temp folder. This folder is used to store Rush-specific temporary files.
     *
     * Example: `C:\MyRepo\libraries\my-project\.rush\temp`
     */
    readonly projectRushTempFolder: string;
    /**
     * The review category name, or undefined if no category was assigned.
     * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.
     */
    readonly reviewCategory: string;
    /**
     * A list of local projects that appear as devDependencies for this project, but cannot be
     * locally linked because it would create a cyclic dependency; instead, the last published
     * version will be installed in the Common folder.
     *
     * These are package names that would be found by RushConfiguration.getProjectByName().
     */
    readonly cyclicDependencyProjects: Set<string>;
    /**
     * A list of projects within the Rush configuration which directly depend on this package.
     */
    readonly downstreamDependencyProjects: string[];
    /**
     * The parsed NPM "package.json" file from projectFolder.
     * @deprecated Use packageJsonEditor instead
     */
    readonly packageJson: IPackageJson;
    /**
     * A useful wrapper around the package.json file for making modifications
     * @beta
     */
    readonly packageJsonEditor: PackageJsonEditor;
    /**
     * The unique name for the temporary project that will be generated in the Common folder.
     * For example, if the project name is `@scope/MyProject`, the temporary project name
     * might be `@rush-temp/MyProject-2`.
     *
     * Example: `@rush-temp/MyProject-2`
     */
    readonly tempProjectName: string;
    /**
     * The unscoped temporary project name
     *
     * Example: `my-project-2`
     */
    readonly unscopedTempProjectName: string;
    /**
     * A flag which indicates whether changes to this project should be published. This controls
     * whether or not the project would show up when running `rush change`, and whether or not it
     * should be published during `rush publish`.
     */
    readonly shouldPublish: boolean;
    /**
     * If true, then this project will be ignored by the "rush check" command.
     * The default value is false.
     */
    readonly skipRushCheck: boolean;
    /**
     * Name of the version policy used by this project.
     * @beta
     */
    readonly versionPolicyName: string | undefined;
    /**
     * Version policy of the project
     * @beta
     */
    readonly versionPolicy: VersionPolicy | undefined;
    /**
     * Indicate whether this project is the main project for the related version policy.
     *
     * False if the project is not for publishing.
     * True if the project is individually versioned or if its lockstep version policy does not specify main project.
     * False if the project is lockstepped and is not the main project for its version policy.
     *
     * @beta
     */
    readonly isMainProject: boolean;
}
//# sourceMappingURL=RushConfigurationProject.d.ts.map