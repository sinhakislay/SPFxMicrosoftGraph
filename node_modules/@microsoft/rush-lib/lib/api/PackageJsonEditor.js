"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const semver = require("semver");
const node_core_library_1 = require("@microsoft/node-core-library");
/**
 * @beta
 */
class PackageJsonDependency {
    constructor(name, version, type, onChange) {
        this._name = name;
        this._version = version;
        this._type = type;
        this._onChange = onChange;
    }
    get name() {
        return this._name;
    }
    get version() {
        return this._version;
    }
    setVersion(newVersion) {
        if (!semver.valid(newVersion) && !semver.validRange(newVersion)) {
            throw new Error(`Cannot set version to invalid value: "${newVersion}"`);
        }
        this._version = newVersion;
        this._onChange();
    }
    get dependencyType() {
        return this._type;
    }
}
exports.PackageJsonDependency = PackageJsonDependency;
/**
 * @beta
 */
class PackageJsonEditor {
    static load(filePath) {
        return new PackageJsonEditor(filePath, node_core_library_1.JsonFile.load(filePath));
    }
    static fromObject(object, filename) {
        return new PackageJsonEditor(filename, object);
    }
    get name() {
        return this._data.name;
    }
    get version() {
        return this._data.version;
    }
    get filePath() {
        return this._filePath;
    }
    /**
     * The list of dependencies of type DependencyType.Regular, DependencyType.Optional, or DependencyType.Peer.
     */
    get dependencyList() {
        return [...this._dependencies.values()];
    }
    /**
     * The list of dependencies of type DependencyType.Dev.
     */
    get devDependencyList() {
        return [...this._devDependencies.values()];
    }
    tryGetDependency(packageName) {
        return this._dependencies.get(packageName);
    }
    tryGetDevDependency(packageName) {
        return this._devDependencies.get(packageName);
    }
    addOrUpdateDependency(packageName, newVersion, dependencyType) {
        const dependency = new PackageJsonDependency(packageName, newVersion, dependencyType, this._onChange.bind(this));
        if (dependencyType === "dependencies" /* Regular */ || dependencyType === "optionalDependencies" /* Optional */) {
            this._dependencies.set(packageName, dependency);
        }
        else {
            this._devDependencies.set(packageName, dependency);
        }
        this._modified = true;
    }
    saveIfModified() {
        if (this._modified) {
            node_core_library_1.JsonFile.save(this._normalize(), this._filePath);
            this._modified = false;
            return true;
        }
        return false;
    }
    constructor(filepath, data) {
        this._filePath = filepath;
        this._data = data;
        this._modified = false;
        this._dependencies = new Map();
        this._devDependencies = new Map();
        const dependencies = data.dependencies || {};
        const optionalDependencies = data.optionalDependencies || {};
        const peerDependencies = data.peerDependencies || {};
        const devDependencies = data.devDependencies || {};
        const _onChange = this._onChange.bind(this);
        try {
            Object.keys(dependencies || {}).forEach((packageName) => {
                if (Object.prototype.hasOwnProperty.call(optionalDependencies, packageName)) {
                    throw new Error(`The package "${packageName}" cannot be listed in both `
                        + `"dependencies" and "optionalDependencies"`);
                }
                if (Object.prototype.hasOwnProperty.call(peerDependencies, packageName)) {
                    throw new Error(`The package "${packageName}" cannot be listed in both `
                        + `"dependencies" and "peerDependencies"`);
                }
                this._dependencies.set(packageName, new PackageJsonDependency(packageName, dependencies[packageName], "dependencies" /* Regular */, _onChange));
            });
            Object.keys(optionalDependencies || {}).forEach((packageName) => {
                if (Object.prototype.hasOwnProperty.call(peerDependencies, packageName)) {
                    throw new Error(`The package "${packageName}" cannot be listed in both `
                        + `"optionalDependencies" and "peerDependencies"`);
                }
                this._dependencies.set(packageName, new PackageJsonDependency(packageName, optionalDependencies[packageName], "optionalDependencies" /* Optional */, _onChange));
            });
            Object.keys(peerDependencies || {}).forEach((packageName) => {
                this._dependencies.set(packageName, new PackageJsonDependency(packageName, peerDependencies[packageName], "peerDependencies" /* Peer */, _onChange));
            });
            Object.keys(devDependencies || {}).forEach((packageName) => {
                this._devDependencies.set(packageName, new PackageJsonDependency(packageName, devDependencies[packageName], "devDependencies" /* Dev */, _onChange));
            });
            node_core_library_1.Sort.sortMapKeys(this._dependencies);
            node_core_library_1.Sort.sortMapKeys(this._devDependencies);
        }
        catch (e) {
            throw new Error(`Error loading "${filepath}": ${e.message}`);
        }
    }
    _onChange() {
        this._modified = true;
    }
    _normalize() {
        delete this._data.dependencies;
        delete this._data.optionalDependencies;
        delete this._data.peerDependencies;
        delete this._data.devDependencies;
        const keys = [...this._dependencies.keys()].sort();
        for (const packageName of keys) {
            const dependency = this._dependencies.get(packageName);
            if (dependency.dependencyType === "dependencies" /* Regular */) {
                if (!this._data.dependencies) {
                    this._data.dependencies = {};
                }
                this._data.dependencies[dependency.name] = dependency.version;
            }
            if (dependency.dependencyType === "optionalDependencies" /* Optional */) {
                if (!this._data.optionalDependencies) {
                    this._data.optionalDependencies = {};
                }
                this._data.optionalDependencies[dependency.name] = dependency.version;
            }
            if (dependency.dependencyType === "peerDependencies" /* Peer */) {
                if (!this._data.peerDependencies) {
                    this._data.peerDependencies = {};
                }
                this._data.peerDependencies[dependency.name] = dependency.version;
            }
        }
        const devDependenciesKeys = [...this._devDependencies.keys()].sort();
        for (const packageName of devDependenciesKeys) {
            const dependency = this._devDependencies.get(packageName);
            if (!this._data.devDependencies) {
                this._data.devDependencies = {};
            }
            this._data.devDependencies[dependency.name] = dependency.version;
        }
        return this._data;
    }
}
exports.PackageJsonEditor = PackageJsonEditor;
//# sourceMappingURL=PackageJsonEditor.js.map