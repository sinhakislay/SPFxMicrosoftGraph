{"version":3,"file":"RushConfiguration.js","sourceRoot":"","sources":["../../src/api/RushConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as semver from 'semver';\r\nimport {\r\n  JsonFile,\r\n  JsonSchema,\r\n  Path,\r\n  PackageName,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\nimport { trueCasePathSync } from 'true-case-path';\r\n\r\nimport { Rush } from '../api/Rush';\r\nimport { RushConfigurationProject, IRushConfigurationProjectJson } from './RushConfigurationProject';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { ApprovedPackagesPolicy } from './ApprovedPackagesPolicy';\r\nimport { EventHooks } from './EventHooks';\r\nimport { VersionPolicyConfiguration } from './VersionPolicyConfiguration';\r\nimport { EnvironmentConfiguration } from './EnvironmentConfiguration';\r\nimport { CommonVersionsConfiguration } from './CommonVersionsConfiguration';\r\nimport { Utilities } from '../utilities/Utilities';\r\nimport { PackageManagerName, PackageManager } from './packageManager/PackageManager';\r\nimport { NpmPackageManager } from './packageManager/NpmPackageManager';\r\nimport { YarnPackageManager } from './packageManager/YarnPackageManager';\r\nimport { PnpmPackageManager } from './packageManager/PnpmPackageManager';\r\nimport { ExperimentsConfiguration } from './ExperimentsConfiguration';\r\n\r\nconst MINIMUM_SUPPORTED_RUSH_JSON_VERSION: string = '0.0.0';\r\n\r\n/**\r\n * A list of known config filenames that are expected to appear in the \"./common/config/rush\" folder.\r\n * To avoid confusion/mistakes, any extra files will be reported as an error.\r\n */\r\nconst knownRushConfigFilenames: string[] = [\r\n  '.npmrc',\r\n  RushConstants.pinnedVersionsFilename,\r\n  RushConstants.commonVersionsFilename,\r\n  RushConstants.browserApprovedPackagesFilename,\r\n  RushConstants.nonbrowserApprovedPackagesFilename,\r\n  RushConstants.versionPoliciesFilename,\r\n  RushConstants.commandLineFilename,\r\n  RushConstants.experimentsFilename\r\n];\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IApprovedPackagesPolicyJson {\r\n  reviewCategories?: string[];\r\n  ignoredNpmScopes?: string[];\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IRushGitPolicyJson {\r\n  allowedEmailRegExps?: string[];\r\n  sampleEmail?: string;\r\n  versionBumpCommitMessage?: string;\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n * @beta\r\n */\r\nexport interface IEventHooksJson {\r\n  /**\r\n   * The list of scripts to run after every Rush build command finishes\r\n   */\r\n  postRushBuild?: string[];\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IRushRepositoryJson {\r\n  /**\r\n   * The remote url of the repository. This helps \"rush change\" find the right remote to compare against.\r\n   */\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IPnpmOptionsJson {\r\n  strictPeerDependencies?: boolean;\r\n  resolutionStrategy?: ResolutionStrategy;\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IYarnOptionsJson {\r\n  ignoreEngines?: boolean;\r\n}\r\n\r\n/**\r\n * Options defining an allowed variant as part of IRushConfigurationJson.\r\n */\r\nexport interface IRushVariantOptionsJson {\r\n  variantName: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"rush.json\" configuration file.\r\n * See rush.schema.json for documentation.\r\n */\r\nexport interface IRushConfigurationJson {\r\n  $schema: string;\r\n  npmVersion?: string;\r\n  pnpmVersion?: string;\r\n  yarnVersion?: string;\r\n  rushVersion: string;\r\n  repository?: IRushRepositoryJson;\r\n  nodeSupportedVersionRange?: string;\r\n  suppressNodeLtsWarning?: boolean;\r\n  projectFolderMinDepth?: number;\r\n  projectFolderMaxDepth?: number;\r\n  approvedPackagesPolicy?: IApprovedPackagesPolicyJson;\r\n  gitPolicy?: IRushGitPolicyJson;\r\n  telemetryEnabled?: boolean;\r\n  projects: IRushConfigurationProjectJson[];\r\n  eventHooks?: IEventHooksJson;\r\n  hotfixChangeEnabled?: boolean;\r\n  pnpmOptions?: IPnpmOptionsJson;\r\n  yarnOptions?: IYarnOptionsJson;\r\n  ensureConsistentVersions?: boolean;\r\n  variants?: IRushVariantOptionsJson[];\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"rush-link.json\" data file.\r\n */\r\nexport interface IRushLinkJson {\r\n  localLinks: {\r\n    [name: string]: string[]\r\n  };\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"current-variant.json\" data file.\r\n */\r\nexport interface ICurrentVariantJson {\r\n  variant: string | null; // Use `null` instead of `undefined` because `undefined` is not handled by JSON.\r\n}\r\n\r\n/**\r\n * Options that are only used when the PNPM package manager is selected.\r\n *\r\n * @remarks\r\n * It is valid to define these options in rush.json even if the PNPM package manager\r\n * is not being used.\r\n *\r\n * @public\r\n */\r\nexport class PnpmOptionsConfiguration {\r\n  /**\r\n   * If true, then Rush will add the \"--strict-peer-dependencies\" option when invoking PNPM.\r\n   *\r\n   * @remarks\r\n   * This causes \"rush install\" to fail if there are unsatisfied peer dependencies, which is\r\n   * an invalid state that can cause build failures or incompatible dependency versions.\r\n   * (For historical reasons, JavaScript package managers generally do not treat this invalid state\r\n   * as an error.)\r\n   *\r\n   * The default value is false.  (For now.)\r\n   */\r\n  public readonly strictPeerDependencies: boolean;\r\n\r\n  /**\r\n   * The resolution strategy that will be used by PNPM.\r\n   *\r\n   * @remarks\r\n   * Configures the strategy used to select versions during installation.\r\n   *\r\n   * This feature requires PNPM version 3.1 or newer.  It corresponds to the `--resolution-strategy` command-line\r\n   * option for PNPM.  Possible values are `\"fast\"` and `\"fewer-dependencies\"`.  PNPM's default is `\"fast\"`, but this\r\n   * may be incompatible with certain packages, for example the `@types` packages from DefinitelyTyped.  Rush's default\r\n   * is `\"fewer-dependencies\"`, which causes PNPM to avoid installing a newer version if an already installed version\r\n   * can be reused; this is more similar to NPM's algorithm.\r\n   *\r\n   * For more background, see this discussion: {@link https://github.com/pnpm/pnpm/issues/1187}\r\n   */\r\n  public readonly resolutionStrategy: ResolutionStrategy;\r\n\r\n  /** @internal */\r\n  public constructor(json: IPnpmOptionsJson) {\r\n    this.strictPeerDependencies = !!json.strictPeerDependencies;\r\n    this.resolutionStrategy = json.resolutionStrategy || 'fewer-dependencies';\r\n  }\r\n}\r\n\r\n/**\r\n * Options that are only used when the yarn package manager is selected.\r\n *\r\n * @remarks\r\n * It is valid to define these options in rush.json even if the yarn package manager\r\n * is not being used.\r\n *\r\n * @public\r\n */\r\nexport class YarnOptionsConfiguration {\r\n  /**\r\n   * If true, then Rush will add the \"--ignore-engines\" option when invoking Yarn.\r\n   * This allows \"rush install\" to succeed if there are dependencies with engines defined in\r\n   * package.json which do not match the current environment.\r\n   *\r\n   * The default value is false.\r\n   */\r\n  public readonly ignoreEngines: boolean;\r\n\r\n  /** @internal */\r\n  public constructor(json: IYarnOptionsJson) {\r\n    this.ignoreEngines = !!json.ignoreEngines;\r\n  }\r\n}\r\n\r\n/**\r\n * Options for `RushConfiguration.tryFindRushJsonLocation`.\r\n * @public\r\n */\r\nexport interface ITryFindRushJsonLocationOptions {\r\n  /**\r\n   * Whether to show verbose console messages.  Defaults to false.\r\n   */\r\n  showVerbose?: boolean;    // Defaults to false (inverse of old `verbose` parameter)\r\n\r\n  /**\r\n   * The folder path where the search will start.  Defaults tot he current working directory.\r\n   */\r\n  startingFolder?: string;  // Defaults to cwd\r\n}\r\n\r\n/**\r\n * This represents the available PNPM resolution strategies as a string\r\n * @public\r\n */\r\nexport type ResolutionStrategy = 'fewer-dependencies' | 'fast';\r\n\r\n/**\r\n * This represents the Rush configuration for a repository, based on the \"rush.json\"\r\n * configuration file.\r\n * @public\r\n */\r\nexport class RushConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(path.join(__dirname, '../schemas/rush.schema.json'));\r\n\r\n  private _rushJsonFile: string;\r\n  private _rushJsonFolder: string;\r\n  private _changesFolder: string;\r\n  private _commonFolder: string;\r\n  private _commonTempFolder: string;\r\n  private _commonScriptsFolder: string;\r\n  private _commonRushConfigFolder: string;\r\n  private _packageManager: PackageManagerName;\r\n  private _packageManagerWrapper: PackageManager;\r\n  private _npmCacheFolder: string;\r\n  private _npmTmpFolder: string;\r\n  private _pnpmStoreFolder: string;\r\n  private _yarnCacheFolder: string;\r\n  private _shrinkwrapFilename: string;\r\n  private _tempShrinkwrapFilename: string;\r\n  private _tempShrinkwrapPreinstallFilename: string;\r\n  private _rushLinkJsonFilename: string;\r\n  private _currentVariantJsonFilename: string;\r\n  private _packageManagerToolVersion: string;\r\n  private _packageManagerToolFilename: string;\r\n  private _projectFolderMinDepth: number;\r\n  private _projectFolderMaxDepth: number;\r\n  private _ensureConsistentVersions: boolean;\r\n  private _suppressNodeLtsWarning: boolean;\r\n  private _variants: {\r\n    [variantName: string]: boolean;\r\n  };\r\n\r\n  // \"approvedPackagesPolicy\" feature\r\n  private _approvedPackagesPolicy: ApprovedPackagesPolicy;\r\n\r\n  // \"gitPolicy\" feature\r\n  private _gitAllowedEmailRegExps: string[];\r\n  private _gitSampleEmail: string;\r\n  private _gitVersionBumpCommitMessage: string | undefined;\r\n\r\n  // \"hotfixChangeEnabled\" feature\r\n  private _hotfixChangeEnabled: boolean;\r\n\r\n  // Repository info\r\n  private _repositoryUrl: string;\r\n\r\n  private _pnpmOptions: PnpmOptionsConfiguration;\r\n  private _yarnOptions: YarnOptionsConfiguration;\r\n\r\n  // Rush hooks\r\n  private _eventHooks: EventHooks;\r\n\r\n  private _telemetryEnabled: boolean;\r\n\r\n  private _projects: RushConfigurationProject[];\r\n  private _projectsByName: Map<string, RushConfigurationProject>;\r\n\r\n  private _versionPolicyConfiguration: VersionPolicyConfiguration;\r\n  private _experimentsConfiguration: ExperimentsConfiguration;\r\n\r\n  /**\r\n   * Loads the configuration data from an Rush.json configuration file and returns\r\n   * an RushConfiguration object.\r\n   */\r\n  public static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration {\r\n    let resolvedRushJsonFilename: string = path.resolve(rushJsonFilename);\r\n    // Load the rush.json before we fix the casing. If the case is wrong on a case-sensitive filesystem,\r\n    // the next line show throw.\r\n    const rushConfigurationJson: IRushConfigurationJson = JsonFile.load(resolvedRushJsonFilename);\r\n\r\n    try {\r\n      resolvedRushJsonFilename = trueCasePathSync(resolvedRushJsonFilename);\r\n    } catch (error) {\r\n      /* ignore errors from true-case-path */\r\n    }\r\n\r\n    // Check the Rush version *before* we validate the schema, since if the version is outdated\r\n    // then the schema may have changed. This should no longer be a problem after Rush 4.0 and the C2R wrapper,\r\n    // but we'll validate anyway.\r\n    const expectedRushVersion: string = rushConfigurationJson.rushVersion;\r\n\r\n    const rushJsonBaseName: string = path.basename(resolvedRushJsonFilename);\r\n\r\n    // If the version is missing or malformed, fall through and let the schema handle it.\r\n    if (expectedRushVersion && semver.valid(expectedRushVersion)) {\r\n      // Make sure the requested version isn't too old\r\n      if (semver.lt(expectedRushVersion, MINIMUM_SUPPORTED_RUSH_JSON_VERSION)) {\r\n        throw new Error(`${rushJsonBaseName} is version ${expectedRushVersion}, which is too old for this tool. ` +\r\n          `The minimum supported version is ${MINIMUM_SUPPORTED_RUSH_JSON_VERSION}.`);\r\n      }\r\n\r\n      // Make sure the requested version isn't too new.\r\n      //\r\n      // If the major/minor versions are the same, then we consider the file to be compatible.\r\n      // This is somewhat lax, e.g. \"5.0.2-dev.3\" will be assumed to be loadable by rush-lib 5.0.0.\r\n      //\r\n      // IMPORTANT: Whenever a breaking change is introduced for one of the config files, we must\r\n      // increment the minor version number for Rush.\r\n      if (semver.major(Rush.version) !== semver.major(expectedRushVersion)\r\n        || semver.minor(Rush.version) !== semver.minor(expectedRushVersion)) {\r\n\r\n          // If the major/minor are different, then make sure it's an older version.\r\n          if (semver.lt(Rush.version, expectedRushVersion)) {\r\n            throw new Error(`Unable to load ${rushJsonBaseName} because its RushVersion is`\r\n              + ` ${rushConfigurationJson.rushVersion}, whereas @microsoft/rush-lib is version ${Rush.version}.`\r\n              + ` Consider upgrading the library.`);\r\n        }\r\n      }\r\n    }\r\n\r\n    RushConfiguration._jsonSchema.validateObject(rushConfigurationJson, resolvedRushJsonFilename);\r\n\r\n    return new RushConfiguration(rushConfigurationJson, resolvedRushJsonFilename);\r\n  }\r\n\r\n  public static loadFromDefaultLocation(options?: ITryFindRushJsonLocationOptions): RushConfiguration {\r\n    const rushJsonLocation: string | undefined = RushConfiguration.tryFindRushJsonLocation(options);\r\n\r\n    if (rushJsonLocation) {\r\n      return RushConfiguration.loadFromConfigurationFile(rushJsonLocation);\r\n    } else {\r\n      throw Utilities.getRushConfigNotFoundError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the rush.json location and return the path, or undefined if a rush.json can't be found.\r\n   */\r\n  public static tryFindRushJsonLocation(options?: ITryFindRushJsonLocationOptions): string | undefined {\r\n    const optionsIn: ITryFindRushJsonLocationOptions = options || {};\r\n    const verbose: boolean = optionsIn.showVerbose || false;\r\n    let currentFolder: string = optionsIn.startingFolder || process.cwd();\r\n\r\n    // Look upwards at parent folders until we find a folder containing rush.json\r\n    for (let i: number = 0; i < 10; ++i) {\r\n      const rushJsonFilename: string = path.join(currentFolder, 'rush.json');\r\n\r\n      if (FileSystem.exists(rushJsonFilename)) {\r\n        if (i > 0 && verbose) {\r\n          console.log('Found configuration in ' + rushJsonFilename);\r\n        }\r\n\r\n        if (verbose) {\r\n          console.log('');\r\n        }\r\n\r\n        return rushJsonFilename;\r\n      }\r\n\r\n      const parentFolder: string = path.dirname(currentFolder);\r\n      if (parentFolder === currentFolder) {\r\n        break;\r\n      }\r\n\r\n      currentFolder = parentFolder;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This generates the unique names that are used to create temporary projects\r\n   * in the Rush common folder.\r\n   * NOTE: sortedProjectJsons is sorted by the caller.\r\n   */\r\n  private static _generateTempNamesForProjects(sortedProjectJsons: IRushConfigurationProjectJson[]):\r\n    Map<IRushConfigurationProjectJson, string> {\r\n\r\n    const tempNamesByProject: Map<IRushConfigurationProjectJson, string> =\r\n      new Map<IRushConfigurationProjectJson, string>();\r\n    const usedTempNames: Set<string> = new Set<string>();\r\n\r\n    // NOTE: projectJsons was already sorted in alphabetical order by the caller.\r\n    for (const projectJson of sortedProjectJsons) {\r\n      // If the name is \"@ms/MyProject\", extract the \"MyProject\" part\r\n      const unscopedName: string = PackageName.getUnscopedName(projectJson.packageName);\r\n\r\n      // Generate a unique like name \"@rush-temp/MyProject\", or \"@rush-temp/MyProject-2\" if\r\n      // there is a naming conflict\r\n      let counter: number = 0;\r\n      let tempProjectName: string = `${RushConstants.rushTempNpmScope}/${unscopedName}`;\r\n      while (usedTempNames.has(tempProjectName)) {\r\n        ++counter;\r\n        tempProjectName = `${RushConstants.rushTempNpmScope}/${unscopedName}-${counter}`;\r\n      }\r\n      usedTempNames.add(tempProjectName);\r\n      tempNamesByProject.set(projectJson, tempProjectName);\r\n    }\r\n\r\n    return tempNamesByProject;\r\n  }\r\n\r\n  /**\r\n   * If someone adds a config file in the \"common/rush/config\" folder, it would be a bad\r\n   * experience for Rush to silently ignore their file simply because they misspelled the\r\n   * filename, or maybe it's an old format that's no longer supported.  The\r\n   * _validateCommonRushConfigFolder() function makes sure that this folder only contains\r\n   * recognized config files.\r\n   */\r\n  private static _validateCommonRushConfigFolder(\r\n      commonRushConfigFolder: string,\r\n      packageManager: PackageManagerName,\r\n      shrinkwrapFilename: string\r\n  ): void {\r\n    if (!FileSystem.exists(commonRushConfigFolder)) {\r\n      console.log(`Creating folder: ${commonRushConfigFolder}`);\r\n      FileSystem.ensureFolder(commonRushConfigFolder);\r\n      return;\r\n    }\r\n\r\n    for (const filename of FileSystem.readFolder(commonRushConfigFolder)) {\r\n\r\n      // Ignore things that aren't actual files\r\n      const stat: fs.Stats = FileSystem.getLinkStatistics(path.join(commonRushConfigFolder, filename));\r\n      if (!stat.isFile() && !stat.isSymbolicLink()) {\r\n        continue;\r\n      }\r\n\r\n      // Ignore harmless file extensions\r\n      const fileExtension: string = path.extname(filename);\r\n      if (['.bak', '.disabled', '.md', '.old', '.orig'].indexOf(fileExtension) >= 0) {\r\n        continue;\r\n      }\r\n\r\n      const knownSet: Set<string> = new Set<string>(knownRushConfigFilenames.map(x => x.toUpperCase()));\r\n\r\n      // Add the shrinkwrap filename for the package manager to the known set.\r\n      knownSet.add(shrinkwrapFilename.toUpperCase());\r\n\r\n      // If the package manager is pnpm, then also add the pnpm file to the known set.\r\n      if (packageManager === 'pnpm') {\r\n        knownSet.add(RushConstants.pnpmfileFilename.toUpperCase());\r\n      }\r\n\r\n      // Is the filename something we know?  If not, report an error.\r\n      if (!knownSet.has(filename.toUpperCase())) {\r\n        throw new Error(`An unrecognized file \"${filename}\" was found in the Rush config folder:`\r\n          + ` ${commonRushConfigFolder}`);\r\n      }\r\n    }\r\n\r\n    const pinnedVersionsFilename: string = path.join(commonRushConfigFolder, RushConstants.pinnedVersionsFilename);\r\n    if (FileSystem.exists(pinnedVersionsFilename)) {\r\n      throw new Error('The \"pinned-versions.json\" config file is no longer supported;'\r\n        + ' please move your settings to the \"preferredVersions\" field of a \"common-versions.json\" config file.'\r\n        + ` (See the ${RushConstants.rushWebSiteUrl} documentation for details.)\\n\\n`\r\n        + pinnedVersionsFilename);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The name of the package manager being used to install dependencies\r\n   */\r\n  public get packageManager(): PackageManagerName {\r\n    return this._packageManager;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc PackageManager}\r\n   *\r\n   * @privateremarks\r\n   * In the next major breaking API change, we will rename this property to \"packageManager\" and eliminate the\r\n   * old property with that name.\r\n   *\r\n   * @beta\r\n   */\r\n  public get packageManagerWrapper(): PackageManager {\r\n    return this._packageManagerWrapper;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to the \"rush.json\" configuration file that was loaded to construct this object.\r\n   */\r\n  public get rushJsonFile(): string {\r\n    return this._rushJsonFile;\r\n  }\r\n\r\n  /**\r\n   * The absolute path of the folder that contains rush.json for this project.\r\n   */\r\n  public get rushJsonFolder(): string {\r\n    return this._rushJsonFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder that contains all change files.\r\n   */\r\n  public get changesFolder(): string {\r\n    return this._changesFolder;\r\n  }\r\n\r\n  /**\r\n   * The fully resolved path for the \"common\" folder where Rush will store settings that\r\n   * affect all Rush projects.  This is always a subfolder of the folder containing \"rush.json\".\r\n   * Example: `C:\\MyRepo\\common`\r\n   */\r\n  public get commonFolder(): string {\r\n    return this._commonFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder where Rush's additional config files are stored.  This folder is always a\r\n   * subfolder called `config\\rush` inside the common folder.  (The `common\\config` folder\r\n   * is reserved for configuration files used by other tools.)  To avoid confusion or mistakes,\r\n   * Rush will report an error if this this folder contains any unrecognized files.\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\config\\rush`\r\n   */\r\n  public get commonRushConfigFolder(): string {\r\n    return this._commonRushConfigFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder where temporary files will be stored.  This is always a subfolder called \"temp\"\r\n   * under the common folder.\r\n   * Example: `C:\\MyRepo\\common\\temp`\r\n   */\r\n  public get commonTempFolder(): string {\r\n    return this._commonTempFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder where automation scripts are stored.  This is always a subfolder called \"scripts\"\r\n   * under the common folder.\r\n   * Example: `C:\\MyRepo\\common\\scripts`\r\n   */\r\n  public get commonScriptsFolder(): string {\r\n    return this._commonScriptsFolder;\r\n  }\r\n\r\n  /**\r\n   * The local folder that will store the NPM package cache.  Rush does not rely on the\r\n   * npm's default global cache folder, because npm's caching implementation does not\r\n   * reliably handle multiple processes.  (For example, if a build box is running\r\n   * \"rush install\" simultaneously for two different working folders, it may fail randomly.)\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\temp\\npm-cache`\r\n   */\r\n  public get npmCacheFolder(): string {\r\n    return this._npmCacheFolder;\r\n  }\r\n\r\n  /**\r\n   * The local folder where npm's temporary files will be written during installation.\r\n   * Rush does not rely on the global default folder, because it may be on a different\r\n   * hard disk.\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\temp\\npm-tmp`\r\n   */\r\n  public get npmTmpFolder(): string {\r\n    return this._npmTmpFolder;\r\n  }\r\n\r\n  /**\r\n   * The local folder where PNPM stores a global installation for every installed package\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\temp\\pnpm-store`\r\n   */\r\n  public get pnpmStoreFolder(): string {\r\n    return this._pnpmStoreFolder;\r\n  }\r\n\r\n  /**\r\n   * The local folder that will store the Yarn package cache.\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\temp\\yarn-cache`\r\n   */\r\n  public get yarnCacheFolder(): string {\r\n    return this._yarnCacheFolder;\r\n  }\r\n\r\n  /**\r\n   * The full path of the shrinkwrap file that is tracked by Git.  (The \"rush install\"\r\n   * command uses a temporary copy, whose path is tempShrinkwrapFilename.)\r\n   * @remarks\r\n   * This property merely reports the filename; the file itself may not actually exist.\r\n   * Example: `C:\\MyRepo\\common\\npm-shrinkwrap.json` or `C:\\MyRepo\\common\\pnpm-lock.yaml`\r\n   *\r\n   * @deprecated Use `getCommittedShrinkwrapFilename` instead, which gets the correct common\r\n   * shrinkwrap file name for a given active variant.\r\n   */\r\n  public get committedShrinkwrapFilename(): string {\r\n    return this.getCommittedShrinkwrapFilename();\r\n  }\r\n\r\n  /**\r\n   * The filename (without any path) of the shrinkwrap file that is used by the package manager.\r\n   * @remarks\r\n   * This property merely reports the filename; the file itself may not actually exist.\r\n   * Example: `npm-shrinkwrap.json` or `pnpm-lock.yaml`\r\n   */\r\n  public get shrinkwrapFilename(): string {\r\n    return this._shrinkwrapFilename;\r\n  }\r\n\r\n  /**\r\n   * The full path of the temporary shrinkwrap file that is used during \"rush install\".\r\n   * This file may get rewritten by the package manager during installation.\r\n   * @remarks\r\n   * This property merely reports the filename; the file itself may not actually exist.\r\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap.json` or `C:\\MyRepo\\common\\temp\\pnpm-lock.yaml`\r\n   */\r\n  public get tempShrinkwrapFilename(): string {\r\n    return this._tempShrinkwrapFilename;\r\n  }\r\n\r\n  /**\r\n   * The full path of a backup copy of tempShrinkwrapFilename. This backup copy is made\r\n   * before installation begins, and can be compared to determine how the package manager\r\n   * modified tempShrinkwrapFilename.\r\n   * @remarks\r\n   * This property merely reports the filename; the file itself may not actually exist.\r\n   * Example: `C:\\MyRepo\\common\\temp\\npm-shrinkwrap-preinstall.json`\r\n   * or `C:\\MyRepo\\common\\temp\\pnpm-lock-preinstall.yaml`\r\n   */\r\n  public get tempShrinkwrapPreinstallFilename(): string {\r\n    return this._tempShrinkwrapPreinstallFilename;\r\n  }\r\n\r\n  /**\r\n   * Returns an English phrase such as \"shrinkwrap file\" that can be used in logging messages\r\n   * to refer to the shrinkwrap file using appropriate terminology for the currently selected\r\n   * package manager.\r\n   */\r\n  public get shrinkwrapFilePhrase(): string {\r\n    if (this._packageManager === 'yarn') {\r\n      // Eventually we'd like to be consistent with Yarn's terminology of calling this a \"lock file\",\r\n      // but a lot of Rush documentation uses \"shrinkwrap\" file and would all need to be updated.\r\n      return 'shrinkwrap file (yarn.lock)';\r\n    } else {\r\n      return 'shrinkwrap file';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The filename of the build dependency data file.  By default this is\r\n   * called 'rush-link.json' resides in the Rush common folder.\r\n   * Its data structure is defined by IRushLinkJson.\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\temp\\rush-link.json`\r\n   */\r\n  public get rushLinkJsonFilename(): string {\r\n    return this._rushLinkJsonFilename;\r\n  }\r\n\r\n  /**\r\n   * The filename of the variant dependency data file.  By default this is\r\n   * called 'current-variant.json' resides in the Rush common folder.\r\n   * Its data structure is defined by ICurrentVariantJson.\r\n   *\r\n   * Example: `C:\\MyRepo\\common\\temp\\current-variant.json`\r\n   */\r\n  public get currentVariantJsonFilename(): string {\r\n    return this._currentVariantJsonFilename;\r\n  }\r\n\r\n  /**\r\n   * The version of the locally installed NPM tool.  (Example: \"1.2.3\")\r\n   */\r\n  public get packageManagerToolVersion(): string {\r\n    return this._packageManagerToolVersion;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to the locally installed NPM tool.  If \"rush install\" has not\r\n   * been run, then this file may not exist yet.\r\n   * Example: `C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm`\r\n   */\r\n  public get packageManagerToolFilename(): string {\r\n    return this._packageManagerToolFilename;\r\n  }\r\n\r\n  /**\r\n   * The minimum allowable folder depth for the projectFolder field in the rush.json file.\r\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\r\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\r\n   * which implements a standard 2-level hierarchy of <categoryFolder>/<projectFolder>/package.json.\r\n   */\r\n  public get projectFolderMinDepth(): number {\r\n    return this._projectFolderMinDepth;\r\n  }\r\n\r\n  /**\r\n   * The maximum allowable folder depth for the projectFolder field in the rush.json file.\r\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\r\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\r\n   * which implements on a standard convention of <categoryFolder>/<projectFolder>/package.json.\r\n   */\r\n  public get projectFolderMaxDepth(): number {\r\n    return this._projectFolderMaxDepth;\r\n  }\r\n\r\n  /**\r\n   * The \"approvedPackagesPolicy\" settings.\r\n   */\r\n  public get approvedPackagesPolicy(): ApprovedPackagesPolicy {\r\n    return this._approvedPackagesPolicy;\r\n  }\r\n\r\n  /**\r\n   * [Part of the \"gitPolicy\" feature.]\r\n   * A list of regular expressions describing allowable email patterns for Git commits.\r\n   * They are case-insensitive anchored JavaScript RegExps.\r\n   * Example: `\".*@example\\.com\"`\r\n   * This array will never be undefined.\r\n   */\r\n  public get gitAllowedEmailRegExps(): string[] {\r\n    return this._gitAllowedEmailRegExps;\r\n  }\r\n\r\n  /**\r\n   * [Part of the \"gitPolicy\" feature.]\r\n   * An example valid email address that conforms to one of the allowedEmailRegExps.\r\n   * Example: `\"foxtrot@example\\.com\"`\r\n   * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.\r\n   */\r\n  public get gitSampleEmail(): string {\r\n    return this._gitSampleEmail;\r\n  }\r\n\r\n  /**\r\n   * [Part of the \"gitPolicy\" feature.]\r\n   * The commit message to use when committing changes during 'rush publish'\r\n   */\r\n  public get gitVersionBumpCommitMessage(): string | undefined {\r\n    return this._gitVersionBumpCommitMessage;\r\n  }\r\n\r\n  /**\r\n   * [Part of the \"hotfixChange\" feature.]\r\n   * Enables creating hotfix changes\r\n   */\r\n  public get hotfixChangeEnabled(): boolean {\r\n    return this._hotfixChangeEnabled;\r\n  }\r\n\r\n  /**\r\n   * The remote url of the repository. This helps \"rush change\" find the right remote to compare against.\r\n   */\r\n  public get repositoryUrl(): string {\r\n    return this._repositoryUrl;\r\n  }\r\n\r\n  /**\r\n    * Odd-numbered major versions of Node.js are experimental.  Even-numbered releases\r\n    * spend six months in a stabilization period before the first Long Term Support (LTS) version.\r\n    * For example, 8.9.0 was the first LTS version of Node.js 8.  Pre-LTS versions are not recommended\r\n    * for production usage because they frequently have bugs.  They may cause Rush itself\r\n    * to malfunction.\r\n    *\r\n    * Rush normally prints a warning if it detects a pre-LTS Node.js version.  If you are testing\r\n    * pre-LTS versions in preparation for supporting the first LTS version, you can use this setting\r\n    * to disable Rush's warning.\r\n   */\r\n  public get suppressNodeLtsWarning(): boolean {\r\n    return this._suppressNodeLtsWarning;\r\n  }\r\n\r\n  /**\r\n   * If true, then consistent version specifiers for dependencies will be enforced.\r\n   * I.e. \"rush check\" is run before some commands.\r\n   */\r\n  public get ensureConsistentVersions(): boolean {\r\n    return this._ensureConsistentVersions;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether telemetry collection is enabled for Rush runs.\r\n   * @beta\r\n   */\r\n  public get telemetryEnabled(): boolean {\r\n    return this._telemetryEnabled;\r\n  }\r\n\r\n  public get projects(): RushConfigurationProject[] {\r\n    return this._projects;\r\n  }\r\n\r\n  public get projectsByName(): Map<string, RushConfigurationProject> {\r\n    return this._projectsByName;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc PnpmOptionsConfiguration}\r\n   */\r\n  public get pnpmOptions(): PnpmOptionsConfiguration {\r\n    return this._pnpmOptions;\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc YarnOptionsConfiguration}\r\n   */\r\n  public get yarnOptions(): YarnOptionsConfiguration {\r\n    return this._yarnOptions;\r\n  }\r\n\r\n  /**\r\n   * Settings from the common-versions.json config file.\r\n   * @remarks\r\n   * If the common-versions.json file is missing, this property will not be undefined.\r\n   * Instead it will be initialized in an empty state, and calling CommonVersionsConfiguration.save()\r\n   * will create the file.\r\n   *\r\n   * @deprecated Use `getCommonVersions` instead, which gets the correct common version data\r\n   * for a given active variant.\r\n   */\r\n  public get commonVersions(): CommonVersionsConfiguration {\r\n    return this.getCommonVersions();\r\n  }\r\n\r\n  /**\r\n   * Gets the currently-installed variant, if an installation has occurred.\r\n   * For Rush operations which do not take a --variant parameter, this method\r\n   * determines which variant, if any, was last specified when performing \"rush install\"\r\n   * or \"rush update\".\r\n   */\r\n  public get currentInstalledVariant(): string | undefined {\r\n    let variant: string | undefined;\r\n\r\n    if (FileSystem.exists(this._currentVariantJsonFilename)) {\r\n      const currentVariantJson: ICurrentVariantJson = JsonFile.load(this._currentVariantJsonFilename);\r\n\r\n      variant = currentVariantJson.variant || undefined;\r\n    }\r\n\r\n    return variant;\r\n  }\r\n\r\n  /**\r\n   * The rush hooks. It allows customized scripts to run at the specified point.\r\n   * @beta\r\n   */\r\n  public get eventHooks(): EventHooks {\r\n    return this._eventHooks;\r\n  }\r\n\r\n  /**\r\n   * Gets the path to the common-versions.json config file for a specific variant.\r\n   * @param variant - The name of the current variant in use by the active command.\r\n   */\r\n  public getCommonVersionsFilePath(variant?: string | undefined): string {\r\n    const commonVersionsFilename: string = path.join(this.commonRushConfigFolder,\r\n      ...(variant ? [RushConstants.rushVariantsFolderName, variant] : []),\r\n      RushConstants.commonVersionsFilename);\r\n    return commonVersionsFilename;\r\n  }\r\n\r\n  /**\r\n   * Gets the settings from the common-versions.json config file for a specific variant.\r\n   * @param variant - The name of the current variant in use by the active command.\r\n   */\r\n  public getCommonVersions(variant?: string | undefined): CommonVersionsConfiguration {\r\n    const commonVersionsFilename: string = this.getCommonVersionsFilePath(variant);\r\n    return CommonVersionsConfiguration.loadFromFile(commonVersionsFilename);\r\n  }\r\n\r\n  /**\r\n   * Gets the committed shrinkwrap file name for a specific variant.\r\n   * @param variant - The name of the current variant in use by the active command.\r\n   */\r\n  public getCommittedShrinkwrapFilename(variant?: string | undefined): string {\r\n    if (variant) {\r\n      if (!this._variants[variant]) {\r\n        throw new Error(\r\n          `Invalid variant name '${variant}'. The provided variant parameter needs to be ` +\r\n          `one of the following from rush.json: ` +\r\n          `${Object.keys(this._variants).map((name: string) => `\"${name}\"`).join(', ')}.`);\r\n      }\r\n    }\r\n\r\n    const variantConfigFolderPath: string = this._getVariantConfigFolderPath(variant);\r\n\r\n    return path.join(variantConfigFolderPath, this._shrinkwrapFilename);\r\n  }\r\n\r\n  /**\r\n   * Gets the absolute path for \"pnpmfile.js\" for a specific variant.\r\n   * @param variant - The name of the current variant in use by the active command.\r\n   * @remarks\r\n   * The file path is returned even if PNPM is not configured as the package manager.\r\n   */\r\n  public getPnpmfilePath(variant?: string | undefined): string {\r\n    const variantConfigFolderPath: string = this._getVariantConfigFolderPath(variant);\r\n\r\n    return path.join(\r\n      variantConfigFolderPath,\r\n      RushConstants.pnpmfileFilename);\r\n  }\r\n\r\n  /**\r\n   * Looks up a project in the projectsByName map.  If the project is not found,\r\n   * then undefined is returned.\r\n   */\r\n  public getProjectByName(projectName: string): RushConfigurationProject | undefined {\r\n    return this._projectsByName.get(projectName);\r\n  }\r\n\r\n  /**\r\n   * This is used e.g. by command-line interfaces such as \"rush build --to example\".\r\n   * If \"example\" is not a project name, then it also looks for a scoped name\r\n   * like `@something/example`.  If exactly one project matches this heuristic, it\r\n   * is returned.  Otherwise, undefined is returned.\r\n   */\r\n  public findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject | undefined {\r\n    // Is there an exact match?\r\n    let result: RushConfigurationProject | undefined = this._projectsByName.get(shorthandProjectName);\r\n    if (result) {\r\n      return result;\r\n    }\r\n\r\n    // Is there an approximate match?\r\n    for (const project of this._projects) {\r\n      if (PackageName.getUnscopedName(project.packageName) === shorthandProjectName) {\r\n        if (result) {\r\n          // Ambiguous -- there is more than one match\r\n          return undefined;\r\n        } else {\r\n          result = project;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Looks up a project by its RushConfigurationProject.tempProjectName field.\r\n   * @returns The found project, or undefined if no match was found.\r\n   */\r\n  public findProjectByTempName(tempProjectName: string): RushConfigurationProject | undefined {\r\n    // Is there an approximate match?\r\n    for (const project of this._projects) {\r\n      if (project.tempProjectName === tempProjectName) {\r\n        return project;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @beta\r\n   */\r\n  public get versionPolicyConfiguration(): VersionPolicyConfiguration {\r\n    return this._versionPolicyConfiguration;\r\n  }\r\n\r\n  /**\r\n   * This configuration object contains settings repo maintainers have specified to enable\r\n   * and disable experimental Rush features.\r\n   *\r\n   * @beta\r\n   */\r\n  public get experimentsConfiguration(): ExperimentsConfiguration {\r\n    return this._experimentsConfiguration;\r\n  }\r\n\r\n  /**\r\n   * Returns the project for which the specified path is underneath that project's folder.\r\n   * If the path is not under any project's folder, returns undefined.\r\n   */\r\n  public tryGetProjectForPath(currentFolderPath: string): RushConfigurationProject | undefined {\r\n    const resolvedPath: string = path.resolve(currentFolderPath);\r\n    for (const project of this.projects) {\r\n      if (Path.isUnderOrEqual(resolvedPath, project.projectFolder)) {\r\n        return project;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()\r\n   * instead.\r\n   */\r\n  private constructor(rushConfigurationJson: IRushConfigurationJson, rushJsonFilename: string) {\r\n    EnvironmentConfiguration.initialize();\r\n\r\n    if (rushConfigurationJson.nodeSupportedVersionRange) {\r\n      if (!semver.validRange(rushConfigurationJson.nodeSupportedVersionRange)) {\r\n        throw new Error('Error parsing the node-semver expression in the \"nodeSupportedVersionRange\"'\r\n          + ` field from rush.json: \"${rushConfigurationJson.nodeSupportedVersionRange}\"`);\r\n      }\r\n      if (!semver.satisfies(process.version, rushConfigurationJson.nodeSupportedVersionRange)) {\r\n        const message: string = `Your dev environment is running Node.js version ${process.version} which does`\r\n          + ` not meet the requirements for building this repository.  (The rush.json configuration`\r\n          + ` requires nodeSupportedVersionRange=\"${rushConfigurationJson.nodeSupportedVersionRange}\")`;\r\n        if (EnvironmentConfiguration.allowUnsupportedNodeVersion) {\r\n          console.warn(message);\r\n        } else {\r\n          throw new Error(message);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._rushJsonFile = rushJsonFilename;\r\n    this._rushJsonFolder = path.dirname(rushJsonFilename);\r\n\r\n    this._commonFolder = path.resolve(path.join(this._rushJsonFolder, RushConstants.commonFolderName));\r\n\r\n    this._commonRushConfigFolder = path.join(this._commonFolder, 'config', 'rush');\r\n\r\n    this._commonTempFolder = EnvironmentConfiguration.rushTempFolderOverride ||\r\n      path.join(this._commonFolder, RushConstants.rushTempFolderName);\r\n\r\n    this._commonScriptsFolder = path.join(this._commonFolder, 'scripts');\r\n\r\n    this._npmCacheFolder = path.resolve(path.join(this._commonTempFolder, 'npm-cache'));\r\n    this._npmTmpFolder = path.resolve(path.join(this._commonTempFolder, 'npm-tmp'));\r\n    this._pnpmStoreFolder = path.resolve(path.join(this._commonTempFolder, 'pnpm-store'));\r\n    this._yarnCacheFolder = path.resolve(path.join(this._commonTempFolder, 'yarn-cache'));\r\n\r\n    this._changesFolder = path.join(this._commonFolder, RushConstants.changeFilesFolderName);\r\n\r\n    this._rushLinkJsonFilename = path.join(this._commonTempFolder, 'rush-link.json');\r\n    this._currentVariantJsonFilename = path.join(this._commonTempFolder, 'current-variant.json');\r\n\r\n    this._suppressNodeLtsWarning = !!rushConfigurationJson.suppressNodeLtsWarning;\r\n\r\n    this._ensureConsistentVersions = !!rushConfigurationJson.ensureConsistentVersions;\r\n\r\n    const experimentsConfigFile: string = path.join(\r\n      this._commonRushConfigFolder,\r\n      RushConstants.experimentsFilename\r\n    );\r\n    this._experimentsConfiguration = new ExperimentsConfiguration(experimentsConfigFile);\r\n\r\n    this._pnpmOptions = new PnpmOptionsConfiguration(rushConfigurationJson.pnpmOptions || {});\r\n    this._yarnOptions = new YarnOptionsConfiguration(rushConfigurationJson.yarnOptions || {});\r\n\r\n    // TODO: Add an actual \"packageManager\" field in rush.json\r\n    const packageManagerFields: string[] = [];\r\n\r\n    if (rushConfigurationJson.npmVersion) {\r\n      this._packageManager = 'npm';\r\n      packageManagerFields.push('npmVersion');\r\n    }\r\n    if (rushConfigurationJson.pnpmVersion) {\r\n      this._packageManager = 'pnpm';\r\n      packageManagerFields.push('pnpmVersion');\r\n    }\r\n    if (rushConfigurationJson.yarnVersion) {\r\n      this._packageManager = 'yarn';\r\n      packageManagerFields.push('yarnVersion');\r\n    }\r\n\r\n    if (packageManagerFields.length === 0) {\r\n      throw new Error(`The rush.json configuration must specify one of: npmVersion, pnpmVersion, or yarnVersion`);\r\n    }\r\n\r\n    if (packageManagerFields.length > 1) {\r\n      throw new Error(`The rush.json configuration cannot specify both ${packageManagerFields[0]}`\r\n        + ` and ${packageManagerFields[1]} `);\r\n    }\r\n\r\n    if (this._packageManager === 'npm') {\r\n      this._packageManagerToolVersion = rushConfigurationJson.npmVersion!;\r\n      this._packageManagerWrapper = new NpmPackageManager(this._packageManagerToolVersion);\r\n    } else if (this._packageManager === 'pnpm') {\r\n      this._packageManagerToolVersion = rushConfigurationJson.pnpmVersion!;\r\n      this._packageManagerWrapper = new PnpmPackageManager(this._packageManagerToolVersion);\r\n    } else {\r\n      this._packageManagerToolVersion = rushConfigurationJson.yarnVersion!;\r\n      this._packageManagerWrapper = new YarnPackageManager(this._packageManagerToolVersion);\r\n    }\r\n\r\n    this._shrinkwrapFilename = this._packageManagerWrapper.shrinkwrapFilename;\r\n\r\n    this._tempShrinkwrapFilename = path.join(\r\n        this._commonTempFolder, this._shrinkwrapFilename\r\n    );\r\n    this._packageManagerToolFilename = path.resolve(path.join(\r\n        this._commonTempFolder, `${this.packageManager}-local`, 'node_modules', '.bin', `${this.packageManager}`\r\n    ));\r\n\r\n    /// From \"C:\\repo\\common\\temp\\pnpm-lock.yaml\" --> \"C:\\repo\\common\\temp\\pnpm-lock-preinstall.yaml\"\r\n    const parsedPath: path.ParsedPath = path.parse(this._tempShrinkwrapFilename);\r\n    this._tempShrinkwrapPreinstallFilename = path.join(parsedPath.dir,\r\n      parsedPath.name + '-preinstall' + parsedPath.ext);\r\n\r\n    RushConfiguration._validateCommonRushConfigFolder(\r\n        this._commonRushConfigFolder,\r\n        this.packageManager,\r\n        this._shrinkwrapFilename\r\n    );\r\n\r\n    this._projectFolderMinDepth = rushConfigurationJson.projectFolderMinDepth !== undefined\r\n      ? rushConfigurationJson.projectFolderMinDepth : 1;\r\n    if (this._projectFolderMinDepth < 1) {\r\n      throw new Error('Invalid projectFolderMinDepth; the minimum possible value is 1');\r\n    }\r\n\r\n    this._projectFolderMaxDepth = rushConfigurationJson.projectFolderMaxDepth !== undefined\r\n      ? rushConfigurationJson.projectFolderMaxDepth : 2;\r\n    if (this._projectFolderMaxDepth < this._projectFolderMinDepth) {\r\n      throw new Error('The projectFolderMaxDepth cannot be smaller than the projectFolderMinDepth');\r\n    }\r\n\r\n    this._approvedPackagesPolicy = new ApprovedPackagesPolicy(this, rushConfigurationJson);\r\n\r\n    this._gitAllowedEmailRegExps = [];\r\n    this._gitSampleEmail = '';\r\n    if (rushConfigurationJson.gitPolicy) {\r\n      if (rushConfigurationJson.gitPolicy.sampleEmail) {\r\n        this._gitSampleEmail = rushConfigurationJson.gitPolicy.sampleEmail;\r\n      }\r\n\r\n      if (rushConfigurationJson.gitPolicy.allowedEmailRegExps) {\r\n        this._gitAllowedEmailRegExps = rushConfigurationJson.gitPolicy.allowedEmailRegExps;\r\n\r\n        if (this._gitSampleEmail.trim().length < 1) {\r\n          throw new Error('The rush.json file is missing the \"sampleEmail\" option, ' +\r\n            'which is required when using \"allowedEmailRegExps\"');\r\n        }\r\n      }\r\n\r\n      if (rushConfigurationJson.gitPolicy.versionBumpCommitMessage) {\r\n        this._gitVersionBumpCommitMessage = rushConfigurationJson.gitPolicy.versionBumpCommitMessage;\r\n      }\r\n    }\r\n\r\n    this._hotfixChangeEnabled = false;\r\n    if (rushConfigurationJson.hotfixChangeEnabled) {\r\n      this._hotfixChangeEnabled = rushConfigurationJson.hotfixChangeEnabled;\r\n    }\r\n\r\n    if (rushConfigurationJson.repository) {\r\n      this._repositoryUrl = rushConfigurationJson.repository.url;\r\n    }\r\n\r\n    this._telemetryEnabled = !!rushConfigurationJson.telemetryEnabled;\r\n    if (rushConfigurationJson.eventHooks) {\r\n      this._eventHooks = new EventHooks(rushConfigurationJson.eventHooks);\r\n    }\r\n\r\n    const versionPolicyConfigFile: string = path.join(\r\n      this._commonRushConfigFolder,\r\n      RushConstants.versionPoliciesFilename\r\n    );\r\n    this._versionPolicyConfiguration = new VersionPolicyConfiguration(versionPolicyConfigFile);\r\n\r\n    this._projects = [];\r\n    this._projectsByName = new Map<string, RushConfigurationProject>();\r\n\r\n    // We sort the projects array in alphabetical order.  This ensures that the packages\r\n    // are processed in a deterministic order by the various Rush algorithms.\r\n    const sortedProjectJsons: IRushConfigurationProjectJson[] = rushConfigurationJson.projects.slice(0);\r\n    sortedProjectJsons.sort(\r\n      (a: IRushConfigurationProjectJson, b: IRushConfigurationProjectJson) => a.packageName.localeCompare(b.packageName)\r\n    );\r\n\r\n    const tempNamesByProject: Map<IRushConfigurationProjectJson, string>\r\n      = RushConfiguration._generateTempNamesForProjects(sortedProjectJsons);\r\n\r\n    for (const projectJson of sortedProjectJsons) {\r\n      const tempProjectName: string | undefined = tempNamesByProject.get(projectJson);\r\n      if (tempProjectName) {\r\n        const project: RushConfigurationProject = new RushConfigurationProject(projectJson, this, tempProjectName);\r\n        this._projects.push(project);\r\n        if (this._projectsByName.get(project.packageName)) {\r\n          throw new Error(`The project name \"${project.packageName}\" was specified more than once`\r\n            + ` in the rush.json configuration file.`);\r\n        }\r\n        this._projectsByName.set(project.packageName, project);\r\n      }\r\n    }\r\n\r\n    for (const project of this._projects) {\r\n      project.cyclicDependencyProjects.forEach((cyclicDependencyProject: string) => {\r\n        if (!this.getProjectByName(cyclicDependencyProject)) {\r\n          throw new Error(`In rush.json, the \"${cyclicDependencyProject}\" project does not exist,`\r\n            + ` but was referenced by the cyclicDependencyProjects for ${project.packageName}`);\r\n        }\r\n      });\r\n\r\n      // Compute the downstream dependencies within the list of Rush projects.\r\n      this._populateDownstreamDependencies(project.packageJson.dependencies, project.packageName);\r\n      this._populateDownstreamDependencies(project.packageJson.devDependencies, project.packageName);\r\n      this._versionPolicyConfiguration.validate(this._projectsByName);\r\n    }\r\n\r\n    const variants: {\r\n      [variantName: string]: boolean;\r\n    } = {};\r\n\r\n    if (rushConfigurationJson.variants) {\r\n      for (const variantOptions of rushConfigurationJson.variants) {\r\n        const {\r\n          variantName\r\n        } = variantOptions;\r\n\r\n        if (variants[variantName]) {\r\n          throw new Error(`Duplicate variant named '${variantName}' specified in configuration.`);\r\n        }\r\n\r\n        variants[variantName] = true;\r\n      }\r\n    }\r\n\r\n    this._variants = variants;\r\n  }\r\n\r\n  private _populateDownstreamDependencies(\r\n    dependencies: { [key: string]: string } | undefined,\r\n    packageName: string): void {\r\n\r\n    if (!dependencies) {\r\n      return;\r\n    }\r\n    Object.keys(dependencies).forEach(dependencyName => {\r\n      const depProject: RushConfigurationProject | undefined = this._projectsByName.get(dependencyName);\r\n\r\n      if (depProject) {\r\n        depProject.downstreamDependencyProjects.push(packageName);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _getVariantConfigFolderPath(variant?: string | undefined): string {\r\n    if (variant) {\r\n      if (!this._variants[variant]) {\r\n        throw new Error(\r\n          `Invalid variant name '${variant}'. The provided variant parameter needs to be ` +\r\n          `one of the following from rush.json: ` +\r\n          `${Object.keys(this._variants).map((name: string) => `\"${name}\"`).join(', ')}.`);\r\n      }\r\n    }\r\n\r\n    return path.join(\r\n      this._commonRushConfigFolder,\r\n      ...(variant ? [RushConstants.rushVariantsFolderName, variant] : [])\r\n    );\r\n  }\r\n}\r\n"]}