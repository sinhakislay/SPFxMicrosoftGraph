{"version":3,"file":"LastInstallFlag.js","sourceRoot":"","sources":["../../src/api/LastInstallFlag.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,4BAA4B;AAC5B,oEAAoE;AAEvD,QAAA,2BAA2B,GAAW,mBAAmB,CAAC;AAEvE;;;;;;GAMG;AACH,MAAa,eAAe;IAI1B;;;;MAIE;IACF,YAAY,UAAkB,EAAE,QAAgB,EAAE;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,mCAA2B,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,CAAC,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,KAAK,CAAC;SACd;QACD,IAAI;YACF,MAAM,QAAQ,GAAW,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnD,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACzC;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACI,MAAM;QACX,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE;YACrC,kBAAkB,EAAE,IAAI;SACzB,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK;QACV,8BAAU,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AAnDD,0CAmDC","sourcesContent":["import * as path from 'path';\r\nimport * as _ from 'lodash';\r\nimport { FileSystem, JsonFile } from '@microsoft/node-core-library';\r\n\r\nexport const LAST_INSTALL_FLAG_FILE_NAME: string = 'last-install.flag';\r\n\r\n/**\r\n * A helper class for managing last-install flags, which are persistent and\r\n * indicate that something installed in the folder was sucessfully completed.\r\n * It also compares state, so that if something like the Node.js version has changed,\r\n * it can invalidate the last install.\r\n * @internal\r\n */\r\nexport class LastInstallFlag {\r\n  private _path: string;\r\n  private _state: Object;\r\n\r\n  /**\r\n   * Creates a new LastInstall flag\r\n   * @param folderPath - the folder that this flag is managing\r\n   * @param state - optional, the state that should be managed or compared\r\n  */\r\n  constructor(folderPath: string, state: Object = {}) {\r\n    this._path = path.join(folderPath, LAST_INSTALL_FLAG_FILE_NAME);\r\n    this._state = state;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the file exists and the contents match the current state\r\n   */\r\n  public isValid(): boolean {\r\n    if (!FileSystem.exists(this._path)) {\r\n      return false;\r\n    }\r\n    try {\r\n      const contents: Object = JsonFile.load(this._path);\r\n      return _.isEqual(contents, this._state);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes the flag file to disk with the current state\r\n   */\r\n  public create(): void {\r\n    JsonFile.save(this._state, this._path, {\r\n      ensureFolderExists: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the flag file\r\n   */\r\n  public clear(): void {\r\n    FileSystem.deleteFile(this._path);\r\n  }\r\n\r\n  /**\r\n   * Returns the full path to the flag file\r\n   */\r\n  public get path(): string {\r\n    return this._path;\r\n  }\r\n}"]}