{"version":3,"file":"CommonVersionsConfiguration.js","sourceRoot":"","sources":["../../src/api/CommonVersionsConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,oEAOsC;AACtC,4DAAyD;AAqCzD;;;;GAIG;AACH,MAAa,2BAA2B;IAgItC,YAAoB,kBAAmD,EAAE,QAAgB;QACvF,IAAI,CAAC,kBAAkB,GAAG,IAAI,kCAAc,CAC1C,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEtD,IAAI,CAAC,yBAAyB,GAAG,IAAI,kCAAc,CACjD,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEtD,IAAI,CAAC,2BAA2B,GAAG,IAAI,kCAAc,CACnD,EAAE,KAAK,EAAE,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAE/D,IAAI,kBAAkB,EAAE;YACtB,IAAI;gBACF,2BAA2B,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAClE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;gBACxC,2BAA2B,CAAC,iBAAiB,CAAC,IAAI,CAAC,wBAAwB,EACzE,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;gBAC/C,2BAA2B,CAAC,iBAAiB,CAAC,IAAI,CAAC,0BAA0B,EAC3E,kBAAkB,CAAC,0BAA0B,CAAC,CAAC;aAClD;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,kBAAkB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;aAC7E;SACF;QACD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IA7ID;;;OAGG;IACI,MAAM,CAAC,YAAY,CAAC,YAAoB;QAC7C,IAAI,kBAAkB,GAAoC,SAAS,CAAC;QAEpE,IAAI,8BAAU,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YACnC,kBAAkB,GAAG,4BAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,2BAA2B,CAAC,WAAW,CAAC,CAAC;SACtG;QAED,OAAO,IAAI,2BAA2B,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;IAC3E,CAAC;IAEO,MAAM,CAAC,iBAAiB,CAAS,GAAwB,EAAE,MAAsB;QACvF,IAAI,MAAM,EAAE;YACV,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE;gBACpD,MAAM,KAAK,GAAW,MAAM,CAAC,GAAG,CAAC,CAAC;gBAClC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACrB;SACF;IACH,CAAC;IAEO,MAAM,CAAC,eAAe,CAAS,GAAwB;QAC7D,MAAM,KAAK,GAAQ,EAAG,CAAC;QAEvB,MAAM,IAAI,GAAa,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC3B;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;OAEG;IACI,IAAI;QACT,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/E,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,IAAW,iBAAiB;QAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC;IAC/C,CAAC;IAED;;;;;;;OAOG;IACH,IAAW,wBAAwB;QACjC,OAAO,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC;IACtD,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAW,0BAA0B;QACnC,OAAO,IAAI,CAAC,2BAA2B,CAAC,aAAa,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,uBAAuB;QAC5B,MAAM,oBAAoB,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAC5E,iCAAa,CAAC,YAAY,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACzE,iCAAa,CAAC,YAAY,CAAC,oBAAoB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAChF,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IA2BO,uBAAuB,CAAC,MAAsC,EAAE,GAAW,EAAE,KAAa;QAChG,+BAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE1B,IAAI,MAAM,KAAK,IAAI,CAAC,kBAAkB,EAAE;YACtC,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC3C,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,+DAA+D;sBAC9F,oCAAoC,CAAC,CAAC;aAC3C;SACF;aAAM;YACL,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,sEAAsE;sBACrG,6BAA6B,CAAC,CAAC;aACpC;SACF;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,gCAAgC,CAAC,MAAsC,EAAE,GAAW,EAAE,KAAa;QACzG,+BAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,UAAU;QAChB,MAAM,MAAM,GAAwB;YAClC,OAAO,EAAE,+BAAc,CAAC,cAAc;SACvC,CAAC;QAEF,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE;YAChC,MAAM,CAAC,iBAAiB,GAAG,2BAA2B,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAChG;QAED,IAAI,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE;YACvC,MAAM,CAAC,wBAAwB,GAAG,2BAA2B,CAAC,eAAe,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;SAC9G;QAED,IAAI,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE;YACzC,MAAM,CAAC,0BAA0B,GAAG,2BAA2B,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;SAClH;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;AAtMc,uCAAW,GAAe,8BAAU,CAAC,QAAQ,CAC1D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wCAAwC,CAAC,CAAC,CAAC;AAFpE,kEAwMC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport {\r\n  JsonFile,\r\n  JsonSchema,\r\n  MapExtensions,\r\n  PackageName,\r\n  ProtectableMap,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\nimport { JsonSchemaUrls } from '../logic/JsonSchemaUrls';\r\n\r\n/**\r\n * Part of the ICommonVersionsJson structure.\r\n */\r\nexport declare interface ICommonVersionsJsonVersionMap {\r\n  /**\r\n   * The key is the name of a dependency.  The value is a Semantic Versioning (SemVer)\r\n   * range specifier.\r\n   */\r\n  [dependencyName: string]: string;\r\n}\r\n\r\n/**\r\n * Part of the ICommonVersionsJson structure.\r\n */\r\nexport declare interface ICommonVersionsJsonVersionsMap {\r\n  /**\r\n   * The key is the name of a dependency.  The value is a list of Semantic Versioning (SemVer)\r\n   * range specifiers.\r\n   */\r\n  [dependencyName: string]: string[];\r\n}\r\n\r\n/**\r\n * Describes the file structure for the \"common/config/rush/common-versions.json\" config file.\r\n */\r\ninterface ICommonVersionsJson {\r\n  $schema?: string;\r\n\r\n  preferredVersions?: ICommonVersionsJsonVersionMap;\r\n\r\n  xstitchPreferredVersions?: ICommonVersionsJsonVersionMap;\r\n\r\n  allowedAlternativeVersions?: ICommonVersionsJsonVersionsMap;\r\n}\r\n\r\n/**\r\n * Use this class to load and save the \"common/config/rush/common-versions.json\" config file.\r\n * This config file stores dependency version information that affects all projects in the repo.\r\n * @public\r\n */\r\nexport class CommonVersionsConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/common-versions.schema.json'));\r\n\r\n  private _filePath: string;\r\n  private _preferredVersions: ProtectableMap<string, string>;\r\n  private _xstitchPreferredVersions: ProtectableMap<string, string>;\r\n  private _allowedAlternativeVersions: ProtectableMap<string, string[]>;\r\n  private _modified: boolean;\r\n\r\n  /**\r\n   * Loads the common-versions.json data from the specified file path.\r\n   * If the file has not been created yet, then an empty object is returned.\r\n   */\r\n  public static loadFromFile(jsonFilename: string): CommonVersionsConfiguration {\r\n    let commonVersionsJson: ICommonVersionsJson | undefined = undefined;\r\n\r\n    if (FileSystem.exists(jsonFilename)) {\r\n      commonVersionsJson = JsonFile.loadAndValidate(jsonFilename, CommonVersionsConfiguration._jsonSchema);\r\n    }\r\n\r\n    return new CommonVersionsConfiguration(commonVersionsJson, jsonFilename);\r\n  }\r\n\r\n  private static _deserializeTable<TValue>(map: Map<string, TValue>, object: {} | undefined): void {\r\n    if (object) {\r\n      for (const key of Object.getOwnPropertyNames(object)) {\r\n        const value: TValue = object[key];\r\n        map.set(key, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  private static _serializeTable<TValue>(map: Map<string, TValue>): { } {\r\n    const table: { } = { };\r\n\r\n    const keys: string[] = [...map.keys()];\r\n    keys.sort();\r\n    for (const key of keys) {\r\n      table[key] = map.get(key);\r\n    }\r\n\r\n    return table;\r\n  }\r\n\r\n  /**\r\n   * Get the absolute file path of the common-versions.json file.\r\n   */\r\n  public get filePath(): string {\r\n    return this._filePath;\r\n  }\r\n\r\n  /**\r\n   * Writes the \"common-versions.json\" file to disk, using the filename that was passed to loadFromFile().\r\n   */\r\n  public save(): boolean {\r\n    if (this._modified) {\r\n      JsonFile.save(this._serialize(), this._filePath, { updateExistingFile: true });\r\n      this._modified = false;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * A table that specifies a \"preferred version\" for a dependency package.\r\n   *\r\n   * @remarks\r\n   * The \"preferred version\" is typically used to hold an indirect dependency back to a specific\r\n   * version, however generally it can be any SemVer range specifier (e.g. \"~1.2.3\"), and it\r\n   * will narrow any (compatible) SemVer range specifier.\r\n   *\r\n   * For example, suppose local project `A` depends on an external package `B`, and `B` asks\r\n   * for `C@^1.0.0`, which normally would select `C@1.5.0`.  If we specify `C@~1.2.3` as our preferred version,\r\n   * and it selects `C@1.2.9`, then that will be installed for B instead of `C@1.5.0`.  Whereas if the\r\n   * preferred version was `C@~2.0.0` then it would have no effect, because this is incompatible\r\n   * with `C@^1.0.0`.  A compatible parent dependency will take precedence over the preferred version;\r\n   * for example if `A` had a direct dependency on `C@1.2.2`, then `B` would get `C@1.2.2` regardless of the\r\n   * preferred version.\r\n   *\r\n   * Rush's implementation relies on the package manager's heuristic for avoiding duplicates by\r\n   * trying to reuse dependencies requested by a parent in the graph:  The preferred versions\r\n   * are simply injected into the fake common/temp/package.json file that acts as the root\r\n   * for all local projects in the Rush repo.\r\n   */\r\n  public get preferredVersions(): Map<string, string> {\r\n    return this._preferredVersions.protectedView;\r\n  }\r\n\r\n  /**\r\n   * A table of specifies preferred versions maintained by the XStitch tool.\r\n   *\r\n   * @remarks\r\n   * This property has the same behavior as the \"preferredVersions\" property, except these entries\r\n   * are automatically managed by the XStitch tool.  It is an error for the same dependency name\r\n   * to appear in both tables.\r\n   */\r\n  public get xstitchPreferredVersions(): Map<string, string> {\r\n    return this._xstitchPreferredVersions.protectedView;\r\n  }\r\n\r\n  /**\r\n   * A table that stores, for a given dependency, a list of SemVer ranges that will be accepted\r\n   * by \"rush check\" in addition to the normal version range.\r\n   *\r\n   * @remarks\r\n   * The \"rush check\" command can be used to enforce that every project in the repo\r\n   * must specify the same SemVer range for a given dependency.  However, sometimes\r\n   * exceptions are needed.  The allowedAlternativeVersions table allows you to list\r\n   * other SemVer ranges that will be accepted by \"rush check\" for a given dependency.\r\n   * Note that the normal version range (as inferred by looking at all projects in the repo)\r\n   * should NOT be included in this list.\r\n   */\r\n  public get allowedAlternativeVersions(): Map<string, ReadonlyArray<string>> {\r\n    return this._allowedAlternativeVersions.protectedView;\r\n  }\r\n\r\n  /**\r\n   * Returns the union of preferredVersions and xstitchPreferredVersions.\r\n   */\r\n  public getAllPreferredVersions(): Map<string, string> {\r\n    const allPreferredVersions: Map<string, string> = new Map<string, string>();\r\n    MapExtensions.mergeFromMap(allPreferredVersions, this.preferredVersions);\r\n    MapExtensions.mergeFromMap(allPreferredVersions, this.xstitchPreferredVersions);\r\n    return allPreferredVersions;\r\n  }\r\n\r\n  private constructor(commonVersionsJson: ICommonVersionsJson | undefined, filePath: string) {\r\n    this._preferredVersions = new ProtectableMap<string, string>(\r\n      { onSet: this._onSetPreferredVersions.bind(this) });\r\n\r\n    this._xstitchPreferredVersions = new ProtectableMap<string, string>(\r\n      { onSet: this._onSetPreferredVersions.bind(this) });\r\n\r\n    this._allowedAlternativeVersions = new ProtectableMap<string, string[]>(\r\n      { onSet: this._onSetAllowedAlternativeVersions.bind(this) });\r\n\r\n    if (commonVersionsJson) {\r\n      try {\r\n        CommonVersionsConfiguration._deserializeTable(this.preferredVersions,\r\n          commonVersionsJson.preferredVersions);\r\n        CommonVersionsConfiguration._deserializeTable(this.xstitchPreferredVersions,\r\n          commonVersionsJson.xstitchPreferredVersions);\r\n        CommonVersionsConfiguration._deserializeTable(this.allowedAlternativeVersions,\r\n          commonVersionsJson.allowedAlternativeVersions);\r\n      } catch (e) {\r\n        throw new Error(`Error loading \"${path.basename(filePath)}\": ${e.message}`);\r\n      }\r\n    }\r\n    this._filePath = filePath;\r\n  }\r\n\r\n  private _onSetPreferredVersions(source: ProtectableMap<string, string>, key: string, value: string): string {\r\n    PackageName.validate(key);\r\n\r\n    if (source === this._preferredVersions) {\r\n      if (this._xstitchPreferredVersions.has(key)) {\r\n        throw new Error(`The package \"${key}\" cannot be added to preferredVersions because it was already`\r\n          + ` added to xstitchPreferredVersions`);\r\n      }\r\n    } else {\r\n      if (this._preferredVersions.has(key)) {\r\n        throw new Error(`The package \"${key}\" cannot be added to xstitchPreferredVersions because it was already`\r\n          + ` added to preferredVersions`);\r\n      }\r\n    }\r\n\r\n    this._modified = true;\r\n\r\n    return value;\r\n  }\r\n\r\n  private _onSetAllowedAlternativeVersions(source: ProtectableMap<string, string>, key: string, value: string): string {\r\n    PackageName.validate(key);\r\n\r\n    this._modified = true;\r\n\r\n    return value;\r\n  }\r\n\r\n  private _serialize(): ICommonVersionsJson {\r\n    const result: ICommonVersionsJson = {\r\n      $schema: JsonSchemaUrls.commonVersions\r\n    };\r\n\r\n    if (this._preferredVersions.size) {\r\n      result.preferredVersions = CommonVersionsConfiguration._serializeTable(this.preferredVersions);\r\n    }\r\n\r\n    if (this._xstitchPreferredVersions.size) {\r\n      result.xstitchPreferredVersions = CommonVersionsConfiguration._serializeTable(this.xstitchPreferredVersions);\r\n    }\r\n\r\n    if (this._allowedAlternativeVersions.size) {\r\n      result.allowedAlternativeVersions = CommonVersionsConfiguration._serializeTable(this.allowedAlternativeVersions);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n"]}