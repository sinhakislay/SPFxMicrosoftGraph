/**
 * Part of the ICommonVersionsJson structure.
 */
export declare interface ICommonVersionsJsonVersionMap {
    /**
     * The key is the name of a dependency.  The value is a Semantic Versioning (SemVer)
     * range specifier.
     */
    [dependencyName: string]: string;
}
/**
 * Part of the ICommonVersionsJson structure.
 */
export declare interface ICommonVersionsJsonVersionsMap {
    /**
     * The key is the name of a dependency.  The value is a list of Semantic Versioning (SemVer)
     * range specifiers.
     */
    [dependencyName: string]: string[];
}
/**
 * Use this class to load and save the "common/config/rush/common-versions.json" config file.
 * This config file stores dependency version information that affects all projects in the repo.
 * @public
 */
export declare class CommonVersionsConfiguration {
    private static _jsonSchema;
    private _filePath;
    private _preferredVersions;
    private _xstitchPreferredVersions;
    private _allowedAlternativeVersions;
    private _modified;
    /**
     * Loads the common-versions.json data from the specified file path.
     * If the file has not been created yet, then an empty object is returned.
     */
    static loadFromFile(jsonFilename: string): CommonVersionsConfiguration;
    private static _deserializeTable;
    private static _serializeTable;
    /**
     * Get the absolute file path of the common-versions.json file.
     */
    readonly filePath: string;
    /**
     * Writes the "common-versions.json" file to disk, using the filename that was passed to loadFromFile().
     */
    save(): boolean;
    /**
     * A table that specifies a "preferred version" for a dependency package.
     *
     * @remarks
     * The "preferred version" is typically used to hold an indirect dependency back to a specific
     * version, however generally it can be any SemVer range specifier (e.g. "~1.2.3"), and it
     * will narrow any (compatible) SemVer range specifier.
     *
     * For example, suppose local project `A` depends on an external package `B`, and `B` asks
     * for `C@^1.0.0`, which normally would select `C@1.5.0`.  If we specify `C@~1.2.3` as our preferred version,
     * and it selects `C@1.2.9`, then that will be installed for B instead of `C@1.5.0`.  Whereas if the
     * preferred version was `C@~2.0.0` then it would have no effect, because this is incompatible
     * with `C@^1.0.0`.  A compatible parent dependency will take precedence over the preferred version;
     * for example if `A` had a direct dependency on `C@1.2.2`, then `B` would get `C@1.2.2` regardless of the
     * preferred version.
     *
     * Rush's implementation relies on the package manager's heuristic for avoiding duplicates by
     * trying to reuse dependencies requested by a parent in the graph:  The preferred versions
     * are simply injected into the fake common/temp/package.json file that acts as the root
     * for all local projects in the Rush repo.
     */
    readonly preferredVersions: Map<string, string>;
    /**
     * A table of specifies preferred versions maintained by the XStitch tool.
     *
     * @remarks
     * This property has the same behavior as the "preferredVersions" property, except these entries
     * are automatically managed by the XStitch tool.  It is an error for the same dependency name
     * to appear in both tables.
     */
    readonly xstitchPreferredVersions: Map<string, string>;
    /**
     * A table that stores, for a given dependency, a list of SemVer ranges that will be accepted
     * by "rush check" in addition to the normal version range.
     *
     * @remarks
     * The "rush check" command can be used to enforce that every project in the repo
     * must specify the same SemVer range for a given dependency.  However, sometimes
     * exceptions are needed.  The allowedAlternativeVersions table allows you to list
     * other SemVer ranges that will be accepted by "rush check" for a given dependency.
     * Note that the normal version range (as inferred by looking at all projects in the repo)
     * should NOT be included in this list.
     */
    readonly allowedAlternativeVersions: Map<string, ReadonlyArray<string>>;
    /**
     * Returns the union of preferredVersions and xstitchPreferredVersions.
     */
    getAllPreferredVersions(): Map<string, string>;
    private constructor();
    private _onSetPreferredVersions;
    private _onSetAllowedAlternativeVersions;
    private _serialize;
}
//# sourceMappingURL=CommonVersionsConfiguration.d.ts.map