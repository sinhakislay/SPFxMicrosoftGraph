"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const JsonSchemaUrls_1 = require("../logic/JsonSchemaUrls");
/**
 * Use this class to load and save the "common/config/rush/common-versions.json" config file.
 * This config file stores dependency version information that affects all projects in the repo.
 * @public
 */
class CommonVersionsConfiguration {
    constructor(commonVersionsJson, filePath) {
        this._preferredVersions = new node_core_library_1.ProtectableMap({ onSet: this._onSetPreferredVersions.bind(this) });
        this._xstitchPreferredVersions = new node_core_library_1.ProtectableMap({ onSet: this._onSetPreferredVersions.bind(this) });
        this._allowedAlternativeVersions = new node_core_library_1.ProtectableMap({ onSet: this._onSetAllowedAlternativeVersions.bind(this) });
        if (commonVersionsJson) {
            try {
                CommonVersionsConfiguration._deserializeTable(this.preferredVersions, commonVersionsJson.preferredVersions);
                CommonVersionsConfiguration._deserializeTable(this.xstitchPreferredVersions, commonVersionsJson.xstitchPreferredVersions);
                CommonVersionsConfiguration._deserializeTable(this.allowedAlternativeVersions, commonVersionsJson.allowedAlternativeVersions);
            }
            catch (e) {
                throw new Error(`Error loading "${path.basename(filePath)}": ${e.message}`);
            }
        }
        this._filePath = filePath;
    }
    /**
     * Loads the common-versions.json data from the specified file path.
     * If the file has not been created yet, then an empty object is returned.
     */
    static loadFromFile(jsonFilename) {
        let commonVersionsJson = undefined;
        if (node_core_library_1.FileSystem.exists(jsonFilename)) {
            commonVersionsJson = node_core_library_1.JsonFile.loadAndValidate(jsonFilename, CommonVersionsConfiguration._jsonSchema);
        }
        return new CommonVersionsConfiguration(commonVersionsJson, jsonFilename);
    }
    static _deserializeTable(map, object) {
        if (object) {
            for (const key of Object.getOwnPropertyNames(object)) {
                const value = object[key];
                map.set(key, value);
            }
        }
    }
    static _serializeTable(map) {
        const table = {};
        const keys = [...map.keys()];
        keys.sort();
        for (const key of keys) {
            table[key] = map.get(key);
        }
        return table;
    }
    /**
     * Get the absolute file path of the common-versions.json file.
     */
    get filePath() {
        return this._filePath;
    }
    /**
     * Writes the "common-versions.json" file to disk, using the filename that was passed to loadFromFile().
     */
    save() {
        if (this._modified) {
            node_core_library_1.JsonFile.save(this._serialize(), this._filePath, { updateExistingFile: true });
            this._modified = false;
            return true;
        }
        return false;
    }
    /**
     * A table that specifies a "preferred version" for a dependency package.
     *
     * @remarks
     * The "preferred version" is typically used to hold an indirect dependency back to a specific
     * version, however generally it can be any SemVer range specifier (e.g. "~1.2.3"), and it
     * will narrow any (compatible) SemVer range specifier.
     *
     * For example, suppose local project `A` depends on an external package `B`, and `B` asks
     * for `C@^1.0.0`, which normally would select `C@1.5.0`.  If we specify `C@~1.2.3` as our preferred version,
     * and it selects `C@1.2.9`, then that will be installed for B instead of `C@1.5.0`.  Whereas if the
     * preferred version was `C@~2.0.0` then it would have no effect, because this is incompatible
     * with `C@^1.0.0`.  A compatible parent dependency will take precedence over the preferred version;
     * for example if `A` had a direct dependency on `C@1.2.2`, then `B` would get `C@1.2.2` regardless of the
     * preferred version.
     *
     * Rush's implementation relies on the package manager's heuristic for avoiding duplicates by
     * trying to reuse dependencies requested by a parent in the graph:  The preferred versions
     * are simply injected into the fake common/temp/package.json file that acts as the root
     * for all local projects in the Rush repo.
     */
    get preferredVersions() {
        return this._preferredVersions.protectedView;
    }
    /**
     * A table of specifies preferred versions maintained by the XStitch tool.
     *
     * @remarks
     * This property has the same behavior as the "preferredVersions" property, except these entries
     * are automatically managed by the XStitch tool.  It is an error for the same dependency name
     * to appear in both tables.
     */
    get xstitchPreferredVersions() {
        return this._xstitchPreferredVersions.protectedView;
    }
    /**
     * A table that stores, for a given dependency, a list of SemVer ranges that will be accepted
     * by "rush check" in addition to the normal version range.
     *
     * @remarks
     * The "rush check" command can be used to enforce that every project in the repo
     * must specify the same SemVer range for a given dependency.  However, sometimes
     * exceptions are needed.  The allowedAlternativeVersions table allows you to list
     * other SemVer ranges that will be accepted by "rush check" for a given dependency.
     * Note that the normal version range (as inferred by looking at all projects in the repo)
     * should NOT be included in this list.
     */
    get allowedAlternativeVersions() {
        return this._allowedAlternativeVersions.protectedView;
    }
    /**
     * Returns the union of preferredVersions and xstitchPreferredVersions.
     */
    getAllPreferredVersions() {
        const allPreferredVersions = new Map();
        node_core_library_1.MapExtensions.mergeFromMap(allPreferredVersions, this.preferredVersions);
        node_core_library_1.MapExtensions.mergeFromMap(allPreferredVersions, this.xstitchPreferredVersions);
        return allPreferredVersions;
    }
    _onSetPreferredVersions(source, key, value) {
        node_core_library_1.PackageName.validate(key);
        if (source === this._preferredVersions) {
            if (this._xstitchPreferredVersions.has(key)) {
                throw new Error(`The package "${key}" cannot be added to preferredVersions because it was already`
                    + ` added to xstitchPreferredVersions`);
            }
        }
        else {
            if (this._preferredVersions.has(key)) {
                throw new Error(`The package "${key}" cannot be added to xstitchPreferredVersions because it was already`
                    + ` added to preferredVersions`);
            }
        }
        this._modified = true;
        return value;
    }
    _onSetAllowedAlternativeVersions(source, key, value) {
        node_core_library_1.PackageName.validate(key);
        this._modified = true;
        return value;
    }
    _serialize() {
        const result = {
            $schema: JsonSchemaUrls_1.JsonSchemaUrls.commonVersions
        };
        if (this._preferredVersions.size) {
            result.preferredVersions = CommonVersionsConfiguration._serializeTable(this.preferredVersions);
        }
        if (this._xstitchPreferredVersions.size) {
            result.xstitchPreferredVersions = CommonVersionsConfiguration._serializeTable(this.xstitchPreferredVersions);
        }
        if (this._allowedAlternativeVersions.size) {
            result.allowedAlternativeVersions = CommonVersionsConfiguration._serializeTable(this.allowedAlternativeVersions);
        }
        return result;
    }
}
CommonVersionsConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, '../schemas/common-versions.schema.json'));
exports.CommonVersionsConfiguration = CommonVersionsConfiguration;
//# sourceMappingURL=CommonVersionsConfiguration.js.map