{"version":3,"file":"VersionPolicyConfiguration.js","sourceRoot":"","sources":["../../src/api/VersionPolicyConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { JsonFile, JsonSchema, FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { VersionPolicy, BumpType, LockStepVersionPolicy } from './VersionPolicy';\r\nimport { RushConfigurationProject } from './RushConfigurationProject';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IVersionPolicyJson {\r\n  policyName: string;\r\n  definitionName: string;\r\n  dependencies?: IVersionPolicyDependencyJson;\r\n  exemptFromRushChange?: boolean;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface ILockStepVersionJson extends IVersionPolicyJson {\r\n  version: string;\r\n  nextBump: string;\r\n  mainProject?: string;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IIndividualVersionJson extends IVersionPolicyJson {\r\n  lockedMajor?: number;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport enum VersionFormatForPublish {\r\n  original = 'original',\r\n  exact = 'exact'\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport enum VersionFormatForCommit {\r\n  wildcard = 'wildcard',\r\n  original = 'original'\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface IVersionPolicyDependencyJson {\r\n  versionFormatForPublish?: VersionFormatForPublish;\r\n  versionFormatForCommit?: VersionFormatForCommit;\r\n}\r\n\r\n/**\r\n * Use this class to load and save the \"common/config/rush/version-policies.json\" config file.\r\n * This config file configures how different groups of projects will be published by Rush,\r\n * and how their version numbers will be determined.\r\n * @beta\r\n */\r\nexport class VersionPolicyConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, '../schemas/version-policies.schema.json'));\r\n\r\n  private _versionPolicies: Map<string, VersionPolicy>;\r\n  private _jsonFileName: string;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public constructor(jsonFileName: string) {\r\n    this._jsonFileName = jsonFileName;\r\n    this._versionPolicies = new Map<string, VersionPolicy>();\r\n    this._loadFile();\r\n  }\r\n\r\n  /**\r\n   * Validate the version policy configuration against the rush config\r\n   */\r\n  public validate(projectsByName: Map<string, RushConfigurationProject>): void {\r\n    if (!this.versionPolicies) {\r\n      return;\r\n    }\r\n    this.versionPolicies.forEach((policy) => {\r\n      const lockStepPolicy: LockStepVersionPolicy = policy as LockStepVersionPolicy;\r\n      if (lockStepPolicy.mainProject && !projectsByName.get(lockStepPolicy.mainProject)) {\r\n        throw new Error(`Version policy \\\"${policy.policyName}\\\" has a non-existing mainProject:` +\r\n          ` ${lockStepPolicy.mainProject}.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the version policy by its name.\r\n   * Throws error if the version policy is not found.\r\n   * @param policyName - Name of the version policy\r\n   */\r\n  public getVersionPolicy(policyName: string): VersionPolicy {\r\n    const policy: VersionPolicy | undefined = this._versionPolicies.get(policyName);\r\n    if (!policy) {\r\n      throw new Error(`Failed to find version policy by name \\'${policyName}\\'`);\r\n    }\r\n    return policy;\r\n  }\r\n\r\n  /**\r\n   * Gets all the version policies\r\n   */\r\n  public get versionPolicies(): Map<string, VersionPolicy> {\r\n    return this._versionPolicies;\r\n  }\r\n\r\n  /**\r\n   * Bumps up versions for the specified version policy or all version policies\r\n   *\r\n   * @param versionPolicyName - version policy name\r\n   * @param bumpType - bump type to override what policy has defined.\r\n   * @param identifier - prerelease identifier to override what policy has defined.\r\n   * @param shouldCommit - should save to disk\r\n   */\r\n  public bump(versionPolicyName?: string,\r\n    bumpType?: BumpType,\r\n    identifier?: string,\r\n    shouldCommit?: boolean\r\n  ): void {\r\n    if (versionPolicyName) {\r\n      const policy: VersionPolicy | undefined = this.versionPolicies.get(versionPolicyName);\r\n      if (policy) {\r\n        policy.bump(bumpType, identifier);\r\n      }\r\n    } else {\r\n      this.versionPolicies.forEach((versionPolicy) => {\r\n        if (versionPolicy) {\r\n          versionPolicy.bump(bumpType, identifier);\r\n        }\r\n      });\r\n    }\r\n    this._saveFile(!!shouldCommit);\r\n  }\r\n\r\n  /**\r\n   * Updates the version directly for the specified version policy\r\n   * @param versionPolicyName - version policy name\r\n   * @param newVersion - new version\r\n   */\r\n  public update(versionPolicyName: string,\r\n    newVersion: string\r\n  ): void {\r\n    const policy: VersionPolicy | undefined = this.versionPolicies.get(versionPolicyName);\r\n    if (!policy || !policy.isLockstepped) {\r\n      throw new Error(`Lockstep Version policy with name \"${versionPolicyName}\" cannot be found`);\r\n    }\r\n    const lockStepVersionPolicy: LockStepVersionPolicy = policy as LockStepVersionPolicy;\r\n    if (lockStepVersionPolicy.update(newVersion)) {\r\n      this._saveFile(true);\r\n    }\r\n  }\r\n\r\n  private _loadFile(): void {\r\n    if (!FileSystem.exists(this._jsonFileName)) {\r\n      return;\r\n    }\r\n    const versionPolicyJson: IVersionPolicyJson[] = JsonFile.loadAndValidate(this._jsonFileName,\r\n      VersionPolicyConfiguration._jsonSchema);\r\n\r\n    versionPolicyJson.forEach(policyJson => {\r\n      const policy: VersionPolicy | undefined = VersionPolicy.load(policyJson);\r\n      if (policy) {\r\n        this._versionPolicies.set(policy.policyName, policy);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _saveFile(shouldCommit: boolean): void {\r\n    const versionPolicyJson: IVersionPolicyJson[] = [];\r\n    this.versionPolicies.forEach((versionPolicy) => {\r\n      versionPolicyJson.push(versionPolicy._json);\r\n    });\r\n    if (shouldCommit) {\r\n      JsonFile.save(versionPolicyJson, this._jsonFileName, { updateExistingFile: true });\r\n    }\r\n  }\r\n}\r\n"]}