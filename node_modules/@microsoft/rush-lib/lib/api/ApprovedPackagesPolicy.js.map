{"version":3,"file":"ApprovedPackagesPolicy.js","sourceRoot":"","sources":["../../src/api/ApprovedPackagesPolicy.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAE7B,mFAAgF;AAChF,0DAAuD;AAGvD;;;;GAIG;AACH,MAAa,sBAAsB;IAOjC,gBAAgB;IAChB,YAAmB,iBAAoC,EAAE,qBAA6C;QACpG,MAAM,sBAAsB,GAAgC,qBAAqB,CAAC,sBAAsB,IAAI,EAAE,CAAC;QAE/G,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,qBAAqB,CAAC,sBAAsB,CAAC;QAC/D,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAS,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAClF,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,CAAS,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAElF,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAC/B,MAAM,IAAI,KAAK,CAAC,qFAAqF;sBACjG,0BAA0B,CAAC,CAAC;aACjC;SACF;QAED,sCAAsC;QACtC,MAAM,2BAA2B,GAAW,IAAI,CAAC,IAAI,CACnD,iBAAiB,CAAC,sBAAsB,EACxC,6BAAa,CAAC,+BAA+B,CAC9C,CAAC;QACF,IAAI,CAAC,wBAAwB,GAAG,IAAI,6DAA6B,CAAC,2BAA2B,CAAC,CAAC;QAC/F,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE7D,yCAAyC;QACzC,MAAM,8BAA8B,GAAW,IAAI,CAAC,IAAI,CACtD,iBAAiB,CAAC,sBAAsB,EACxC,6BAAa,CAAC,kCAAkC,CACjD,CAAC;QACF,IAAI,CAAC,2BAA2B,GAAG,IAAI,6DAA6B,CAAC,8BAA8B,CAAC,CAAC;QACrG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,IAAW,uBAAuB;QAChC,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,IAAW,0BAA0B;QACnC,OAAO,IAAI,CAAC,2BAA2B,CAAC;IAC1C,CAAC;CACF;AA/FD,wDA+FC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport { ApprovedPackagesConfiguration } from './ApprovedPackagesConfiguration';\r\nimport { RushConstants } from '../logic/RushConstants';\r\nimport { RushConfiguration, IRushConfigurationJson, IApprovedPackagesPolicyJson } from './RushConfiguration';\r\n\r\n/**\r\n * This is a helper object for RushConfiguration.\r\n * It exposes the \"approvedPackagesPolicy\" feature from rush.json.\r\n * @public\r\n */\r\nexport class ApprovedPackagesPolicy {\r\n  private _enabled: boolean;\r\n  private _ignoredNpmScopes: Set<string>;\r\n  private _reviewCategories: Set<string>;\r\n  private _browserApprovedPackages: ApprovedPackagesConfiguration;\r\n  private _nonbrowserApprovedPackages: ApprovedPackagesConfiguration;\r\n\r\n  /** @internal */\r\n  public constructor(rushConfiguration: RushConfiguration, rushConfigurationJson: IRushConfigurationJson) {\r\n    const approvedPackagesPolicy: IApprovedPackagesPolicyJson = rushConfigurationJson.approvedPackagesPolicy || {};\r\n\r\n    this._enabled = !!rushConfigurationJson.approvedPackagesPolicy;\r\n    this._ignoredNpmScopes = new Set<string>(approvedPackagesPolicy.ignoredNpmScopes);\r\n    this._reviewCategories = new Set<string>(approvedPackagesPolicy.reviewCategories);\r\n\r\n    if (this._enabled) {\r\n      if (!this.reviewCategories.size) {\r\n        throw new Error(`The \"approvedPackagesPolicy\" feature is enabled rush.json, but the reviewCategories`\r\n          + ` list is not configured.`);\r\n      }\r\n    }\r\n\r\n    // Load browser-approved-packages.json\r\n    const browserApprovedPackagesPath: string = path.join(\r\n      rushConfiguration.commonRushConfigFolder,\r\n      RushConstants.browserApprovedPackagesFilename\r\n    );\r\n    this._browserApprovedPackages = new ApprovedPackagesConfiguration(browserApprovedPackagesPath);\r\n    this._browserApprovedPackages.tryLoadFromFile(this._enabled);\r\n\r\n    // Load nonbrowser-approved-packages.json\r\n    const nonbrowserApprovedPackagesPath: string = path.join(\r\n      rushConfiguration.commonRushConfigFolder,\r\n      RushConstants.nonbrowserApprovedPackagesFilename\r\n    );\r\n    this._nonbrowserApprovedPackages = new ApprovedPackagesConfiguration(nonbrowserApprovedPackagesPath);\r\n    this._nonbrowserApprovedPackages.tryLoadFromFile(this._enabled);\r\n  }\r\n\r\n  /**\r\n   * Whether the feature is enabled.  The feature is enabled if the \"approvedPackagesPolicy\"\r\n   * field is assigned in rush.json.\r\n   */\r\n  public get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * A list of NPM package scopes that will be excluded from review (e.g. `@types`)\r\n   */\r\n  public get ignoredNpmScopes(): Set<string> {\r\n    return this._ignoredNpmScopes;\r\n  }\r\n\r\n  /**\r\n   * A list of category names that are valid for usage as the RushConfigurationProject.reviewCategory field.\r\n   * This array will never be undefined.\r\n   */\r\n  public get reviewCategories(): Set<string> {\r\n    return this._reviewCategories;\r\n  }\r\n\r\n  /**\r\n   * Packages approved for usage in a web browser.  This is the stricter of the two types, so by default\r\n   * all new packages are added to this file.\r\n   *\r\n   * @remarks\r\n   *\r\n   * This is part of an optional approval workflow, whose purpose is to review any new dependencies\r\n   * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).\r\n   * When Rush discovers a new dependency has been added to package.json, it will update the file.\r\n   * The intent is that the file will be stored in Git and tracked by a branch policy that notifies\r\n   * reviewers when a PR attempts to modify the file.\r\n   *\r\n   * Example filename: `C:\\MyRepo\\common\\config\\rush\\browser-approved-packages.json`\r\n   */\r\n  public get browserApprovedPackages(): ApprovedPackagesConfiguration {\r\n    return this._browserApprovedPackages;\r\n  }\r\n\r\n  /**\r\n   * Packages approved for usage everywhere *except* in a web browser.\r\n   *\r\n   * @remarks\r\n   *\r\n   * This is part of an optional approval workflow, whose purpose is to review any new dependencies\r\n   * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).\r\n   * The intent is that the file will be stored in Git and tracked by a branch policy that notifies\r\n   * reviewers when a PR attempts to modify the file.\r\n   *\r\n   * Example filename: `C:\\MyRepo\\common\\config\\rush\\browser-approved-packages.json`\r\n   */\r\n  public get nonbrowserApprovedPackages(): ApprovedPackagesConfiguration {\r\n    return this._nonbrowserApprovedPackages;\r\n  }\r\n}\r\n"]}