"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const _ = require("lodash");
const node_core_library_1 = require("@microsoft/node-core-library");
exports.LAST_INSTALL_FLAG_FILE_NAME = 'last-install.flag';
/**
 * A helper class for managing last-install flags, which are persistent and
 * indicate that something installed in the folder was sucessfully completed.
 * It also compares state, so that if something like the Node.js version has changed,
 * it can invalidate the last install.
 * @internal
 */
class LastInstallFlag {
    /**
     * Creates a new LastInstall flag
     * @param folderPath - the folder that this flag is managing
     * @param state - optional, the state that should be managed or compared
    */
    constructor(folderPath, state = {}) {
        this._path = path.join(folderPath, exports.LAST_INSTALL_FLAG_FILE_NAME);
        this._state = state;
    }
    /**
     * Returns true if the file exists and the contents match the current state
     */
    isValid() {
        if (!node_core_library_1.FileSystem.exists(this._path)) {
            return false;
        }
        try {
            const contents = node_core_library_1.JsonFile.load(this._path);
            return _.isEqual(contents, this._state);
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Writes the flag file to disk with the current state
     */
    create() {
        node_core_library_1.JsonFile.save(this._state, this._path, {
            ensureFolderExists: true
        });
    }
    /**
     * Removes the flag file
     */
    clear() {
        node_core_library_1.FileSystem.deleteFile(this._path);
    }
    /**
     * Returns the full path to the flag file
     */
    get path() {
        return this._path;
    }
}
exports.LastInstallFlag = LastInstallFlag;
//# sourceMappingURL=LastInstallFlag.js.map