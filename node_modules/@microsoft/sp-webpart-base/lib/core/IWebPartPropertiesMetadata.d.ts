/**
 * This structure is used to define metadata for web part properties as a map of string to `IWebPartPropertyMetadata`
 *
 * @remarks
 * The key should be a JSON path to the property in web part properties. The JSON path supports the following operators:
 *
 * - Dot `.` for selecting object members, for example `person.name`
 *
 * - Brackets `[]` for selecting array items, for example `person.photoURLs[0]`
 *
 * - Bracketed asterisk `[*]` for array elements wildcard, for example `person.websites[*]`.
 *
 * You can make combinations of these operators, for example `person.websites[*].url`
 *
 * Important Note: Only one wildcard per path is supported.
 *
 * Example: Let's assume we have a web part with properties that have the following schema:
 * ```
 * {
 *   title: string;
 *   person: {
 *     name: string;
 *     bio: string;
 *     photoURLs: string[];
 *     websites: { title: string; url: string; }[]
 *   }
 * }
 * ```
 *
 * We can define the metadata for the desired properties as following:
 * ```
 * {
 *  'person.bio': { isRichContent: true },
 *  'person.photoURLs[*]': { isImageSource: true },
 *  'person.websites[*].url': { isLink: true }
 * }
 * ```
 *
 * This will make SharePoint servers aware of the content of your properties and run services such as search indexing,
 * link fix-up, etc on the data. In case any of the values needs to update by these services, e.g link fix-up, the
 * web part property bag is automatically updated.
 *
 * @public
 */
interface IWebPartPropertiesMetadata {
    [key: string]: IWebPartPropertyMetadata;
}
/**
 * This is the structure used for map values in `IWebPartPropertiesMetadata`
 *
 * @public
 */
export interface IWebPartPropertyMetadata {
    /**
     * Indicates whether the property should be serialized as HTML.
     *
     * @remarks
     * This flag instructs framework to store the value as HTML, so that SharePoint can perform the following
     * services on it:
     *
     * - normalizing HTML encodings
     *
     * - stripping unsafe HTML tags (i.e. for usage with Element.innerHTML)
     *
     * - search indexing
     *
     * - SharePoint link fix-up
     *
     * Only enable this flag for HTML content where these modifications are acceptable. If non-HTML content is
     * provided, SharePoint framework might make modifications to convert it to HTML valid. For plain text content
     * that simply needs to be exposed to the search index (without any rewriting), use the `isSearchablePlainText`
     * flag instead.
     */
    isHtmlString?: boolean;
    /**
     * Indicates if the property contains plain text that should be search-indexed by SharePoint.
     *
     * @remarks
     * This flag instructs the framework to store the property in a representation that supports search indexing.
     * The content will be treated as plain text; SharePoint will not modify the string in any way, and
     * special HTML characters may be stored encoded and appear in search results. If your string contains
     * HTML markup, use the isHtmlString setting instead.
     *
     * Security note: For security reasons, never assign a plain text string to `Element.innerHTML`.
     */
    isSearchablePlainText?: boolean;
    /**
     * Indicates if the property contains a link. This allows SharePoint server to treat the value as such and
     * perform services like search indexing, link fix-up, loading from CDN, etc.
     */
    isLink?: boolean;
    /**
     * Indicates if the property contains a link. This allows SharePoint server to treat the value as such and
     * perform services like link fix-up, search indexing, loading from CDN, etc.
     */
    isImageSource?: boolean;
    /**
     * Indicates if the framework should persist the property on the server.
     *
     * @remarks
     * Use this for properties that are only important in run-time, and do not need to persist on the server.
     * This can reduce the size of the serialized data of the web part and optimize the web part load time.
     * The property value will be removed from the serialized data sent to the server, but this has no effect on
     * the run-time property bag. The property value will still be available in the `onBeforeSerialize()` method,
     * and the value will not be cleared from the run-time property bag. The initial render of your web part should
     * not depend on the value of the property. Setting a default value for the property can be done in `onInit()` method.
     *
     * Note that if the property path refers to a property that has a complex object as the value, the whole object
     * will be removed from the persisted data.
     */
    shouldNotPersist?: boolean;
    /**
     * Indicates that property value is components id, required to be loaded before web part can render or initialize.
     *
     * @remarks
     * The web part should use this property to declare dynamic runtime component dependencies, which are required only
     * for specific states of the property. The framework will ensure that this component is preloaded for the web part.
     *
     * For example, the user can select one of the multiple layouts available for a web part during edit mode.
     * This will optimize the web part bundle to avoid embedding code for all layout code; instead, the framework will
     * load the required layout selectively at runtime.
     *
     * @alpha
     */
    isComponentDependency?: boolean;
    /**
     * If specified, indicates that the property is a dynamic property and the type of
     * the dynamic property.
     *
     * @remarks
     * If a web part has properties that are dynamically
     * configurable, then use this flag to declare the property as a dynamic property by
     * specifying its type. When a property specifies its dynamic property type, then
     * the framework ensures that its value can be accessed using 'tryGetValue' anytime
     * in the life cycle of the web part.  If a property is marked as DynamicProperty in
     * the IWebPartProperties interface, but does not appear in the IWebPartPropertiesMetadata
     * with a dynamicPropertyType, then the web part developer will need to manually create
     * the DynamicProperty themselves and assign it to the property.
     *
     * A web part can configure a default value for the property by specifying it in the
     * properties section of the web part's manifest. This value will be used when a
     * dynamic property is constructed for the property.
     *
     * Note: Web parts should be able to type cast the resultant value from the `tryGetValue`
     * to suit their needs.
     *
     * @public
     */
    dynamicPropertyType?: 'boolean' | 'number' | 'string' | 'array' | 'object';
    /**
     * Additional custom metadata associated with the original metadata.
     *
     * @remarks
     * This can be used to supply additional related metadata information.
     * For example, image metadata along with a URL could be provided.
     *
     * @privateRemarks
     * We should find a way to associate type to this object before this API becomes available to 3rd
     * parties. (SPPPLAT VSO bug#504028) tracks that fix. For now, we are not doing that because that will require a
     * bigger public API change to exiting APIs. We do not want to change existing public APIs before we make this
     * feature available to third parties.
     * key is Name of the custom property name and value is path of the property.
     * e.g. 'width': 'managerPhotoWidth'
     *
     * @alpha
     */
    customMetadata?: {
        [key: string]: string;
    };
}
export default IWebPartPropertiesMetadata;
//# sourceMappingURL=IWebPartPropertiesMetadata.d.ts.map