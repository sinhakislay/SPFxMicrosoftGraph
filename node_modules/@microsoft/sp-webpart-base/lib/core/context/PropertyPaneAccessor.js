/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file class to help access web part property pane APIs.
 */
'use strict';
import * as tslib_1 from "tslib";
import { sealed } from '@microsoft/decorators';
/**
 * Web part context property pane accessor. Provides some most commonly used utilities
 * to access the property pane.
 *
 * @public
 */
var PropertyPaneAccessor = /** @class */ (function () {
    function PropertyPaneAccessor(openProperytPane, closePropertyPane, refresh, openDetails, // tslint:disable-line:no-any
    isRenderedByWebPart, isPropertyPaneOpen) {
        this._open = openProperytPane;
        this._close = closePropertyPane;
        this._refresh = refresh;
        this._openDetails = openDetails;
        this._isRenderedByWebPart = isRenderedByWebPart;
        this._isPropertyPaneOpen = isPropertyPaneOpen;
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this.refresh = this.refresh.bind(this);
        this.openDetails = this.openDetails.bind(this);
        this.isRenderedByWebPart = this.isRenderedByWebPart.bind(this);
    }
    /**
     * Api to open the PropertyPane.
     */
    PropertyPaneAccessor.prototype.open = function () {
        this._open();
    };
    /**
     * Api to close the PropertyPane.
     */
    PropertyPaneAccessor.prototype.close = function () {
        this._close();
    };
    /**
     * Api to refresh the contents of the PropertyPane.
     * It's a no operation scenario if a web part is asking to refresh the property pane
     * while some other web part is being configured.
     */
    PropertyPaneAccessor.prototype.refresh = function () {
        this._refresh();
    };
    /**
     * Api to open the Details PropertyPane
     *
     * @param context - pass additional details as context to send back to the caller
     */
    PropertyPaneAccessor.prototype.openDetails = function (context) {
        this._openDetails(context);
    };
    /**
     * Returns true if the current property pane source is a web part and not the Canvas or any other source.
     */
    PropertyPaneAccessor.prototype.isRenderedByWebPart = function () {
        return this._isRenderedByWebPart();
    };
    /**
     * Returns true if the PropertyPane is open.
     */
    PropertyPaneAccessor.prototype.isPropertyPaneOpen = function () {
        return this._isPropertyPaneOpen();
    };
    PropertyPaneAccessor = tslib_1.__decorate([
        sealed
    ], PropertyPaneAccessor);
    return PropertyPaneAccessor;
}());
export default PropertyPaneAccessor;
//# sourceMappingURL=PropertyPaneAccessor.js.map