import { DisplayMode } from '@microsoft/sp-core-library';
import IWebPartData from './IWebPartData';
import { PropertyPaneAction, PropertyPaneLifeCycleEvent } from '@microsoft/sp-property-pane';
/**
 * Event data that is sent via a 'window.postMessage()' function call for the purposes
 * of executing lifecycle methods between the SpWebPartApplication and the IframedWebPartController.
 * @internal
 */
export default interface IIframedWebPartMessage {
    /**
     * The WebPart instanceId that is associated with the WebPartData.
     */
    instanceId: string;
    /**
     * The action that this data corresponds to.
     */
    action: IframedWebPartAction;
    /**
     * The height of the content within the iframe.
     */
    height?: number;
    /**
     * Optional IWebPartData, not all actions require web part data.
     */
    webPartData?: IWebPartData;
    /**
     * The display mode of the WebPart.
     */
    displayMode?: DisplayMode;
    /**
     * An action requested on the PropertyPane.
     */
    propertyPaneAction?: PropertyPaneAction;
    /**
     * The lifecycle event of the PropertyPane.
     */
    propertyPaneLifeCycleEvent?: PropertyPaneLifeCycleEvent;
}
/**
 * Strings for the 'action' property on IIframedWebPartMessage.
 * @internal
 */
export declare const enum IframedWebPartAction {
    /**
     * An action to delete the web part.
     */
    DeleteWebPart = "iframeDeleteWebPart",
    /**
     * An action to request the current DisplayMode of a WebPart.
     */
    RequestDisplayMode = "iframeRequestDisplayMode",
    /**
     * An action requested on the PropertyPane.
     */
    RequestPropertyPaneAction = "iframeRequestPropertyPaneAction",
    /**
     * An action to set the DisplayMode of an iframed WebPart.
     */
    SetDisplayMode = "iframeSetDisplayMode",
    /**
     * An action to set the dimensions of the iframe to match it's embed contents.
     * Example dimensions: height and/or width.
     */
    SetDimensions = "iframeSetDimensions",
    /**
     * An action from the IframedWebPartController to the window that
     * is showing the WebPart or PropertyPane.
     */
    SetWebPartData = "iframeSetWebPartData",
    /**
     * An action to update the WebPart with the data changed by the PropertyPane.
     */
    UpdateWebPartData = "iframeUpdateWebPartData",
    /**
     * An action to update the PropertyPane with the data changed by the rendered WebPart.
     */
    UpdatePropertyPaneData = "iframeUpdatePropertyPaneData",
    /**
     * The action corresponds to a PropertyPane lifecycle event.
     */
    UpdatePropertyPaneLifeCycle = "iframePropertyPaneLifeCycle",
    /**
     * Action to indicate that the web part is rendered in the iframe application
     * where the property pane is to be rendered.
     */
    WebPartRenderedInPropertyPaneIframe = "webPartRenderedInPropertyPaneIframe"
}
//# sourceMappingURL=IIframedWebPartMessage.d.ts.map