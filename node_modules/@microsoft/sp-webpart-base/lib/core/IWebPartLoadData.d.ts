/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 * @file Interface that defines the shape of extra data to be uploaded for web part load metrics
 * @internal
 */
export declare const enum CacheMissReason {
    /**
     * Cache was available but config requested has changed.
     */
    CacheConfigMissmatch = "CacheConfigMissmatch",
    /**
     * Cache did not arrvie by the time web part requested it.
     */
    LateFlush = "LateFlush",
    /**
     * Cache is available but there is no cache entry for the web part.
     */
    CachedItemNotFound = "CachedItemNotFound",
    /**
     * Cache is available, config is also good but is too stale for use.
     */
    CacheExpired = "CacheExpired",
    /**
     * Cache miss happened but reason is not specified.
     */
    NotSpecified = "NotSpecified",
    /**
     * Not Applicable if there was cache hit.
     */
    NotApplicable = "N/A"
}
export default interface IWebPartLoadData {
    alias: string;
    isInternal: boolean | undefined;
    manifestId: string;
    /**
     * Time taken to load javascript module for web part since loadWebPart().
     */
    moduleLoadTime?: number;
    /**
     * Time taken to initialize web part after module is loaded and web part ready for viewport loading.
     */
    initTime?: number;
    /**
     * Time taken by web part to render post initialization. This is mostly time taken during render().
     * It might also include getDataComplete if webpart overrides _internalGetData()
     */
    renderTime?: number;
    /**
     * Indicator for if the webpart end up displaying a spinny.
     * This would indicate if the webpart at any point in the life cycle, ended up showing a spinny.
     */
    isSpinnyShown?: boolean;
    /**
     * Scneario ID indicates context in which webpart has been loaded.
     */
    scenarioId?: string;
    /**
     * is MultiGeo will be used to track, if the tenant is a multi geto tenant
     */
    isMultiGeo?: boolean;
    /**
     * Time spent by web part waitinng in the Viewport loader queue.
     */
    viewportWait?: number;
    /**
     * Whether Web part my site cache was hit or miss. N/A in case not applicable
     */
    mySiteCacheHit?: 'true' | 'false' | 'N/A';
    /**
     * The layout of the webpart. N/A is not applicable (NewsWebPart has layouts such as FilmStrip, Carousel etx)
     */
    layout?: string;
    /**
     * The data provider of the webpart. N/A is not applicable (NewsWebPart has dataProviders like MyNews, ViewCounts etx)
     */
    dataProvider?: string;
    /**
     * Potential reason why a cache miss has happened.
     * Ignore this property when mySiteCacheHit is true.
     */
    cacheMissReason?: CacheMissReason;
    /**
     * True if it was full page load, false otherwise.
     */
    isFullPage?: boolean;
    /**
     * Display name of the current tenant.
     */
    tenantName?: string;
    /**
     * Whether web part was rendered within viewport or loading was delayed outside viewport.
     */
    insideViewport?: boolean;
}
//# sourceMappingURL=IWebPartLoadData.d.ts.map