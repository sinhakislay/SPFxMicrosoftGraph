/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file web part manager context.
 */
import { DisplayMode, ServiceScope } from '@microsoft/sp-core-library';
import { IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';
import IWebPartHost from '../components/host/IWebPartHost';
import IWebPartData from './IWebPartData';
import { WebPartFormFactor } from './WebPartFormFactor';
/**
 * These info would be logged as EngagementLog extraData when the web part is rendering.
 * @internal
 */
export interface IWebpartLoadExtraLogInfo {
    /**
     * Indicates the general type of environment where the SharePoint Framework is running.
     */
    environmentType?: string;
    /**
     * Site Collection type.
     */
    siteType?: string;
    /**
     * Page Host Layout Type. ex: AppPageHostPageLayout, Teams...
     * Note: Adding string type because, canvas sends in a string and
     * not sure what that string would be.
     */
    pageLayoutType?: PageHostLayoutType | string;
    /**
     * Column Type:
     * 0 means Full-bleed column;
     * 4 means One-Third column;
     * 6 means Two columns;
     * 8 means Two-Third column;
     * 12 means One column;
     */
    columnType?: string;
    /**
     * Display mode of the hosted page.
     */
    displayMode?: string;
    /**
     * Name of the container which the web part was hosted.
     */
    webPartContainer?: string;
}
/**
 * Context object that needs to be passed to the web part manager to load a web part.
 *
 * @internal
 */
interface IWebPartManagerContext {
    /**
     * Reference to the DOM element that contains the web part.
     */
    domElement: HTMLElement;
    /**
     * Optional reference to the scrollable element that is common parent of all the web parts.
     */
    scrollableParent?: HTMLElement;
    /**
     * Web part instance id
     */
    instanceId: string;
    /**
     * Web part manifest
     */
    manifest: IClientSideWebPartManifest<any>;
    /**
     * The display mode as one of DisplayMode.Read or DisplayMode.Edit
     */
    displayMode: DisplayMode;
    /**
     * These info would be logged as EngagementLog extraData when the web part is rendering.
     */
    webpartLoadExtraLogInfo: IWebpartLoadExtraLogInfo;
    /**
     * Web psart instance data. This data should be used to render a web part.
     */
    webPartData?: IWebPartData;
    /**
     * Host containing the web part. This host can be any container that implements the IWebPartHost interface. Some
     * examples of hosts are the Canvas, a single page application that contains a web part, and classic SharePoint
     * pages.
     */
    host?: IWebPartHost;
    /**
     * Flag indicating whether the web part is rendered from the persisted data or not. If the web part is added
     * from toolbox, the value of this flag will be false.
     */
    addedFromPersistedData?: boolean;
    /**
     * Callback API when all the web parts are rendered, only supported in modern pages
     */
    onAllWebPartsRendered?: (endTime: number) => void;
    /**
     * Callback API when all web parts in the viewport are rendered
     * Usage: When web part not in viewport, loading is delayed.
     */
    onViewportWebPartsRendered?: (endTime: number) => void;
    /**
     * Total number of web parts in store that will be asked to Web Part manager instance for loading
     */
    totalWebparts?: number;
    /**
     * An optional scope to override the host scope passed to the web part. The host scope is still used by the manager,
     * and this scope will only be passed to the web part.
     */
    serviceScope?: ServiceScope;
    /**
     * Type of the web part.
     */
    formFactor?: WebPartFormFactor;
    /**
     * Reserved Height of the Webpart
     */
    reservedHeight?: number;
}
/**
 * Type of layout on which the web part is being rendered.
 * @internal
 */
export declare const enum PageHostLayoutType {
    /**
     * AppPage host page layout
     */
    AppPageHostPageLayout = "AppPageHostPageLayout",
    /**
     * Single web part AppPage layout
     */
    SingleWebPartAppPageLayout = "SingleWebPartAppPageLayout",
    /**
     * System AppPage host page layout
     */
    SystemAppPageHostPageLayout = "SystemAppPageHostPageLayout",
    /**
     * Hosted in Outlook
     */
    Outlook = "Outlook",
    /**
     * Hosted in Teams
     */
    Teams = "Teams",
    /**
     * Hosted in Isolated Domain
     */
    Isolated = "Isolated",
    /**
     * No layout
     * Note: This should be removed when we remove spWebPartApplication.
     */
    None = "None"
}
export default IWebPartManagerContext;
//# sourceMappingURL=IWebPartManagerContext.d.ts.map