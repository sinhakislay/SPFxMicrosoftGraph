import { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';
import { _IComponentContextParameters } from '@microsoft/sp-component-base';
import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
import { PropertyPaneAction } from '@microsoft/sp-property-pane';
import IWebPartHost from '../components/host/IWebPartHost';
import { WebPartFormFactor } from './WebPartFormFactor';
/**
 * Constructor parameters for BaseWebPartContext.
 * This base interface represents the parameters for the UI-agnostic BaseWebPart.
 *
 * @internal
 */
export default interface IBaseWebPartContextParameters extends _IComponentContextParameters {
    /**
     * Manifest for the client-side web part.
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    /**
     * Web part instance id. This is a globally unique value.
     */
    readonly instanceId: string;
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /**
     * Is the property pane rendered by a web part and not by Canvas or any other source.
     */
    readonly isPropertyPaneRenderedByWebPart: () => boolean;
    /**
     * Indicates whether the PropertyPane is open or not.
     */
    readonly isPropertyPaneOpen: () => boolean;
    /**
     * Form factor of the web part.
     */
    readonly formFactor: WebPartFormFactor;
    /**
     * Web part host.
     *
     * @alpha
     */
    readonly host: IWebPartHost;
    /**
     * Web part data updated event.
     *
     * @eventproperty
     * @internal
     */
    readonly _dataUpdatedEvent: SPEvent<SPEventArgs>;
    /**
     * Request property pane to perform the given action.
     *
     * @privateRemarks
     * This is not currently exposed via IWebPartContext.
     */
    readonly requestPropertyPaneAction: (id: string, propertyPaneAction?: PropertyPaneAction, renderedByWebPart?: boolean, context?: any) => void;
}
//# sourceMappingURL=IBaseWebPartContextParameters.d.ts.map