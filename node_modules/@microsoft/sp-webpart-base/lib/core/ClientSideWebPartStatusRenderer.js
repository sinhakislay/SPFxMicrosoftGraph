/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
'use strict';
import * as tslib_1 from "tslib";
import { _ShimmerFactory } from '@microsoft/sp-component-base';
import { sealed } from '@microsoft/decorators';
import { _LogSource, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import { Environment, SPError, Text, Validate } from '@microsoft/sp-core-library';
import strings from './loc/Strings.resx';
import ErrorMessage from './ErrorMessage';
import FriendlyErrorMessage from './FriendlyErrorMessage';
import ClassicPageUtils from './classicPages/ClassicPageUtils';
import SpinnerFactory from './SpinnerFactory';
import { Flights } from './../common/Flights';
/**
 * This class provides the default implementation for displaying loading indicator and error messages
 * for web parts. The web part host can decide to provide custom implementation of how web parts display
 * loading indicators and error messages.
 *
 * @internal
 */
var ClientSideWebPartStatusRenderer = /** @class */ (function () {
    function ClientSideWebPartStatusRenderer() {
        this._errorId = 'cswp-error';
        this._logSource = _LogSource.create('ClientSideWebPartStatusRenderer');
        this._activeIndicatorCache = new Map();
    }
    ClientSideWebPartStatusRenderer_1 = ClientSideWebPartStatusRenderer;
    /**
     * Returns additional time out before showing the spinner
     *
     * loadingDelayed - Time when asked Viewport loader to check and load web part post module load.
     * inViewportLoaded - Time when web part was allowed to load by viewport loader.
     *
     * 1. If both loadingDelayed and inViewportLoaded are defined return the ViewportWait,
     *    difference between them would reflect total time in the waiting queue
     *    (i.e, inViewportLoaded - loadingDelayed).
     * 2. If only loadingDelayed is defined (i.e, the rendering of the webpart is still in the queue)
     *    return a timeout of 500ms.
     * 3. If both loadingDelayed and inViewportLoaded are undefined return 0 (i.e, let the things be as they are).
     *
     * @param webPartTag - event identifier used in written telemetry data for first party web
     * parts, e.g., 'WebPart.NewsWebPart.8dd9dec2-c6b3-4d4a-819e-2a5431e901f2'.
     */
    ClientSideWebPartStatusRenderer._getAdditionalTimeOut = function (webPartTag) {
        var loadingDelayed = _PerformanceLogger.readComponentBreakdown(webPartTag, 'loadingDelayed');
        var inViewportLoaded = _PerformanceLogger.readComponentBreakdown(webPartTag, 'inViewPortLoading');
        var timeout = 0;
        if (loadingDelayed && inViewportLoaded) {
            timeout = inViewportLoaded - loadingDelayed;
        }
        else if (loadingDelayed) {
            timeout = 500;
        }
        else {
            timeout = 0;
        }
        return timeout;
    };
    /**
      * Display a loading spinner.
      *
      * @param domElement - the web part container div.
      * @param loadingMessage - the message to be displayed when the loading spinner id displayed.
      * @param timeout - (optional) timeout to render the loading indicator. Default is 1500ms.
      *
      * @privateRemarks
      * First-party web parts should use _displayLoadingIndicator to log perf data.
      */
    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, timeout);
    };
    /**
     * Display a loading indicator.
     *
     * @param domElement - the web part container div.
     * @param loadingMessage - the message to be displayed when the loading indicator id displayed.
     * @param performanceLogEventName - event identifier used in written telemetry data for first party web
     * parts, e.g., 'WebPart.NewsWebPart.8dd9dec2-c6b3-4d4a-819e-2a5431e901f2'.
     * @param isInternal - flag to indicate if web part is internal or external.
     * @param timeout - (optional) timeout to render the loading indicator. Default is 1500ms.
     *
     * @internal
     */
    ClientSideWebPartStatusRenderer.prototype._displayLoadingIndicator = function (domElement, loadingMessage, performanceLogEventName, reservedHeight, isInternal, timeout) {
        this._createLoadingIndicator(domElement, loadingMessage, reservedHeight, timeout, performanceLogEventName, isInternal);
    };
    /**
     * Clear the loading indicator.
     *
     * @param domElement - the web part container div.
     */
    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (this._activeIndicatorCache.has(domElement)) {
            var cacheEntry = this._getCacheEntry(domElement);
            _TraceLogger.logVerbose(this._logSource, strings.ClearLoadingIndicator);
            if (cacheEntry.loadingTimer) {
                window.clearTimeout(cacheEntry.loadingTimer);
            }
            if (cacheEntry.placeholder) {
                // This is needed because some web parts (e.g. Yammer web part) render within the onInit() phase
                if (cacheEntry.placeholder.parentElement) {
                    cacheEntry.placeholder.parentElement.removeChild(cacheEntry.placeholder);
                }
            }
            this._activeIndicatorCache.delete(domElement);
        }
    };
    /**
     * Render the provided error message in the web part container div.
     * @param domElement - the web part container div.
     * @param error - the error message.
     */
    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        Validate.isNotNullOrUndefined(error, 'error');
        var errorText = '';
        if (error instanceof SPError) {
            errorText = error.toStringForUI();
        }
        else {
            var vanillaError = error;
            var stack = vanillaError.stack;
            var newLineSeparator = '\r\n';
            var callStack = stack ? Text.format(strings.WebpartErrorCallStackText, newLineSeparator, stack) : '';
            errorText = Text.format(strings.WebpartErrorErrorText, newLineSeparator, "" + (vanillaError.message || error), callStack);
        }
        var cacheEntry = this._getCacheEntry(domElement);
        cacheEntry.isErrorBeingRendered = true;
        var errorComponent;
        if (!DEBUG) {
            errorComponent = new FriendlyErrorMessage({ errorMessage: errorText }).render();
        }
        else {
            errorComponent = new ErrorMessage({ errorMessage: errorText }).render();
        }
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'block';
        }
        else {
            divErr = document.createElement('div');
            divErr.setAttribute('data-sp-id', this._errorId);
            this._clearChildren(domElement);
            domElement.appendChild(divErr);
            ClassicPageUtils.disableAutomaticPostbacks(domElement, Environment.type);
        }
        // clearError removes the data-automation-id
        divErr.setAttribute('data-automation-id', 'webPartError');
        divErr.innerHTML = '';
        divErr.appendChild(errorComponent);
    };
    /**
     * Clear the web part error message.
     * @param domElement - the web part container div.
     */
    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._activeIndicatorCache.get(domElement);
        if (cacheEntry && cacheEntry.isErrorBeingRendered) {
            cacheEntry.isErrorBeingRendered = false;
            var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
            if (divErr) {
                divErr.style.display = 'none';
                divErr.removeAttribute('data-automation-id');
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._createLoadingIndicator = function (domElement, loadingMessage, reservedHeight, timeout, performanceLogEventName, isInternal) {
        var _this = this;
        Validate.isNotNullOrUndefined(domElement, 'domElement');
        if (!timeout || (timeout && isNaN(timeout))) {
            timeout = 1500; // milliseconds
        }
        // In most cases, we do not want to display the loading indicator immediately. We want to delay the
        // display of loading indicator to the point when the user will start noticing the slowness in the UI.
        var cacheEntry = this._getCacheEntry(domElement);
        // Clear if any earlier loading timer
        if (cacheEntry.loadingTimer) {
            window.clearTimeout(cacheEntry.loadingTimer);
        }
        if (!Flights.isLoadIndicatorOnDemandEnabled()) {
            // Start loading indicator without displaying. This placeholder will help InViewportLoader to approximate
            // how many web part to load at start
            this._renderLoadingIndicator(domElement, loadingMessage, reservedHeight, false, performanceLogEventName);
        }
        cacheEntry.loadingTimer = window.setTimeout(function () {
            if (performanceLogEventName && isInternal) {
                var additionalTimeOut = ClientSideWebPartStatusRenderer_1._getAdditionalTimeOut(performanceLogEventName);
                cacheEntry.loadingTimer = window.setTimeout(function () {
                    _this._showLoadingIndicator(domElement, loadingMessage, reservedHeight, performanceLogEventName, isInternal);
                }, additionalTimeOut);
            }
            else {
                _this._showLoadingIndicator(domElement, loadingMessage, reservedHeight, performanceLogEventName, isInternal);
            }
        }, timeout);
    };
    /**
     * Show the loading indicator
     *
     * @param domElement - the web part container div.
     * @param loadingMessage - the message to be displayed when the loading Indicator id displayed.
     * @param performanceLogEventName - event identifier used in written telemetry data for first party web
     * parts, e.g., 'WebPart.NewsWebPart.8dd9dec2-c6b3-4d4a-819e-2a5431e901f2'.
     */
    ClientSideWebPartStatusRenderer.prototype._showLoadingIndicator = function (domElement, loadingMessage, reservedHeight, performanceLogEventName, isInternal) {
        if (performanceLogEventName && isInternal) {
            _PerformanceLogger.markComponent(performanceLogEventName, 'displaySpinner');
        }
        // This would set style of the loading Indicator and display it.
        this._renderLoadingIndicator(domElement, loadingMessage, reservedHeight, true, // remove this while graduating Flights.isLoadIndicatorOnDemandEnabled()
        performanceLogEventName);
    };
    ClientSideWebPartStatusRenderer.prototype._renderLoadingIndicator = function (domElement, loadingMessage, reservedHeight, showLoadingIndicator, // remove this while graduating Flights.isLoadIndicatorOnDemandEnabled()
    performanceLogEventName) {
        if (!this._activeIndicatorCache.has(domElement)) {
            return;
        }
        var cacheEntry = this._getCacheEntry(domElement);
        // Error is being rendered, don't render loading indicator
        if (cacheEntry.isErrorBeingRendered) {
            return;
        }
        _TraceLogger.logVerbose(this._logSource, strings.DisplayLoadingIndicator);
        if (Flights.isLoadIndicatorOnDemandEnabled() ||
            !cacheEntry.placeholder) {
            cacheEntry.placeholder = this._createLoadingIndicatorElement(domElement, showLoadingIndicator, // remove this while graduating Flights.isLoadIndicatorOnDemandEnabled()
            loadingMessage, reservedHeight, performanceLogEventName);
        }
        else {
            if (!Flights.isLoadIndicatorOnDemandEnabled()) {
                cacheEntry.placeholder.style.display = showLoadingIndicator
                    ? 'block'
                    : 'none';
            }
        }
    };
    ClientSideWebPartStatusRenderer.prototype._getCacheEntry = function (domElement) {
        if (this._activeIndicatorCache.has(domElement)) {
            return this._activeIndicatorCache.get(domElement);
        }
        var cacheEntry = {
            loadingTimer: undefined,
            placeholder: undefined,
            isErrorBeingRendered: false
        };
        this._activeIndicatorCache.set(domElement, cacheEntry);
        return cacheEntry;
    };
    ClientSideWebPartStatusRenderer.prototype._createLoadingIndicatorElement = function (domElement, showLoadingIndicator, // remove this while graduating Flights.isLoadIndicatorOnDemandEnabled()
    loadingMessage, reservedHeight, performanceLogEventName) {
        this._clearChildren(domElement);
        var titleMessage = Text.format(strings.LoadingStatus, loadingMessage);
        var loadingIndicatorContainerDiv = performanceLogEventName
            ? _ShimmerFactory.createShimmer(domElement.clientWidth, reservedHeight, performanceLogEventName, titleMessage)
            : this._createSpinnerElement(titleMessage, reservedHeight);
        // while graduating Flights.isLoadIndicatorOnDemandEnabled() just set
        // loadingIndicatorContainerDiv.style.display = 'block'
        loadingIndicatorContainerDiv.style.display =
            Flights.isLoadIndicatorOnDemandEnabled() || showLoadingIndicator
                ? 'block'
                : 'none';
        return domElement.appendChild(loadingIndicatorContainerDiv);
    };
    ClientSideWebPartStatusRenderer.prototype._createSpinnerElement = function (titleMessage, reservedHeight) {
        var spinnerElement = SpinnerFactory.createSpinner(titleMessage);
        if (reservedHeight !== undefined) {
            var parentElement = document.createElement('div');
            parentElement.style.maxHeight = reservedHeight + "px";
            parentElement.appendChild(spinnerElement);
            spinnerElement = parentElement;
        }
        return spinnerElement;
    };
    ClientSideWebPartStatusRenderer.prototype._clearChildren = function (element) {
        // We need to ensure that there are no child nodes. This works for all browsers.
        while (element.hasChildNodes()) {
            if (element.lastChild) {
                element.removeChild(element.lastChild);
            }
        }
    };
    var ClientSideWebPartStatusRenderer_1;
    ClientSideWebPartStatusRenderer = ClientSideWebPartStatusRenderer_1 = tslib_1.__decorate([
        sealed
    ], ClientSideWebPartStatusRenderer);
    return ClientSideWebPartStatusRenderer;
}());
export default ClientSideWebPartStatusRenderer;
//# sourceMappingURL=ClientSideWebPartStatusRenderer.js.map