import { PageContext } from '@microsoft/sp-page-context';
import { DisplayMode } from '@microsoft/sp-core-library';
import { PropertyPaneAction } from '@microsoft/sp-property-pane';
import IWebPartData from '../../core/IWebPartData';
import IWebPartHost from '../../components/host/IWebPartHost';
import IWebPartManagerContext from '../../core/IWebPartManagerContext';
/**
 * A schema for the data send in 'Window.postMessage'.
 * If this interface is changed then you must also change the listener in
 * 'sp-webpart-application:SpWebPartApplication._propertyPaneEventListener()'.
 */
export interface IPropertyPaneEventCallback {
    action: PropertyPaneAction;
    webPartInstanceId: string;
}
/**
 * Important properties for managing an iframed web part.
 */
export interface IIframedWebPartMetadata {
    /**
     * The origin of the url on the iframe. This property should be used when listening for
     * window messages from an iframe.
     * Ex: The origin of https://prepspo-app.spgrid.com/_layouts/15/webpart.aspx
     *  is https://prepspo-app.spgrid.com
     */
    origin: string;
    /**
     * The entire href source url on the iframe. This property should be used as the 'targetOrigin'
     * when sending window messages to iframe elements.
     */
    url: string;
    /**
     * The web part data of the web part loaded in the iframe.
     */
    webPartData: IWebPartData;
    /**
     * The Id of the iframe HTML element that contains the rendered web part.
     */
    webPartElementId: string;
    /**
     * The current display mode of the web part.
     */
    displayMode: DisplayMode;
    /**
     * Flag indicating whether the web part is rendered from the persisted data or not. If the web part is added
     * from toolbox, the value of this flag will be false.
     */
    addedFromPersistedData: boolean;
}
export default class IframedWebPartController {
    private _iframeSrcUrl;
    private _iframedWebparts;
    private _ppIframeElement;
    private _pageContentElement;
    private _iframedPropertyPaneContainer;
    private _host;
    constructor(host: IWebPartHost);
    /**
     * Delete references an iframed web part.
     */
    deleteWebPart(instanceId: string): void;
    /**
     * Get the instanceId's of all the iframed webparts.
     */
    getAllInstanceIds(): string[];
    /**
     * Send a message to the iframed webpart to notify that their container
     * has been resized.
     */
    notifyContainerResize(instanceId: string): void;
    startDirtyBitTimer(instanceId: string): void;
    /**
     *  @param domainUrl - the domain from which the web part should be loaded.
     *  Returns an iframe that points to a SpWebApplication that loads the webpart.
     *  @param pageContext - Page context reference.
     *  @param webPartManagerContext - web part manager context.
     */
    loadWebPart(domainUrl: string, pageContext: PageContext, webPartManagerContext: IWebPartManagerContext): void;
    /**
     * To open a property pane for a web part that has been loaded into an iframe, we create a sibling dom element on the
     * page and render the property pane into it. We use the same method of loading an iframe with the addition of a
     * query parameter, 'openPropertyPane=true'. By default 'openPropertyPane' is undefined and thus false.
     * @param instanceId - the instanceId of the corresponding web part.
     * @param propertyPaneState - the desired state of the property pane.
     */
    requestPropertyPaneAction(propertyPaneState: PropertyPaneAction, instanceId?: string): void;
    /**
     * Returns the most recently saved WebPartData for the web part associated
     * with the 'instanceId'.
     */
    serialize(instanceId: string): IWebPartData;
    /**
     * Handles the ClientSideWebPartManager's request to set the displayMode for a web part
     * in an iframe. (Saves the displayMode and sends a message to the iframe window).
     */
    setDisplayMode(displayMode: DisplayMode, instanceId: string): void;
    /**
     *  Returns the url that loads the webpart with instanceId and componentId on the 'webPartManagerContext'.
     *  @param domainUrl - the domain from which the web part should be loaded.
     *  @param pageContext - Page context reference.
     *  @param webPartManagerContext - web part manager context.
     */
    private _generateIframeSrcUrl;
    /**
     * Creates an iframe HTML element, sets the source url to load an application that will
     * display the property pane associated with the given parameters, and add the iframed
     * element as a child to the page chrome. This method will not show the property pane by
     * default, 'showPropetyPane' should be called after.
     * @param instanceId
     */
    private _createPropertyPaneElement;
    /**
     * Event listener that takes actions on behalf of iframed webparts.
     */
    private _iframeEventListener;
    /**
     * Sends a message to an iframed webpart requesting the 'displayMode' set by the ClientSideWebPartManager.
     *
     * When an iframe loads a webpart in an iframe it has the context of the webpart's 'displayMode', but the
     * iframe does not. Thus, after a webpart loads in an iframed, we send a message to the IframedWebPartController
     * asking for the display mode, which is then sent to the iframe via a window message.
     *
     */
    private _updateWebPartDisplayMode;
    /**
     * Sends a message to the iframed web part to update it's web part data if the incoming
     * webPartData differs from the currently saved reference.
     * There are two scenarios:
     *    1. the property pane has been updated and is sending a message to the rendered web part
     *    2. the rendered web part has been updated and is sending a message to the property pane
     *  - we use the param 'action' to differentiate the difference and use the correct element id
     *    of the property pane or the web part.
     *
     * @param instanceId - web part instance id
     * @param webPartData - the incoming web part data.
     */
    private _updateWebPartData;
    private _hidePropertyPane;
    /**
     * Adds and removes the neccessary styles to show the iframed property pane container.
     * Also posts a message to the window element so that the PropertyPaneController
     * can show the property pane content.
     * @param webPartInstanceId - instanceId so we know which property pane to open
     */
    private _showPropertyPane;
    /**
     * Adds the non-reserved query params from the host page to the iframe url.
     *
     * @param url - current iframe url.
     */
    private _addFilteredQueryParamsFromHostPage;
}
//# sourceMappingURL=IframedWebPartController.d.ts.map