import * as tslib_1 from "tslib";
import { ServiceScope, SPEvent } from '@microsoft/sp-core-library';
import { WebPartContext } from '../index'; // <-- part of "test-api" pattern; see sp-build-internal-web/includes/test-api-pattern/README.md
import MockWebPartManifestInstance from './MockWebPartManifestInstance';
var MockWebPartContextParameters = /** @class */ (function () {
    function MockWebPartContextParameters() {
        this.domElement = document.createElement('div');
        this.manifest = new MockWebPartManifestInstance();
        this.instanceId = 'wpInstanceId';
        this.webPartTag = 'WebPart.daf0b71c-6de8-4ef7-b511-faae7c388708.0ae4973a-70e3-451e-9f1f-3f25e5455a60';
        this.loggingTag = 'WebPart.daf0b71c-6de8-4ef7-b511-faae7c388708.0ae4973a-70e3-451e-9f1f-3f25e5455a60';
        this.sdks = {};
        /* tslint:disable:no-any */
        this.httpClient = {};
        this.spHttpClient = {};
        this.parentServiceScope = ServiceScope.startNewRoot();
        // public serviceScope: ServiceScope = this.parentServiceScope.startNewChild();
        // public pageContext: PageContext = new PageContext(this.parentServiceScope);
        this.statusRenderer = {};
        this.host = {};
        this.formFactor = 0 /* Standard */;
        this.propertyPane = {
            open: function () { },
            refresh: function () { }
        };
        this._dataUpdatedEvent = new SPEvent('webPart_exampleInstanceId_dataUpdated');
        this.isPropertyPaneRenderedByWebPart = function () { return true; };
        this.isPropertyPaneOpen = function () { return false; };
        this.requestPropertyPaneAction = function () { }; // tslint:disable-line:no-empty
        /* tslint:enable:no-any */
    }
    return MockWebPartContextParameters;
}());
export { MockWebPartContextParameters };
var MockWebPartContext = /** @class */ (function (_super) {
    tslib_1.__extends(MockWebPartContext, _super);
    function MockWebPartContext(parameters) {
        return _super.call(this, parameters) || this;
    }
    /**
     * Simulates initialization of the web part, equivalent to what the ClientSideWebPartManager
     * would do.
     */
    MockWebPartContext.prototype.initialize = function (webPart) {
        var parentServiceScope = this.serviceScope.getParent();
        if (parentServiceScope) {
            parentServiceScope.finish();
        }
        /* tslint:disable:no-any  */
        webPart._internalInitialize(this);
        /* tslint:enable:no-any  */
        return webPart;
    };
    return MockWebPartContext;
}(WebPartContext));
export default MockWebPartContext;
//# sourceMappingURL=MockWebPartContext.js.map