"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:typedef
const fileLoader = require('file-loader');
const loaderUtils = require("loader-utils");
const lodash_1 = require("lodash");
const nameLowerRegExp = /\[name\:lower\]/ig;
// tslint:disable-next-line:no-any
function casedFileLoader(content) {
    const query = lodash_1.cloneDeep(loaderUtils.getOptions(this));
    if (query.name && query.name.match(nameLowerRegExp)) {
        // Replace "[name:lower]" with "[name]"
        query.name = query.name.replace(nameLowerRegExp, '[name]');
        // Create a fake context replacing "emitFile" with our own implementation
        let fileLoaderUrl = '';
        /* tslint:disable:no-any */
        let fileLoaderContent;
        /* tslint:enable:no-any */
        const fileLoaderContext = {
            /* tslint:disable:no-any */
            emitFile: (url, loaderContent) => {
                /* tslint:enable:no-any */
                fileLoaderUrl = url;
                fileLoaderContent = loaderContent;
            },
            query
        };
        // Copy all of the properties of "this" to our fake context, but make sure we don't overwrite our
        // implementation of "emitFile"
        for (const property in this) {
            if (!fileLoaderContext.hasOwnProperty(property)) {
                /* tslint:disable:typedef */
                const propertyValue = this[property];
                /* tslint:enable:typedef */
                fileLoaderContext[property] = propertyValue;
            }
        }
        const fileLoaderResult = fileLoader.call(fileLoaderContext, content);
        const lowercaseUrl = fileLoaderUrl.toLowerCase();
        const oldEncodedUrl = JSON.stringify(fileLoaderUrl);
        const newEncodedUrl = JSON.stringify(lowercaseUrl);
        // Pass content out of the file loader
        this.emitFile(lowercaseUrl, fileLoaderContent);
        return fileLoaderResult.replace(oldEncodedUrl, newEncodedUrl);
    }
    else {
        // Pass through to the standard file loader
        return fileLoader.call(this, content);
    }
}
exports.default = casedFileLoader;
// Set this loader as "raw," so we get the file's raw bitstream, not a decoded string
/* tslint:disable:no-any */
casedFileLoader.raw = true;
/* tslint:enable:no-any */
//# sourceMappingURL=casedFileLoader.js.map